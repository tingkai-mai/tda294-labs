\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Oct 18 23:12:28 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:teaching, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:noRestriction, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:allow, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Wed Oct 18 23:12:28 CEST 2023
contract=BinarySearch[BinarySearch\\:\\:performBinarySearch()].JML normal_behavior operation contract.0
name=BinarySearch[BinarySearch\\:\\:performBinarySearch()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "jehou" ) (keyVersion "7437bac72e18662a0ab5b6bf241ffc6490526663"))

(autoModeTime "4545")

(branch "dummy ID"
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1") (newnames "heapAtPre,o,f"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "expandInInt" (formula "1") (term "1,0,0,0,1,1,1,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,1,1,1,0"))
(rule "expandInInt" (formula "1") (term "1,0,0,0,0,1,1,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,1,1,0"))
(rule "expandInInt" (formula "1") (term "1,0,0,0,0,1,1,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,1,1,0"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "exLeft" (formula "6") (inst "sk=q_0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "assignment" (formula "12"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0,0"))
(rule "all_unused" (formula "12") (term "0,1,0,1"))
(rule "all_unused" (formula "12") (term "1,0,1"))
(rule "concrete_and_3" (formula "12") (term "0,1"))
(rule "nnf_imp2or" (formula "5") (term "0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
(rule "Class_invariant_axiom_for_BinarySearch" (formula "9") (ifseqformula "3"))
(rule "true_left" (formula "9"))
(rule "commute_or_2" (formula "5") (term "0,0,0"))
(rule "commute_or" (formula "5") (term "0,0,0,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_performBinarySearch,savedHeapBefore_performBinarySearch"))
(rule "simplifyUpdate2" (formula "11") (term "1"))
(rule "methodCallUnfoldArguments" (formula "11") (term "1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "var"))
(rule "stringAssignment" (formula "11") (term "1"))
(rule "simplifyUpdate2" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "notLeft" (formula "1"))
(rule "sequentialToParallel2" (formula "13"))
(rule "simplifyUpdate3" (formula "13") (term "1,0"))
(rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "2"))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "13"))
(rule "concrete_or_2" (formula "1"))
(rule "methodCallWithinClass" (formula "14") (term "1") (userinteraction))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "message"))
(rule "assignment" (formula "14") (term "1"))
(rule "sequentialToParallel2" (formula "14"))
(rule "simplifyUpdate2" (formula "14"))
(rule "simplifyUpdate3" (formula "14") (term "1,0"))
(rule "applyOnElementary" (formula "14") (term "1,0"))
(rule "applyOnPV" (formula "14") (term "0,1,0"))
(rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_report,savedHeapBefore_report"))
(rule "simplifyUpdate2" (formula "14"))
(rule "simplifyUpdate2" (formula "14") (term "1"))
(rule "methodCallEmptyReturn" (formula "14") (term "1"))
(rule "blockEmpty" (formula "14") (term "1"))
(rule "methodCallUnfoldArguments" (formula "14") (term "1"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "var_1"))
(rule "assignment_read_attribute_this" (formula "14") (term "1"))
(rule "sequentialToParallel2" (formula "14"))
(rule "simplifyUpdate3" (formula "14") (term "1,0"))
 (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_eliminateDuplicates,exc_0,heapAfter_eliminateDuplicates,anon_heap_eliminateDuplicates") (contract "BinarySearch[BinarySearch::eliminateDuplicates([I)].JML normal_behavior operation contract.0") (modality "diamond") (userinteraction))
(branch "Post (eliminateDuplicates)"
   (rule "expandInInt" (formula "12") (term "0,0,0,0,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "12") (term "0,0,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,0,0,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,0,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,1,0,0,0,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,1,0,0,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "16"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "16"))
   (rule "simplifyUpdate3" (formula "16") (term "1,0"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "andLeft" (formula "12"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "andLeft" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "simplifyUpdate2" (formula "15"))
   (rule "andLeft" (formula "14"))
   (rule "simplifyUpdate2" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "simplifyUpdate2" (formula "16"))
   (rule "applyOnRigidFormula" (formula "12"))
   (rule "simplifyUpdate1" (formula "12") (term "1"))
   (rule "applyOnRigidFormula" (formula "14"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "applyOnRigidFormula" (formula "16"))
   (rule "simplifyUpdate1" (formula "16") (term "1"))
   (rule "applyOnPV" (formula "16") (term "0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0"))
   (rule "simplifyUpdate2" (formula "14") (term "1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0"))
   (rule "applyOnRigidTerm" (formula "12") (term "1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "simplifyUpdate2" (formula "15") (term "0,0,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "15") (term "0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "0,1,1,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "2,1,1,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1,1,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,1,1,0,0"))
   (rule "applyOnPV" (formula "15") (term "1,1,1,0,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,1,0,0"))
   (rule "applyOnPV" (formula "15") (term "1,0,1,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "2,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1,1,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,0"))
   (rule "blockEmpty" (formula "20") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0"))
   (rule "pullOutSelect" (formula "15") (term "1,1,0,0,0") (inst "selectSK=BinarySearch_size_0"))
   (rule "applyEq" (formula "14") (term "1,1,0,0,0,0") (ifseqformula "15"))
   (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "12"))
   (rule "elementOfFreshLocs" (formula "15") (term "1,0,0"))
   (rule "equalUnique" (formula "15") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "15") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "15") (term "0,0,0"))
   (rule "replace_known_right" (formula "15") (term "0,0,1,0,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "15") (term "0,1,0,0"))
   (rule "concrete_and_1" (formula "15") (term "1,0,0"))
   (rule "replace_known_left" (formula "15") (term "0,1,0,0") (ifseqformula "4"))
   (rule "concrete_not_1" (formula "15") (term "1,0,0"))
   (rule "concrete_or_4" (formula "15") (term "0,0"))
   (rule "elementOfUnion" (formula "15") (term "0,0"))
   (rule "elementOfAllFields" (formula "15") (term "0,0,0"))
   (rule "eqSymm" (formula "15") (term "0,0,0"))
   (rule "elementOfSingleton" (formula "15") (term "1,0,0"))
   (rule "eqClose" (formula "15") (term "1,1,0,0"))
   (rule "concrete_and_3" (formula "15") (term "1,0,0"))
   (rule "eqClose" (formula "15") (term "1,0,0"))
   (rule "concrete_or_3" (formula "15") (term "0,0"))
   (rule "ifthenelse_true" (formula "15") (term "0"))
   (rule "applyEqReverse" (formula "14") (term "1,1,0,0,0,0") (ifseqformula "15"))
   (rule "applyEqReverse" (formula "16") (term "1,1,0,0,0") (ifseqformula "15"))
   (rule "hideAuxiliaryEq" (formula "15"))
   (rule "nnf_imp2or" (formula "15") (term "0,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "16") (ifseqformula "5"))
   (rule "true_left" (formula "16"))
   (rule "commute_or_2" (formula "15") (term "0,0,0"))
   (rule "cnf_eqv" (formula "14") (term "0"))
   (rule "nnf_notEx" (formula "14") (term "0,1,0"))
   (rule "nnf_notEx" (formula "14") (term "1,0,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,1,0,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,1,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,0"))
   (rule "distr_forallAnd" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "methodCallUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_2"))
   (rule "compound_addition_2" (formula "20") (term "1") (inst "#v1=i") (inst "#v0=s"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "s"))
   (rule "stringAssignment" (formula "20") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "sequentialToParallel2" (formula "22"))
   (rule "simplifyUpdate3" (formula "22") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "2,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0"))
   (rule "applyOnPV" (formula "1") (term "0,0"))
   (rule "variableDeclarationAssign" (formula "22") (term "1"))
   (rule "variableDeclaration" (formula "22") (term "1") (newnames "i"))
   (rule "assignment_read_attribute_this" (formula "22") (term "1"))
   (rule "sequentialToParallel2" (formula "22"))
   (rule "simplifyUpdate3" (formula "22") (term "1,0"))
   (rule "applyOnElementary" (formula "22") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "22") (term "0,0,1,0"))
   (rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=BinarySearch_query_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
   (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0,0"))
   (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "6"))
   (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "1,0,0"))
   (rule "concrete_or_4" (formula "1") (term "0,0"))
   (rule "stringConcatIntExpRight" (formula "23") (term "1") (inst "sk=sk_0"))
   (rule "simplifyUpdate2" (formula "24"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "simplifyUpdate2" (formula "25"))
   (rule "sequentialToParallel2" (formula "25") (term "1"))
   (rule "simplifyUpdate3" (formula "25") (term "1,0,1"))
   (rule "sequentialToParallel2" (formula "25"))
   (rule "simplifyUpdate2" (formula "25"))
   (rule "simplifyUpdate3" (formula "25") (term "1,0"))
   (rule "applyOnParallel" (formula "25") (term "1,0"))
   (rule "simplifyUpdate3" (formula "25") (term "0,1,0"))
   (rule "applyOnElementary" (formula "25") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "0"))
   (rule "eqSymm" (formula "1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,1,1,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
   (rule "applyOnPV" (formula "1") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
   (rule "applyOnPV" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1"))
   (rule "poolKeyIsContentOfValue" (formula "1") (term "0,1"))
   (rule "elementOfUnion" (formula "2") (term "0,0"))
   (rule "elementOfAllFields" (formula "2") (term "0,0,0"))
   (rule "eqSymm" (formula "2") (term "0,0,0"))
   (rule "elementOfSingleton" (formula "2") (term "1,0,0"))
   (rule "equalUnique" (formula "2") (term "1,1,0,0"))
   (rule "concrete_and_4" (formula "2") (term "1,0,0"))
   (rule "concrete_or_4" (formula "2") (term "0,0"))
   (rule "sortsDisjointModuloNull" (formula "2") (term "0,0"))
   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "22"))
   (rule "concrete_and_4" (formula "2") (term "0,0"))
   (rule "ifthenelse_false" (formula "2") (term "0"))
   (rule "applyEqReverse" (formula "1") (term "0,1,1") (ifseqformula "2"))
   (rule "hideAuxiliaryEq" (formula "2"))
   (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "15"))
   (rule "elementOfFreshLocs" (formula "2") (term "1,0,0"))
   (rule "eqClose" (formula "2") (term "0,1,0,0,0"))
   (rule "concrete_not_1" (formula "2") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "2") (term "0,0,0"))
   (rule "concrete_or_2" (formula "2") (term "0,0"))
   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "20"))
   (rule "concrete_not_2" (formula "2") (term "0,0,0"))
   (rule "concrete_and_1" (formula "2") (term "0,0"))
   (rule "ifthenelse_negated" (formula "2") (term "0"))
   (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
   (rule "ifEqualsTRUE" (formula "2"))
   (rule "eq_and" (formula "2") (term "0"))
   (rule "hideAuxiliaryEqConcrete" (formula "3"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "neq_or" (formula "2") (term "0"))
   (rule "concrete_and_1" (formula "2"))
   (rule "commute_or" (formula "2"))
   (rule "ex_pull_out3" (formula "17") (term "0"))
   (rule "ex_pull_out2" (formula "16") (term "0"))
   (rule "all_pull_out2" (formula "17") (term "0,0"))
   (rule "cnf_rightDist" (formula "17") (term "0,0,0"))
   (rule "shift_paren_or" (formula "17") (term "1,0,0,0"))
   (rule "commute_or" (formula "17") (term "0,1,0,0,0"))
   (rule "cnf_rightDist" (formula "17") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "17") (term "1,0,0,0,0"))
   (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "17") (term "0,1,0,0,0,0"))
   (rule "commute_or" (formula "17") (term "0,0,1,0,0,0,0"))
   (rule "all_pull_out3" (formula "16") (term "0,0"))
   (rule "commute_or" (formula "16") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
   (rule "commute_or" (formula "16") (term "1,0,0,0"))
   (rule "cnf_rightDist" (formula "16") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "16") (term "1,0,0,0,0"))
   (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0"))
   (rule "commute_or" (formula "16") (term "0,1,0,0,0,0"))
   (rule "commute_and_2" (formula "17") (term "0,0,0"))
   (rule "commute_and_2" (formula "16") (term "0,0,0"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "1") (inst "iv=iv"))
   (rule "andLeft" (formula "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "1,1,0,1"))
   (rule "add_literals" (formula "1") (term "1,0,1"))
   (rule "add_literals" (formula "1") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
   (rule "applyEq" (formula "2") (term "0,0,1,0,0,1,0,0") (ifseqformula "3"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "1,0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
   (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "3"))
   (rule "lenOfSeqConcat" (formula "1") (term "0"))
   (rule "polySimp_homoEq" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "1,0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "add_literals" (formula "1") (term "0,1,0"))
   (rule "mul_literals" (formula "1") (term "1,0"))
   (rule "add_literals" (formula "1") (term "0"))
   (rule "eqClose" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "2"))
   (rule "eqClose" (formula "1") (term "1,0"))
   (rule "concrete_impl_4" (formula "1") (term "0"))
   (rule "all_unused" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "methodCallWithinClass" (formula "24") (term "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "24") (term "1"))
   (rule "variableDeclaration" (formula "24") (term "1") (newnames "message_1"))
   (rule "assignment" (formula "24") (term "1"))
   (rule "sequentialToParallel2" (formula "24"))
   (rule "simplifyUpdate2" (formula "24"))
   (rule "simplifyUpdate3" (formula "24") (term "1,0"))
   (rule "applyOnElementary" (formula "24") (term "1,0"))
   (rule "applyOnPV" (formula "24") (term "0,1,0"))
   (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_report_0,savedHeapBefore_report_0"))
   (rule "simplifyUpdate2" (formula "24"))
   (rule "simplifyUpdate2" (formula "24") (term "1"))
   (rule "methodCallEmptyReturn" (formula "24") (term "1"))
   (rule "blockEmpty" (formula "24") (term "1"))
   (rule "variableDeclarationAssign" (formula "24") (term "1"))
   (rule "variableDeclaration" (formula "24") (term "1") (newnames "searchResult"))
    (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_search,result_search,exc_1,heapAfter_search,anon_heap_search") (contract "BinarySearch[BinarySearch::search()].JML normal_behavior operation contract.0") (modality "diamond") (userinteraction))
   (branch "Post (search)"
      (rule "expandInInt" (formula "20") (term "1,0,1,1,1,1"))
      (rule "concrete_and_3" (formula "20") (term "0,1,1,1,1"))
      (rule "simplifyUpdate2" (formula "20"))
      (rule "simplifyUpdate2" (formula "20") (term "1"))
      (rule "andLeft" (formula "20"))
      (rule "sequentialToParallel2" (formula "27"))
      (rule "simplifyUpdate2" (formula "27"))
      (rule "simplifyUpdate3" (formula "27") (term "1,0"))
      (rule "sequentialToParallel2" (formula "21"))
      (rule "simplifyUpdate2" (formula "21"))
      (rule "simplifyUpdate3" (formula "21") (term "0"))
      (rule "andLeft" (formula "21"))
      (rule "simplifyUpdate2" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "simplifyUpdate2" (formula "23"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "simplifyUpdate2" (formula "22"))
      (rule "notLeft" (formula "22"))
      (rule "applyOnRigidFormula" (formula "20"))
      (rule "simplifyUpdate1" (formula "20") (term "1"))
      (rule "applyOnRigidFormula" (formula "23"))
      (rule "simplifyUpdate1" (formula "23") (term "1"))
      (rule "applyOnPV" (formula "23") (term "0"))
      (rule "applyOnRigidFormula" (formula "22"))
      (rule "applyOnRigidTerm" (formula "20") (term "0"))
      (rule "simplifyUpdate1" (formula "20") (term "1,0"))
      (rule "applyOnPV" (formula "20") (term "0,0"))
      (rule "simplifyUpdate1" (formula "20") (term "2,0"))
      (rule "applyOnRigidTerm" (formula "22") (term "0"))
      (rule "applyOnPV" (formula "22") (term "0,0"))
      (rule "simplifyUpdate1" (formula "22") (term "2,0"))
      (rule "applyOnRigidTerm" (formula "22") (term "1"))
      (rule "simplifyUpdate1" (formula "22") (term "2,1"))
      (rule "simplifyUpdate1" (formula "22") (term "1,1"))
      (rule "applyOnPV" (formula "22") (term "0,1"))
      (rule "applyOnRigidTerm" (formula "22") (term "1,0"))
      (rule "simplifyUpdate1" (formula "22") (term "2,1,0"))
      (rule "simplifyUpdate1" (formula "22") (term "1,1,0"))
      (rule "applyOnPV" (formula "22") (term "0,1,0"))
      (rule "assignment" (formula "30") (term "1"))
      (rule "sequentialToParallel2" (formula "30"))
      (rule "simplifyUpdate3" (formula "30") (term "1,0"))
      (rule "pullOutSelect" (formula "22") (term "1") (inst "selectSK=BinarySearch_query_1"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "20"))
      (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
      (rule "elementOfEmpty" (formula "22") (term "0,0,0,0"))
      (rule "concrete_and_2" (formula "22") (term "0,0,0"))
      (rule "concrete_or_2" (formula "22") (term "0,0"))
      (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
      (rule "elementOfFreshLocs" (formula "23") (term "1,0,0"))
      (rule "elementOfEmpty" (formula "23") (term "0,0,0,0"))
      (rule "concrete_and_2" (formula "23") (term "0,0,0"))
      (rule "concrete_or_2" (formula "23") (term "0,0"))
      (rule "replace_known_right" (formula "22") (term "0,0,0,0") (ifseqformula "28"))
      (rule "concrete_not_2" (formula "22") (term "0,0,0"))
      (rule "concrete_and_1" (formula "22") (term "0,0"))
      (rule "ifthenelse_negated" (formula "22") (term "0"))
      (rule "pullOutSelect" (formula "23") (term "2,0") (inst "selectSK=arr_0"))
      (rule "simplifySelectOfCreate" (formula "23"))
      (rule "equalUnique" (formula "23") (term "1,0,0"))
      (rule "concrete_and_4" (formula "23") (term "0,0"))
      (rule "ifthenelse_false" (formula "23") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "14"))
      (rule "elementOfFreshLocs" (formula "23") (term "1,0,0"))
      (rule "equalUnique" (formula "23") (term "0,1,0,0,0"))
      (rule "concrete_not_2" (formula "23") (term "1,0,0,0"))
      (rule "concrete_and_3" (formula "23") (term "0,0,0"))
      (rule "elementOfUnion" (formula "23") (term "0,0,0"))
      (rule "elementOfAllFields" (formula "23") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "23") (term "1,0,0,0"))
      (rule "equalUnique" (formula "23") (term "1,1,0,0,0"))
      (rule "concrete_and_4" (formula "23") (term "1,0,0,0"))
      (rule "concrete_or_4" (formula "23") (term "0,0,0"))
      (rule "pullOutSelect" (formula "24") (term "1,1,0") (inst "selectSK=BinarySearch_numbers_0"))
      (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "23") (term "0,0,0,1,0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "24"))
      (rule "applyEq" (formula "23") (term "1,2,0") (ifseqformula "24"))
      (rule "applyEq" (formula "25") (term "0,0,0,0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "23") (term "1,0,0,1,1,0,0") (ifseqformula "24"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "20"))
      (rule "elementOfFreshLocs" (formula "24") (term "1,0,0"))
      (rule "elementOfEmpty" (formula "24") (term "0,0,0,0"))
      (rule "concrete_and_2" (formula "24") (term "0,0,0"))
      (rule "concrete_or_2" (formula "24") (term "0,0"))
      (rule "eqSymm" (formula "23") (term "0,0,0"))
      (rule "replace_known_right" (formula "24") (term "0,0,0,0") (ifseqformula "30"))
      (rule "concrete_not_2" (formula "24") (term "0,0,0"))
      (rule "concrete_and_1" (formula "24") (term "0,0"))
      (rule "ifthenelse_negated" (formula "24") (term "0"))
      (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=BinarySearch_query_2"))
      (rule "simplifySelectOfCreate" (formula "22"))
      (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "22") (term "2,0"))
      (rule "equalUnique" (formula "22") (term "1,0,0"))
      (rule "concrete_and_4" (formula "22") (term "0,0"))
      (rule "ifthenelse_false" (formula "22") (term "0"))
      (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "pullOutSelect" (formula "22") (term "0,0,0") (inst "selectSK=java_lang_Object_created__1"))
      (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "22"))
      (rule "simplifySelectOfCreate" (formula "22"))
      (rule "eqClose" (formula "22") (term "1,0,0"))
      (rule "concrete_and_3" (formula "22") (term "0,0"))
      (rule "castDel" (formula "22") (term "1,0"))
      (rule "eqSymm" (formula "22") (term "0,0,0"))
      (rule "replace_known_right" (formula "22") (term "0,1,0,0") (ifseqformula "33"))
      (rule "concrete_not_2" (formula "22") (term "1,0,0"))
      (rule "concrete_and_3" (formula "22") (term "0,0"))
      (rule "sortsDisjointModuloNull" (formula "22") (term "0,0"))
      (rule "replace_known_right" (formula "22") (term "0,0,0") (ifseqformula "31"))
      (rule "concrete_and_2" (formula "22") (term "0,0"))
      (rule "ifthenelse_false" (formula "22") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "14"))
      (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
      (rule "eqClose" (formula "22") (term "0,1,0,0,0"))
      (rule "concrete_not_1" (formula "22") (term "1,0,0,0"))
      (rule "concrete_and_4" (formula "22") (term "0,0,0"))
      (rule "concrete_or_2" (formula "22") (term "0,0"))
      (rule "replace_known_right" (formula "22") (term "0,0,0,0") (ifseqformula "31"))
      (rule "concrete_not_2" (formula "22") (term "0,0,0"))
      (rule "concrete_and_1" (formula "22") (term "0,0"))
      (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "6"))
      (rule "concrete_not_1" (formula "22") (term "0,0"))
      (rule "ifthenelse_false" (formula "22") (term "0"))
      (rule "applyEqReverse" (formula "23") (term "0,0,0") (ifseqformula "22"))
      (rule "applyEqReverse" (formula "25") (term "0,0,0") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "6"))
      (rule "ifthenelse_true" (formula "24") (term "0"))
      (rule "simplifySelectOfCreate" (formula "24"))
      (rule "equalUnique" (formula "24") (term "1,0,0"))
      (rule "concrete_and_4" (formula "24") (term "0,0"))
      (rule "ifthenelse_false" (formula "24") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "14"))
      (rule "elementOfFreshLocs" (formula "24") (term "1,0,0"))
      (rule "equalUnique" (formula "24") (term "0,1,0,0,0"))
      (rule "concrete_not_2" (formula "24") (term "1,0,0,0"))
      (rule "concrete_and_3" (formula "24") (term "0,0,0"))
      (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "6"))
      (rule "ifthenelse_true" (formula "22") (term "0"))
      (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "replace_known_left" (formula "23") (term "0,1,1,0,0") (ifseqformula "6"))
      (rule "concrete_not_1" (formula "23") (term "1,1,0,0"))
      (rule "concrete_and_4" (formula "23") (term "1,0,0"))
      (rule "concrete_or_4" (formula "23") (term "0,0"))
      (rule "elementOfUnion" (formula "23") (term "0,0"))
      (rule "elementOfAllFields" (formula "23") (term "0,0,0"))
      (rule "eqSymm" (formula "23") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "23") (term "1,0,0"))
      (rule "equalUnique" (formula "23") (term "1,1,0,0"))
      (rule "concrete_and_4" (formula "23") (term "1,0,0"))
      (rule "concrete_or_4" (formula "23") (term "0,0"))
      (rule "sortsDisjointModuloNull" (formula "23") (term "0,0"))
      (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "30"))
      (rule "concrete_and_2" (formula "23") (term "0,0"))
      (rule "ifthenelse_false" (formula "23") (term "0"))
      (rule "applyEqReverse" (formula "24") (term "0,0,0,0,0") (ifseqformula "23"))
      (rule "applyEqReverse" (formula "22") (term "1,1,0") (ifseqformula "23"))
      (rule "applyEqReverse" (formula "24") (term "1,1,0") (ifseqformula "23"))
      (rule "applyEqReverse" (formula "22") (term "1,0,0,0") (ifseqformula "23"))
      (rule "eqClose" (formula "22") (term "0,0,0"))
      (rule "concrete_or_1" (formula "22") (term "0,0"))
      (rule "ifthenelse_true" (formula "22") (term "0"))
      (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "23"))
      (rule "applyEqReverse" (formula "24") (term "2,0") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "23"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "replace_known_right" (formula "22") (term "0,0,0,0") (ifseqformula "28"))
      (rule "concrete_not_2" (formula "22") (term "0,0,0"))
      (rule "concrete_and_1" (formula "22") (term "0,0"))
      (rule "ifthenelse_negated" (formula "22") (term "0"))
      (rule "pullOutSelect" (formula "22") (term "0,0,0") (inst "selectSK=java_lang_Object_created__2"))
      (rule "simplifySelectOfCreate" (formula "22"))
      (rule "eqClose" (formula "22") (term "1,0,0"))
      (rule "concrete_and_3" (formula "22") (term "0,0"))
      (rule "castDel" (formula "22") (term "1,0"))
      (rule "eqSymm" (formula "22") (term "0,0,0"))
      (rule "replace_known_right" (formula "22") (term "0,1,0,0") (ifseqformula "30"))
      (rule "concrete_not_2" (formula "22") (term "1,0,0"))
      (rule "concrete_and_3" (formula "22") (term "0,0"))
      (rule "sortsDisjointModuloNull" (formula "22") (term "0,0"))
      (rule "replace_known_right" (formula "22") (term "1,0,0") (ifseqformula "30"))
      (rule "concrete_and_4" (formula "22") (term "0,0"))
      (rule "ifthenelse_false" (formula "22") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "14"))
      (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
      (rule "eqClose" (formula "22") (term "0,1,0,0,0"))
      (rule "concrete_not_1" (formula "22") (term "1,0,0,0"))
      (rule "concrete_and_4" (formula "22") (term "0,0,0"))
      (rule "concrete_or_2" (formula "22") (term "0,0"))
      (rule "replace_known_left" (formula "22") (term "0,1,0,0") (ifseqformula "3"))
      (rule "concrete_not_1" (formula "22") (term "1,0,0"))
      (rule "concrete_and_4" (formula "22") (term "0,0"))
      (rule "ifthenelse_false" (formula "22") (term "0"))
      (rule "applyEqReverse" (formula "23") (term "0,0,0") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "3"))
      (rule "ifthenelse_true" (formula "22") (term "0"))
      (rule "methodCallReturn" (formula "30") (term "1"))
      (rule "assignment" (formula "30") (term "1"))
      (rule "sequentialToParallel2" (formula "30"))
      (rule "simplifyUpdate2" (formula "30"))
      (rule "simplifyUpdate3" (formula "30") (term "1,0"))
      (rule "applyOnElementary" (formula "30") (term "1,0"))
      (rule "applyOnPV" (formula "30") (term "0,1,0"))
      (rule "Class_invariant_axiom_for_BinarySearch" (formula "23") (ifseqformula "7"))
      (rule "true_left" (formula "23"))
      (rule "methodCallEmpty" (formula "29") (term "1"))
      (rule "tryEmpty" (formula "29") (term "1"))
      (rule "emptyModality" (formula "29") (term "1"))
      (rule "applyOnRigidFormula" (formula "29"))
      (rule "simplifyUpdate2" (formula "29") (term "0"))
      (rule "simplifyUpdate2" (formula "29") (term "1"))
      (rule "applyOnRigidFormula" (formula "29") (term "0"))
      (rule "simplifyUpdate2" (formula "29") (term "1,0"))
      (rule "applyOnRigidFormula" (formula "29") (term "1"))
      (rule "simplifyUpdate1" (formula "29") (term "1,1"))
      (rule "applyOnPV" (formula "29") (term "0,1"))
      (rule "eqClose" (formula "29") (term "1"))
      (rule "concrete_and_3" (formula "29"))
      (rule "applyOnRigidFormula" (formula "29") (term "0"))
      (rule "simplifyUpdate2" (formula "29") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "29") (term "1"))
      (rule "applyOnPV" (formula "29") (term "0,1"))
      (rule "simplifyUpdate1" (formula "29") (term "1,1"))
      (rule "applyOnRigidFormula" (formula "29") (term "1,0"))
      (rule "simplifyUpdate1" (formula "29") (term "1,1,0"))
      (rule "applyOnRigidFormula" (formula "29") (term "0,0"))
      (rule "applyOnRigidTerm" (formula "29") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "29") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "29") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "29") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "29") (term "0,0,1,0"))
      (rule "applyOnRigidTerm" (formula "29") (term "1,1,0"))
      (rule "simplifyUpdate1" (formula "29") (term "1,1,1,0"))
      (rule "applyOnPV" (formula "29") (term "0,1,1,0"))
      (rule "simplifyUpdate1" (formula "29") (term "2,1,1,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "29") (term "1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_18" (formula "29") (term "1,1,0"))
      (rule "applyOnRigidFormula" (formula "29") (term "0,0,0"))
      (rule "simplifyUpdate1" (formula "29") (term "1,0,0,0"))
      (rule "applyOnPV" (formula "29") (term "0,0,0,0"))
      (rule "replace_known_right" (formula "29") (term "0,0,0") (ifseqformula "23"))
      (rule "concrete_not_2" (formula "29") (term "0,0"))
      (rule "concrete_and_1" (formula "29") (term "0"))
      (rule "applyOnRigidTerm" (formula "29") (term "2,0,0"))
      (rule "applyOnPV" (formula "29") (term "0,2,0,0"))
      (rule "applyOnRigidTerm" (formula "29") (term "1,0,0"))
      (rule "simplifyUpdate1" (formula "29") (term "2,1,0,0"))
      (rule "simplifyUpdate1" (formula "29") (term "1,1,0,0"))
      (rule "applyOnPV" (formula "29") (term "0,1,0,0"))
      (rule "replaceKnownSelect_taclet00_7" (formula "29") (term "0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_18" (formula "29") (term "0,0"))
      (rule "eqClose" (formula "29") (term "0"))
      (rule "concrete_and_1" (formula "29"))
      (rule "Class_invariant_axiom_for_BinarySearch" (formula "29") (ifseqformula "7"))
      (rule "closeTrue" (formula "29"))
   )
   (branch "Exceptional Post (search)"
      (rule "simplifyUpdate2" (formula "20"))
      (rule "simplifyUpdate2" (formula "20") (term "1"))
      (rule "andLeft" (formula "20"))
      (rule "sequentialToParallel2" (formula "27"))
      (rule "simplifyUpdate2" (formula "27"))
      (rule "simplifyUpdate3" (formula "27") (term "1,0"))
      (rule "sequentialToParallel2" (formula "21"))
      (rule "simplifyUpdate2" (formula "21"))
      (rule "simplifyUpdate3" (formula "21") (term "0"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "simplifyUpdate2" (formula "23"))
      (rule "andLeft" (formula "21"))
      (rule "simplifyUpdate2" (formula "21"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "21"))
      (rule "close" (formula "25") (ifseqformula "24"))
   )
   (branch "Pre (search)"
      (rule "expandInInt" (formula "24") (term "1,0,0,0,0,1,0,1,1"))
      (rule "concrete_and_3" (formula "24") (term "0,0,0,0,1,0,1,1"))
      (rule "expandInInt" (formula "24") (term "1,0,0,0,1,1,0,1,1"))
      (rule "concrete_and_3" (formula "24") (term "0,0,0,1,1,0,1,1"))
      (rule "expandInInt" (formula "24") (term "1,0,0,0,0,1,0,1,1"))
      (rule "concrete_and_3" (formula "24") (term "0,0,0,0,1,0,1,1"))
      (rule "simplifyUpdate2" (formula "24"))
      (rule "simplifyUpdate2" (formula "24") (term "1"))
      (rule "applyOnRigidFormula" (formula "24"))
      (rule "applyOnRigidFormula" (formula "24") (term "0"))
      (rule "applyOnRigidFormula" (formula "24") (term "1"))
      (rule "applyOnPV" (formula "24") (term "0,1"))
      (rule "wellFormedCreate" (formula "24") (term "1"))
      (rule "wellFormedAnonEQ" (formula "24") (term "1") (ifseqformula "14"))
      (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "13"))
      (rule "concrete_and_3" (formula "24") (term "1"))
      (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "5"))
      (rule "concrete_and_3" (formula "24"))
      (rule "applyOnRigidFormula" (formula "24") (term "1"))
      (rule "applyOnRigidFormula" (formula "24") (term "0"))
      (rule "applyOnRigidFormula" (formula "24") (term "0,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "1,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "0,0"))
      (rule "simplifyUpdate1" (formula "24") (term "1,0,0"))
      (rule "applyOnRigidFormula" (formula "24") (term "0,0,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "1,1,1"))
      (rule "simplifyUpdate1" (formula "24") (term "1,1,1,1"))
      (rule "applyOnPV" (formula "24") (term "0,1,1,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "0,1,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "0,0,0"))
      (rule "simplifyUpdate1" (formula "24") (term "2,0,0,0"))
      (rule "applyOnPV" (formula "24") (term "0,0,0,0"))
      (rule "simplifyUpdate1" (formula "24") (term "1,0,0,0"))
      (rule "applyOnRigidFormula" (formula "24") (term "0,0,0,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "0,0,0,0,1"))
      (rule "simplifyUpdate2" (formula "24") (term "0,0,0,0,0,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "0,0,0,1,1"))
      (rule "simplifyUpdate2" (formula "24") (term "0,0,0,0,1,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,1,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "24") (term "0,1,0,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "0,1,0,0,0,1"))
      (rule "applyOnPV" (formula "24") (term "0,0,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,0,0,1"))
      (rule "applyOnPV" (formula "24") (term "0,1,1,0,0,0,1"))
      (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "24") (term "0,1,0,0,0,1,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,0,1,1"))
      (rule "applyOnPV" (formula "24") (term "0,1,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "24") (term "1,1,1,0,0,1,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "0,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0,0,1,1"))
      (rule "applyOnPV" (formula "24") (term "0,0,1,0,0,1,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,0,0,0,1"))
      (rule "applyOnPV" (formula "24") (term "0,1,1,0,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "24") (term "1,1,1,0,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "1,0,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "24") (term "2,1,0,1,0,0,0,1"))
      (rule "applyOnPV" (formula "24") (term "0,1,0,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "24") (term "1,1,0,1,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "1,1,1,0,0,0,1"))
      (rule "applyOnPV" (formula "24") (term "0,1,1,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "24") (term "1,1,1,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "24") (term "2,1,1,1,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "24") (term "1,1,1,0,0,0,1,1"))
      (rule "applyOnPV" (formula "24") (term "0,1,1,0,0,0,1,1"))
      (rule "applyOnRigidTerm" (formula "24") (term "1,0,1,0,0,1,1"))
      (rule "applyOnPV" (formula "24") (term "0,1,0,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "24") (term "2,1,0,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "24") (term "1,1,0,1,0,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1"))
      (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1"))
      (rule "pullOutSelect" (formula "24") (term "0,0,0") (inst "selectSK=BinarySearch_numbers_0"))
      (rule "applyEq" (formula "25") (term "1,0,1,0,0,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "25") (term "1,0,1,0,0,1,1") (ifseqformula "1"))
      (rule "applyEq" (formula "25") (term "1,1,1,1,0,0,0,1") (ifseqformula "1"))
      (rule "simplifySelectOfCreate" (formula "1"))
      (rule "equalUnique" (formula "1") (term "1,0,0"))
      (rule "concrete_and_4" (formula "1") (term "0,0"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
      (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "22"))
      (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
      (rule "concrete_and_1" (formula "1") (term "1,0,0"))
      (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "7"))
      (rule "concrete_not_1" (formula "1") (term "1,0,0"))
      (rule "concrete_or_4" (formula "1") (term "0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfAllFields" (formula "1") (term "0,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
      (rule "equalUnique" (formula "1") (term "1,1,0,0"))
      (rule "concrete_and_4" (formula "1") (term "1,0,0"))
      (rule "concrete_or_4" (formula "1") (term "0,0"))
      (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
      (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "22"))
      (rule "concrete_and_4" (formula "1") (term "0,0"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "25") (term "0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "25") (term "1,1,1,1,0,0,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "25") (term "1,0,1,0,0,1,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "25") (term "1,0,1,0,0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "22"))
      (rule "concrete_not_2" (formula "24") (term "0"))
      (rule "concrete_and_1" (formula "24"))
      (rule "pullOutSelect" (formula "24") (term "1,1,0,0,1") (inst "selectSK=BinarySearch_query_1"))
      (rule "simplifySelectOfCreate" (formula "1"))
      (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "2,0"))
      (rule "equalUnique" (formula "1") (term "1,0,0"))
      (rule "concrete_and_4" (formula "1") (term "0,0"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "25") (term "1,1,0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "24") (term "1,1,0,0,0,1") (inst "selectSK=BinarySearch_size_1"))
      (rule "applyEq" (formula "25") (term "1,1,0,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfCreate" (formula "1"))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
      (rule "equalUnique" (formula "1") (term "1,0,0"))
      (rule "concrete_and_4" (formula "1") (term "0,0"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "25") (term "1,1,0,0,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "25") (term "1,1,0,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
      (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0"))
      (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
      (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0"))
      (rule "Class_invariant_axiom_for_BinarySearch" (formula "24") (term "1,1") (ifseqformula "7"))
      (rule "concrete_and_3" (formula "24") (term "1"))
      (rule "andRight" (formula "24"))
      (branch
         (rule "allRight" (formula "24") (inst "sk=j_0"))
         (rule "allRight" (formula "24") (inst "sk=m_0"))
         (rule "orRight" (formula "24"))
         (rule "orRight" (formula "24"))
         (rule "orRight" (formula "24"))
         (rule "inEqSimp_leqRight" (formula "27"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_geqRight" (formula "27"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "27"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_leqRight" (formula "27"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1"))
         (rule "polySimp_elimOne" (formula "4") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfCreate" (formula "4"))
         (rule "equalUnique" (formula "4") (term "1,0,0"))
         (rule "concrete_and_4" (formula "4") (term "0,0"))
         (rule "ifthenelse_false" (formula "4") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "19"))
         (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
         (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "4") (term "0,0,0"))
         (rule "replace_known_right" (formula "4") (term "0,0,1,0,0") (ifseqformula "27"))
         (rule "concrete_not_2" (formula "4") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "4") (term "1,0,0"))
         (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "8"))
         (rule "concrete_not_1" (formula "4") (term "1,0,0"))
         (rule "concrete_or_4" (formula "4") (term "0,0"))
         (rule "inEqSimp_commuteGeq" (formula "5"))
         (rule "elementOfUnion" (formula "4") (term "0,0"))
         (rule "elementOfAllFields" (formula "4") (term "0,0,0"))
         (rule "eqClose" (formula "4") (term "0,0,0"))
         (rule "concrete_or_1" (formula "4") (term "0,0"))
         (rule "ifthenelse_true" (formula "4") (term "0"))
         (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "4"))
         (rule "hideAuxiliaryEq" (formula "4"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
         (rule "mul_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
         (rule "simplifySelectOfCreate" (formula "5"))
         (rule "equalUnique" (formula "5") (term "1,0,0"))
         (rule "concrete_and_4" (formula "5") (term "0,0"))
         (rule "ifthenelse_false" (formula "5") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "20"))
         (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
         (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "5") (term "0,0,0"))
         (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "28"))
         (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "5") (term "1,0,0"))
         (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "9"))
         (rule "concrete_not_1" (formula "5") (term "1,0,0"))
         (rule "concrete_or_4" (formula "5") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "elementOfUnion" (formula "5") (term "0,0"))
         (rule "elementOfAllFields" (formula "5") (term "0,0,0"))
         (rule "eqClose" (formula "5") (term "0,0,0"))
         (rule "concrete_or_1" (formula "5") (term "0,0"))
         (rule "ifthenelse_true" (formula "5") (term "0"))
         (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "5"))
         (rule "hideAuxiliaryEq" (formula "5"))
         (rule "cut_direct" (formula "7") (term "0"))
         (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
            (rule "concrete_or_1" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "allLeft" (formula "23") (inst "t=j_0"))
            (rule "replaceKnownSelect_taclet020_17" (formula "23") (term "0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet020_18" (formula "23") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
            (rule "polySimp_addComm1" (formula "23") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0,0,0") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,1,0,0,0"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,1,0,0,0"))
            (rule "leq_literals" (formula "23") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "23") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "23") (term "0,0,0"))
            (rule "allLeft" (formula "23") (inst "t=m_0"))
            (rule "replaceKnownSelect_taclet020_14" (formula "23") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet020_15" (formula "23") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "23") (term "0,0,0"))
            (rule "concrete_and_2" (formula "23") (term "0,0"))
            (rule "concrete_or_2" (formula "23") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "5"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,1"))
            (rule "leq_literals" (formula "23") (term "0,1"))
            (rule "concrete_and_2" (formula "23") (term "1"))
            (rule "concrete_or_4" (formula "23"))
            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "23"))
            (rule "andLeft" (formula "3"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "1,1,0"))
            (rule "times_zero_1" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "leq_literals" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
         (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
            (rule "concrete_or_2" (formula "7"))
            (rule "allLeft" (formula "23") (inst "t=j_0"))
            (rule "replaceKnownSelect_taclet020_17" (formula "23") (term "0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet020_18" (formula "23") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
            (rule "polySimp_addComm1" (formula "23") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0,0,0") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,1,0,0,0"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,1,0,0,0"))
            (rule "leq_literals" (formula "23") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "23") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "23") (term "0,0,0"))
            (rule "allLeft" (formula "23") (inst "t=m_0"))
            (rule "replaceKnownSelect_taclet020_14" (formula "23") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet020_15" (formula "23") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "23") (term "0,0,0"))
            (rule "concrete_and_2" (formula "23") (term "0,0"))
            (rule "concrete_or_2" (formula "23") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "5"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,1"))
            (rule "leq_literals" (formula "23") (term "0,1"))
            (rule "concrete_and_2" (formula "23") (term "1"))
            (rule "concrete_or_4" (formula "23"))
            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "23"))
            (rule "andLeft" (formula "3"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "1,1,0"))
            (rule "times_zero_1" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "leq_literals" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
      )
      (branch
         (rule "exRight" (formula "24") (inst "t=q_0"))
         (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "10"))
         (rule "concrete_and_1" (formula "24") (term "0"))
         (rule "allLeft" (formula "16") (inst "t=int::select(heap, self, BinarySearch::$query)"))
         (rule "exLeft" (formula "16") (inst "sk=i_0"))
         (rule "allLeft" (formula "16") (inst "t=q_0"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "12"))
         (rule "concrete_not_1" (formula "17") (term "1,0"))
         (rule "concrete_or_4" (formula "17") (term "0"))
         (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "12"))
         (rule "concrete_not_1" (formula "18") (term "1"))
         (rule "concrete_or_4" (formula "18"))
         (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "12"))
         (rule "concrete_not_1" (formula "16") (term "1"))
         (rule "concrete_or_4" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "1"))
         (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,1,0"))
         (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
         (rule "polySimp_addComm1" (formula "18") (term "0,1,0"))
         (rule "inEqSimp_homoInEq1" (formula "16") (term "1"))
         (rule "polySimp_addComm1" (formula "16") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1"))
         (rule "mul_literals" (formula "16") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
         (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "10"))
         (rule "qeq_literals" (formula "18") (term "0,0,0"))
         (rule "concrete_and_2" (formula "18") (term "0,0"))
         (rule "concrete_or_2" (formula "18") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "11"))
         (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
         (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
         (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "16") (term "0,0,1"))
         (rule "leq_literals" (formula "16") (term "0,1"))
         (rule "concrete_and_2" (formula "16") (term "1"))
         (rule "concrete_or_4" (formula "16"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "11"))
         (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0"))
         (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
         (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,1,0"))
         (rule "leq_literals" (formula "17") (term "0,1,0"))
         (rule "concrete_and_2" (formula "17") (term "1,0"))
         (rule "concrete_or_4" (formula "17") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "11"))
         (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
         (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0"))
         (rule "leq_literals" (formula "18") (term "0,0"))
         (rule "concrete_and_2" (formula "18") (term "0"))
         (rule "concrete_or_2" (formula "18"))
         (rule "replace_known_left" (formula "19") (term "1,0,1,0") (ifseqformula "18"))
         (rule "concrete_or_3" (formula "19") (term "0,1,0"))
         (rule "concrete_or_1" (formula "19") (term "1,0"))
         (rule "concrete_and_3" (formula "19") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "10"))
         (rule "qeq_literals" (formula "16") (term "0,0"))
         (rule "concrete_and_2" (formula "16") (term "0"))
         (rule "concrete_or_2" (formula "16"))
         (rule "replace_known_left" (formula "19") (term "1,0,0,0,0") (ifseqformula "16"))
         (rule "concrete_or_3" (formula "19") (term "0,0,0,0"))
         (rule "concrete_or_1" (formula "19") (term "0,0,0"))
         (rule "concrete_or_1" (formula "19") (term "0,0"))
         (rule "concrete_and_1" (formula "19") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "10"))
         (rule "qeq_literals" (formula "17") (term "0,0"))
         (rule "concrete_and_2" (formula "17") (term "0"))
         (rule "concrete_or_2" (formula "17"))
         (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "17"))
         (rule "concrete_or_3" (formula "19") (term "0"))
         (rule "pullOutSelect" (formula "28") (term "0,1") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
         (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "29") (term "1"))
         (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "27"))
         (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "1") (term "1,0,0"))
         (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "4"))
         (rule "concrete_not_1" (formula "1") (term "1,0,0"))
         (rule "concrete_or_4" (formula "1") (term "0,0"))
         (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "13"))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfAllFields" (formula "1") (term "0,0,0"))
         (rule "eqClose" (formula "1") (term "0,0,0"))
         (rule "concrete_or_1" (formula "1") (term "0,0"))
         (rule "ifthenelse_true" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "29") (term "1,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "eqSymm" (formula "28") (term "1"))
         (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=arr_1"))
         (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "14"))
         (rule "elementOfFreshLocs" (formula "17") (term "1,0,0"))
         (rule "equalUnique" (formula "17") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "17") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "17") (term "0,0,0"))
         (rule "eqSymm" (formula "18"))
         (rule "applyEqReverse" (formula "17") (term "1") (ifseqformula "18"))
         (rule "hideAuxiliaryEq" (formula "18"))
         (rule "replace_known_right" (formula "17") (term "0,0,1,0,0") (ifseqformula "26"))
         (rule "concrete_not_2" (formula "17") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "17") (term "1,0,0"))
         (rule "replace_known_left" (formula "17") (term "0,1,0,0") (ifseqformula "3"))
         (rule "concrete_not_1" (formula "17") (term "1,0,0"))
         (rule "concrete_or_4" (formula "17") (term "0,0"))
         (rule "elementOfUnion" (formula "17") (term "0,0"))
         (rule "elementOfAllFields" (formula "17") (term "0,0,0"))
         (rule "eqClose" (formula "17") (term "0,0,0"))
         (rule "concrete_or_1" (formula "17") (term "0,0"))
         (rule "ifthenelse_true" (formula "17") (term "0"))
         (rule "all_unused" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "nnf_ex2all" (formula "28"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "2") (inst "iv=iv"))
         (rule "andLeft" (formula "2"))
         (rule "lenOfSeqConcat" (formula "2") (term "1"))
         (rule "lenOfSeqConcat" (formula "2") (term "0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "1,1,0,1"))
         (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
         (rule "add_literals" (formula "2") (term "1,0,1"))
         (rule "add_literals" (formula "2") (term "0,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
         (rule "applyEq" (formula "3") (term "0,0,1,0,0,1,0,0") (ifseqformula "4"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSingleton" (formula "3") (term "1,0,1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "3") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
         (rule "applyEq" (formula "3") (term "0,0,1,0") (ifseqformula "4"))
         (rule "eqClose" (formula "3") (term "1,0"))
         (rule "concrete_impl_4" (formula "3") (term "0"))
         (rule "all_unused" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "cut_direct" (formula "4") (term "0"))
         (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
            (rule "concrete_or_1" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "lenNonNegative" (formula "2") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
            (rule "lenOfSeqConcat" (formula "2") (term "0"))
            (rule "lenOfSeqConcat" (formula "2") (term "0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "1,1,0,0"))
            (rule "add_literals" (formula "2") (term "1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "lenNonNegative" (formula "3") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
            (rule "leq_literals" (formula "2") (term "0"))
            (rule "concrete_or_1" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "1") (inst "t=i_0"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "20"))
            (rule "qeq_literals" (formula "1") (term "0,0,0"))
            (rule "concrete_and_2" (formula "1") (term "0,0"))
            (rule "concrete_or_2" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "22"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
            (rule "concrete_and_2" (formula "1") (term "0"))
            (rule "concrete_or_2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=arr_2"))
            (rule "simplifySelectOfCreate" (formula "1"))
            (rule "replaceKnownSelect_taclet120_16" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet120_17" (formula "1") (term "2,0"))
            (rule "equalUnique" (formula "1") (term "1,0,0"))
            (rule "concrete_and_4" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
            (rule "eqClose" (formula "26"))
            (rule "closeTrue" (formula "26"))
         )
         (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
            (rule "concrete_or_2" (formula "4"))
            (rule "lenNonNegative" (formula "2") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
            (rule "lenOfSeqConcat" (formula "2") (term "0"))
            (rule "lenOfSeqConcat" (formula "2") (term "0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "lenOfSeqConcat" (formula "2") (term "1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,0"))
            (rule "lenOfSeqSingleton" (formula "2") (term "1,1,0,0"))
            (rule "add_literals" (formula "2") (term "1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "lenNonNegative" (formula "3") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
            (rule "leq_literals" (formula "2") (term "0"))
            (rule "concrete_or_1" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "1") (inst "t=i_0"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "22"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
            (rule "leq_literals" (formula "1") (term "0,1,0"))
            (rule "concrete_and_2" (formula "1") (term "1,0"))
            (rule "concrete_or_4" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "20"))
            (rule "qeq_literals" (formula "1") (term "0,0"))
            (rule "concrete_and_2" (formula "1") (term "0"))
            (rule "concrete_or_2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=arr_2"))
            (rule "simplifySelectOfCreate" (formula "1"))
            (rule "replaceKnownSelect_taclet120_16" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet120_17" (formula "1") (term "2,0"))
            (rule "equalUnique" (formula "1") (term "1,0,0"))
            (rule "concrete_and_4" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
            (rule "eqClose" (formula "26"))
            (rule "closeTrue" (formula "26"))
         )
      )
   )
)
(branch "Exceptional Post (eliminateDuplicates)"
   (rule "expandInInt" (formula "12") (term "0,0,0,0,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "12") (term "0,0,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,0,0,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,0,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,1,0,0,0,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,1,0,0,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "16"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "16"))
   (rule "simplifyUpdate3" (formula "16") (term "1,0"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "andLeft" (formula "12"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "andLeft" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "simplifyUpdate2" (formula "15"))
   (rule "andLeft" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "andLeft" (formula "15"))
   (rule "simplifyUpdate2" (formula "16"))
   (rule "notLeft" (formula "13"))
   (rule "close" (formula "17") (ifseqformula "16"))
)
(branch "Pre (eliminateDuplicates)"
   (rule "expandInInt" (formula "14") (term "1,0,0,0,0,1,0,1,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,0,0,1,0,1,1"))
   (rule "expandInInt" (formula "14") (term "1,0,0,0,0,1,0,1,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,0,0,1,0,1,1"))
   (rule "simplifyUpdate2" (formula "14"))
   (rule "simplifyUpdate2" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14"))
   (rule "applyOnRigidFormula" (formula "14") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1"))
   (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "3"))
   (rule "concrete_and_1" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,0,0"))
   (rule "replace_known_right" (formula "14") (term "0,0,0") (ifseqformula "13"))
   (rule "concrete_not_2" (formula "14") (term "0,0"))
   (rule "concrete_and_1" (formula "14") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1"))
   (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "13"))
   (rule "concrete_or_2" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1"))
   (rule "applyOnPV" (formula "14") (term "1,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1"))
   (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "1"))
   (rule "concrete_and_3" (formula "14"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1"))
   (rule "replace_known_right" (formula "14") (term "0,1,1") (ifseqformula "13"))
   (rule "concrete_not_2" (formula "14") (term "1,1"))
   (rule "concrete_and_3" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "1,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "14") (term "1") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "14"))
   (rule "allRight" (formula "14") (inst "sk=j_0"))
   (rule "allRight" (formula "14") (inst "sk=i_0"))
   (rule "orRight" (formula "14"))
   (rule "orRight" (formula "14"))
   (rule "orRight" (formula "14"))
   (rule "inEqSimp_geqRight" (formula "17"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_geqRight" (formula "17"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "16"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "17"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "allLeft" (formula "11") (inst "t=j_0"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0"))
   (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0"))
   (rule "leq_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "concrete_and_2" (formula "11") (term "0,0,0,0"))
   (rule "concrete_or_2" (formula "11") (term "0,0,0"))
   (rule "allLeft" (formula "11") (inst "t=i_0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
   (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
   (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
   (rule "leq_literals" (formula "11") (term "0,1,0"))
   (rule "concrete_and_2" (formula "11") (term "1,0"))
   (rule "concrete_or_4" (formula "11") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "4"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,1"))
   (rule "leq_literals" (formula "11") (term "0,1"))
   (rule "concrete_and_2" (formula "11") (term "1"))
   (rule "concrete_or_4" (formula "11"))
   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "11"))
   (rule "qeq_literals" (formula "2") (term "0"))
   (rule "concrete_and_2" (formula "2"))
   (rule "closeFalse" (formula "2"))
)
)
}
