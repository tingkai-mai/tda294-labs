\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Oct 18 22:22:10 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:teaching, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:noRestriction, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:allow, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Wed Oct 18 22:22:10 CEST 2023
contract=NumericTextBox[NumericTextBox\\:\\:setRenderer(TextBoxRenderer)].JML normal_behavior operation contract.0
name=NumericTextBox[NumericTextBox\\:\\:setRenderer(TextBoxRenderer)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "jehou" ) (keyVersion "7437bac72e18662a0ab5b6bf241ffc6490526663"))

(autoModeTime "361")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "8") (term "0,0,0,0,1,0,1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "Class_invariant_axiom_for_NumericTextBox" (formula "6") (inst "i=i") (inst "i_0=i_0") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
(rule "times_zero_1" (formula "6") (term "0,0"))
(rule "add_zero_left" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "10") (term "0"))
(rule "nnf_imp2or" (formula "9") (term "0"))
(rule "nnf_notAnd" (formula "10") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "9") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0"))
(rule "commute_or" (formula "10") (term "0,0"))
(rule "cnf_rightDist" (formula "9") (term "0"))
(rule "distr_forallAnd" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "commute_or" (formula "10") (term "0"))
(rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_setRenderer,savedHeapBefore_setRenderer"))
 (builtin "One Step Simplification" (formula "14"))
(rule "assignment_write_attribute_this" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "methodCallEmpty" (formula "14") (term "1"))
(rule "tryEmpty" (formula "14") (term "1"))
(rule "emptyModality" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "eqSymm" (formula "14") (term "1,0,0,1"))
(rule "pullOutSelect" (formula "14") (term "0,0,0") (inst "selectSK=NumericTextBox_textBoxRenderer_0"))
(rule "simplifySelectOfStore" (formula "1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "castDel" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "15") (term "0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "Class_invariant_axiom_for_NumericTextBox" (formula "14") (term "0") (inst "i=i") (inst "i_0=i_0") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "14"))
(rule "dismissNonSelectedField" (formula "14") (term "0,1,1,1,0,0,0"))
(rule "dismissNonSelectedField" (formula "14") (term "0,1,0,1,0"))
(rule "dismissNonSelectedField" (formula "14") (term "0,0,0,0,0,0"))
(rule "replace_known_right" (formula "14") (term "0,0,0,0,0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "14"))
(rule "dismissNonSelectedField" (formula "14") (term "0,1,1,0,0,1,0"))
(rule "dismissNonSelectedField" (formula "14") (term "1,0,1,0,1,0"))
(rule "dismissNonSelectedField" (formula "14") (term "1,0,0,0,1,0"))
(rule "dismissNonSelectedField" (formula "14") (term "1,0,1,0,1,0,0"))
(rule "dismissNonSelectedField" (formula "14") (term "1,1,0,1,0"))
(rule "dismissNonSelectedField" (formula "14") (term "1,0,1,1,0,1,0,0"))
(rule "dismissNonSelectedField" (formula "14") (term "0,1,0,0,0"))
(rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "14"))
(rule "dismissNonSelectedField" (formula "14") (term "1,1,0,1,0,1,0,0"))
(rule "dismissNonSelectedField" (formula "14") (term "1,1,0,0,1,0,0"))
(rule "dismissNonSelectedField" (formula "14") (term "0,1,1,0,1,0,0"))
(rule "dismissNonSelectedField" (formula "14") (term "1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
(rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "14"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
(rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0"))
(rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0"))
(rule "nnf_imp2or" (formula "14") (term "0,1,0"))
(rule "nnf_imp2or" (formula "14") (term "0,0,0"))
(rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
(rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
(rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0"))
(rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
(rule "andRight" (formula "14"))
(branch "Case 1"
   (rule "andRight" (formula "14"))
   (branch "Case 1"
      (rule "allRight" (formula "14") (inst "sk=i_0_0"))
      (rule "orRight" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "inEqSimp_leqRight" (formula "14"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_geqRight" (formula "15"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "10"))
      (rule "polySimp_rightDist" (formula "1") (term "0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "arrayLengthNotNegative" (formula "11") (term "1"))
      (rule "arrayLengthIsAnInt" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "allLeft" (formula "13") (inst "t=i_0_0"))
      (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "13") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0"))
      (rule "leq_literals" (formula "13") (term "0,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "inEqSimp_geqRight" (formula "18"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "1"))
      (rule "leq_literals" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "allLeft" (formula "13") (inst "t=i_0_0"))
      (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,1,0"))
      (rule "leq_literals" (formula "13") (term "0,1,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_contradInEq0" (formula "13") (term "1") (ifseqformula "1"))
      (rule "qeq_literals" (formula "13") (term "0,1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "4"))
      (rule "qeq_literals" (formula "13") (term "0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "closeFalse" (formula "13"))
   )
   (branch "Case 2"
      (rule "allRight" (formula "14") (inst "sk=i_0"))
      (rule "orRight" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "inEqSimp_geqRight" (formula "15"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "15"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
      (rule "times_zero_1" (formula "9") (term "0,0"))
      (rule "add_zero_left" (formula "9") (term "0"))
      (rule "arrayLengthNotNegative" (formula "11") (term "1"))
      (rule "arrayLengthIsAnInt" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "allLeft" (formula "14") (inst "t=i_0"))
      (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_commuteGeq" (formula "14") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "14") (term "1"))
      (rule "polySimp_addComm1" (formula "14") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
      (rule "mul_literals" (formula "14") (term "0,1,1"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
      (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0"))
      (rule "leq_literals" (formula "14") (term "0,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "1"))
      (rule "andLeft" (formula "14"))
      (rule "inEqSimp_homoInEq1" (formula "14"))
      (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
      (rule "add_literals" (formula "14") (term "1,1,0"))
      (rule "times_zero_1" (formula "14") (term "1,0"))
      (rule "add_zero_right" (formula "14") (term "0"))
      (rule "leq_literals" (formula "14"))
      (rule "closeFalse" (formula "14"))
   )
)
(branch "Case 2"
   (rule "allRight" (formula "14") (inst "sk=f_0"))
   (rule "allRight" (formula "14") (inst "sk=o_0"))
   (rule "orRight" (formula "14"))
   (rule "orRight" (formula "14"))
   (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=f_0_0"))
   (rule "simplifySelectOfStore" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "eqSymm" (formula "17"))
   (rule "eqSymm" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1") (term "1,0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
   (rule "closeFalse" (formula "1"))
)
)
}
