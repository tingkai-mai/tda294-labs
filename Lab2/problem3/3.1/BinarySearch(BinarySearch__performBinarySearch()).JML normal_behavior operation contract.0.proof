\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Oct 22 23:24:38 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:teaching, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:noRestriction, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:allow, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Sun Oct 22 23:24:38 CEST 2023
contract=BinarySearch[BinarySearch\\:\\:performBinarySearch()].JML normal_behavior operation contract.0
name=BinarySearch[BinarySearch\\:\\:performBinarySearch()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "maitingkai" ) (keyVersion "7437bac72e18662a0ab5b6bf241ffc6490526663"))

(autoModeTime "2426")

(branch "dummy ID"
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1") (newnames "heapAtPre,o,f"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "expandInInt" (formula "1") (term "1,0,0,0,1,1,1,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,1,1,1,0"))
(rule "expandInInt" (formula "1") (term "1,0,0,0,0,1,1,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,1,1,0"))
(rule "expandInInt" (formula "1") (term "1,0,0,0,0,1,1,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,1,1,0"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "exLeft" (formula "6") (inst "sk=q_0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "assignment" (formula "12"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0,0"))
(rule "all_unused" (formula "12") (term "0,1,0,1"))
(rule "all_unused" (formula "12") (term "1,0,1"))
(rule "concrete_and_3" (formula "12") (term "0,1"))
(rule "nnf_imp2or" (formula "5") (term "0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
(rule "Class_invariant_axiom_for_BinarySearch" (formula "9") (ifseqformula "3"))
(rule "true_left" (formula "9"))
(rule "commute_or_2" (formula "5") (term "0,0,0"))
(rule "commute_or" (formula "5") (term "0,0,0,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_performBinarySearch,savedHeapBefore_performBinarySearch"))
(rule "simplifyUpdate2" (formula "11") (term "1"))
(rule "methodCallUnfoldArguments" (formula "11") (term "1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "var"))
(rule "stringAssignment" (formula "11") (term "1"))
(rule "simplifyUpdate2" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "notLeft" (formula "1"))
(rule "sequentialToParallel2" (formula "13"))
(rule "simplifyUpdate3" (formula "13") (term "1,0"))
(rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "2"))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "13"))
(rule "concrete_or_2" (formula "1"))
(rule "methodCallWithinClass" (formula "14") (term "1") (userinteraction))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "message"))
(rule "assignment" (formula "14") (term "1"))
(rule "sequentialToParallel2" (formula "14"))
(rule "simplifyUpdate2" (formula "14"))
(rule "simplifyUpdate3" (formula "14") (term "1,0"))
(rule "applyOnElementary" (formula "14") (term "1,0"))
(rule "applyOnPV" (formula "14") (term "0,1,0"))
(rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_report,savedHeapBefore_report"))
(rule "simplifyUpdate2" (formula "14"))
(rule "simplifyUpdate2" (formula "14") (term "1"))
(rule "methodCallEmptyReturn" (formula "14") (term "1"))
(rule "blockEmpty" (formula "14") (term "1"))
(rule "methodCallUnfoldArguments" (formula "14") (term "1"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "var_1"))
(rule "assignment_read_attribute_this" (formula "14") (term "1"))
(rule "sequentialToParallel2" (formula "14"))
(rule "simplifyUpdate3" (formula "14") (term "1,0"))
 (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_eliminateDuplicates,exc_0,heapAfter_eliminateDuplicates,anon_heap_eliminateDuplicates") (contract "BinarySearch[BinarySearch::eliminateDuplicates([I)].JML exceptional_behavior operation contract.0#BinarySearch[BinarySearch::eliminateDuplicates([I)].JML normal_behavior operation contract.0") (modality "diamond") (userinteraction))
(branch "Post (eliminateDuplicates)"
   (rule "instanceof_static_type" (formula "12") (term "0,0,1,0,1,1,0,1,1,1,1,1"))
   (rule "boolean_equal" (formula "12") (term "0,1,0,1,1,0,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "12") (term "1,0,1,1,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "0,0,0,0,1,1,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "12") (term "0,0,0,1,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,0,0,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,0,0,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,0,0,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,0,0,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,0,0,1,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,1,0,0,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,0,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,1,0,0,0,1,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "16"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "16"))
   (rule "simplifyUpdate3" (formula "16") (term "1,0"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "andLeft" (formula "12"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "andLeft" (formula "13"))
   (rule "typeEqDerived" (formula "14") (term "0,1,1,1,0,1") (ifseqformula "13"))
   (rule "typeEqDerived" (formula "14") (term "0,0,0,0,1,1,0,1") (ifseqformula "13"))
   (rule "boolean_equal" (formula "14") (term "1,1,1,0,1"))
   (rule "boolean_equal" (formula "14") (term "0,0,0,1,1,0,1"))
   (rule "concrete_and_3" (formula "14") (term "1,1,0,1"))
   (rule "concrete_impl_1" (formula "14") (term "0,1,1,0,1"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "applyOnRigidFormula" (formula "12"))
   (rule "simplifyUpdate1" (formula "12") (term "1"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "14"))
   (rule "simplifyUpdate2" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "1,1"))
   (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
   (rule "concrete_and_3" (formula "15") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0"))
   (rule "simplifyUpdate2" (formula "15") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1"))
   (rule "replace_known_left" (formula "14") (term "0,0,1") (ifseqformula "13"))
   (rule "concrete_not_1" (formula "14") (term "0,1"))
   (rule "concrete_and_2" (formula "14") (term "1"))
   (rule "concrete_impl_3" (formula "14"))
   (rule "notLeft" (formula "14"))
   (rule "applyOnRigidTerm" (formula "12") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "0"))
   (rule "applyOnRigidTerm" (formula "12") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,1,1,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1,1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,0,0"))
   (rule "replace_known_right" (formula "14") (term "0,0,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "14") (term "0,0"))
   (rule "concrete_and_1" (formula "14") (term "0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "1,1"))
   (rule "simplifyUpdate2" (formula "15") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0"))
   (rule "applyOnRigidTerm" (formula "12") (term "1,1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
   (rule "applyOnPV" (formula "15") (term "0,0,1"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,1,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,0,0,1,0"))
   (rule "simplifyUpdate2" (formula "12") (term "0,1,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1,0"))
   (rule "replace_known_right" (formula "14") (term "0,1,1,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "14") (term "1,1,0"))
   (rule "concrete_and_3" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
   (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
   (rule "replace_known_right" (formula "15") (term "0,1,1") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "15") (term "1,1"))
   (rule "concrete_and_3" (formula "15") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0"))
   (rule "replace_known_right" (formula "15") (term "0,1,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "15") (term "1,0"))
   (rule "concrete_and_3" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,1,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0,1,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "12") (term "0,0,1,1,0"))
   (rule "concrete_and_1" (formula "12") (term "0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,1,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,1,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "0,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,0,1,1,0"))
   (rule "simplifyUpdate2" (formula "12") (term "0,1,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,0,0,0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,0,0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,1,0,0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,1,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0,0,0,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,1,0,0,0,1,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "12") (term "1,0,0,0,1,0"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,1,1,0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,1,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,1,0,0,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,1,1,0,0,1,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "12") (term "1,1,0,0,1,0"))
   (rule "concrete_and_3" (formula "12") (term "1,0,0,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,0,1,0") (ifseqformula "15"))
   (rule "ifthenelse_false" (formula "12") (term "0,1,0"))
   (rule "intersectWithAllLocs" (formula "12") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0,1,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0,1,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "1,1,1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,1,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,1,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,1,0,0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "1,1,1,0,0,0,1,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,0,0,1,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,0,1,0"))
   (rule "simplifyUpdate2" (formula "12") (term "0,0,0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,1,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,1,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,1,1,0,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,1,1,0,1,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "12") (term "1,1,0,1,0"))
   (rule "concrete_and_3" (formula "12") (term "1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,0,1,1"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0,0,1,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,1,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,1,0,0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,0,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,1,1"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0,0,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "1,1,0,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,1,1,0,0,0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "1,1,1,0,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,1,1,0,0,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,0,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,0,1,0,0,0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "1,0,1,0,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0,1,0"))
   (rule "blockEmpty" (formula "19") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,0,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,0,0,0,0,1,0"))
   (rule "pullOutSelect" (formula "14") (term "1,1,0,0,0,0,0,1") (inst "selectSK=BinarySearch_size_0"))
   (rule "applyEq" (formula "15") (term "1,1,0,0,0,0,1,1") (ifseqformula "14"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "12"))
   (rule "elementOfFreshLocs" (formula "14") (term "1,0,0"))
   (rule "equalUnique" (formula "14") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "14") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "14") (term "0,0,0"))
   (rule "replace_known_right" (formula "14") (term "0,0,1,0,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "14") (term "0,1,0,0"))
   (rule "concrete_and_1" (formula "14") (term "1,0,0"))
   (rule "replace_known_left" (formula "14") (term "0,1,0,0") (ifseqformula "4"))
   (rule "concrete_not_1" (formula "14") (term "1,0,0"))
   (rule "concrete_or_4" (formula "14") (term "0,0"))
   (rule "nnf_imp2or" (formula "15") (term "0,0,0,0"))
   (rule "nnf_imp2or" (formula "15") (term "0,0,0,1,1"))
   (rule "nnf_imp2or" (formula "12") (term "0,0,0,0,1,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0,1,1"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "14") (term "0,0,0,0,2,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0,0,1,0"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0,0,1,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,0,1,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0,0,1,1"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,0,1,1"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,0,0,1,1"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0,1,1"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,0,2,0,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,0,0,2,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,0,2,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,0,0,2,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0,0,2,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0,0,2,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,0,0,2,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0,0,2,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0,0,2,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,1,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0,1,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0,1,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0,1,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0,1,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,1,0"))
   (rule "commute_and" (formula "16"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,0,0,2,0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0,0,0,2,0,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,0,0,0,2,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,0,0,0,2,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0,0,0,2,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0,0,2,0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0,0,0,0,2,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0,0,0,2,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,0,0,0,2,0,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0,0,0,2,0,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0,0,0,2,0,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0,0,0,2,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0,0,0,2,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0,0,2,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0,0,2,0,0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "15") (term "1,1,1") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "15") (term "1,1"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "15") (term "1,0") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "15") (term "0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "14") (term "1,0,2,0,0") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "14") (term "0,2,0,0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "12") (term "1,0,1,0") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "12") (term "0,1,0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "16") (term "0") (ifseqformula "5"))
   (rule "concrete_and_1" (formula "16"))
   (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "15") (term "0,0,0,1,1"))
   (rule "methodCallUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_2"))
   (rule "commute_or_2" (formula "12") (term "0,0,0,0,1,0"))
   (rule "commute_or_2" (formula "14") (term "0,0,0,0,2,0,0"))
   (rule "compound_addition_2" (formula "20") (term "1") (inst "#v1=i") (inst "#v0=s"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "s"))
   (rule "stringAssignment" (formula "20") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "sequentialToParallel2" (formula "22"))
   (rule "simplifyUpdate3" (formula "22") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "2,0"))
   (rule "applyOnPV" (formula "1") (term "0,0"))
   (rule "variableDeclarationAssign" (formula "22") (term "1"))
   (rule "variableDeclaration" (formula "22") (term "1") (newnames "i"))
   (rule "assignment_read_attribute_this" (formula "22") (term "1"))
   (rule "sequentialToParallel2" (formula "22"))
   (rule "simplifyUpdate3" (formula "22") (term "1,0"))
   (rule "applyOnElementary" (formula "22") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "22") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
   (rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=BinarySearch_query_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
   (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "21"))
   (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
   (rule "concrete_and_1" (formula "1") (term "1,0,0"))
   (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "6"))
   (rule "concrete_not_1" (formula "1") (term "1,0,0"))
   (rule "concrete_or_4" (formula "1") (term "0,0"))
   (rule "stringConcatIntExpRight" (formula "23") (term "1") (inst "sk=sk_0"))
   (rule "simplifyUpdate2" (formula "25"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "simplifyUpdate2" (formula "24"))
   (rule "sequentialToParallel2" (formula "25") (term "1"))
   (rule "simplifyUpdate3" (formula "25") (term "1,0,1"))
   (rule "sequentialToParallel2" (formula "25"))
   (rule "simplifyUpdate2" (formula "25"))
   (rule "simplifyUpdate3" (formula "25") (term "1,0"))
   (rule "applyOnParallel" (formula "25") (term "1,0"))
   (rule "simplifyUpdate3" (formula "25") (term "0,1,0"))
   (rule "applyOnElementary" (formula "25") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "0"))
   (rule "eqSymm" (formula "1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
   (rule "applyOnPV" (formula "1") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
   (rule "applyOnPV" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1"))
   (rule "poolKeyIsContentOfValue" (formula "1") (term "0,1"))
   (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "16"))
   (rule "elementOfFreshLocs" (formula "3") (term "1,0,0"))
   (rule "eqClose" (formula "3") (term "0,1,0,0,0"))
   (rule "concrete_not_1" (formula "3") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "3") (term "0,0,0"))
   (rule "concrete_or_2" (formula "3") (term "0,0"))
   (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "20"))
   (rule "concrete_not_2" (formula "3") (term "0,0,0"))
   (rule "concrete_and_1" (formula "3") (term "0,0"))
   (rule "ifthenelse_negated" (formula "3") (term "0"))
   (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
   (rule "ifEqualsTRUE" (formula "3"))
   (rule "eq_and" (formula "3") (term "0"))
   (rule "hideAuxiliaryEqConcrete" (formula "4"))
   (rule "cnf_rightDist" (formula "3"))
   (rule "neq_or" (formula "3") (term "0"))
   (rule "concrete_and_1" (formula "3"))
   (rule "commute_or" (formula "3"))
   (rule "arrayLengthIsAnInt" (formula "20") (term "0"))
   (rule "expandInInt" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "arrayLengthNotNegative" (formula "20") (term "0"))
   (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "21"))
   (rule "add_zero_right" (formula "1") (term "1"))
   (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "1"))
   (rule "mul_literals" (formula "21") (term "1,0,0"))
   (rule "add_zero_right" (formula "21") (term "0,0"))
   (rule "leq_literals" (formula "21") (term "0"))
   (rule "concrete_and_2" (formula "21"))
   (rule "false_right" (formula "21"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "2") (inst "iv=iv"))
   (rule "andLeft" (formula "2"))
   (rule "lenOfSeqConcat" (formula "2") (term "1"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "1,1,0,1"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,1,0,1"))
   (rule "add_literals" (formula "2") (term "1,0,1"))
   (rule "add_literals" (formula "2") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
   (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
   (rule "lenOfSeqConcat" (formula "2") (term "0"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "1,1,0"))
   (rule "times_zero_1" (formula "2") (term "1,0"))
   (rule "add_zero_right" (formula "2") (term "0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "1,0,1,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,0"))
   (rule "add_literals" (formula "2") (term "0"))
   (rule "eqClose" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,1,0,0") (ifseqformula "3"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "lenOfSeqSingleton" (formula "2") (term "1,0,1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
   (rule "applyEqRigid" (formula "2") (term "0,0,1,0") (ifseqformula "3"))
   (rule "eqClose" (formula "2") (term "1,0"))
   (rule "concrete_impl_4" (formula "2") (term "0"))
   (rule "all_unused" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "methodCallWithinClass" (formula "25") (term "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "25") (term "1"))
   (rule "variableDeclaration" (formula "25") (term "1") (newnames "message_1"))
   (rule "assignment" (formula "25") (term "1"))
   (rule "sequentialToParallel2" (formula "25"))
   (rule "simplifyUpdate2" (formula "25"))
   (rule "simplifyUpdate3" (formula "25") (term "1,0"))
   (rule "applyOnElementary" (formula "25") (term "1,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0"))
   (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_report_0,savedHeapBefore_report_0"))
   (rule "simplifyUpdate2" (formula "25"))
   (rule "simplifyUpdate2" (formula "25") (term "1"))
   (rule "methodCallEmptyReturn" (formula "25") (term "1"))
   (rule "blockEmpty" (formula "25") (term "1"))
   (rule "variableDeclarationAssign" (formula "25") (term "1"))
   (rule "variableDeclaration" (formula "25") (term "1") (newnames "searchResult"))
    (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_search,result_search,exc_1,heapAfter_search,anon_heap_search") (contract "BinarySearch[BinarySearch::search()].JML normal_behavior operation contract.0") (modality "diamond") (userinteraction))
   (branch "Post (search)"
      (rule "expandInInt" (formula "21") (term "1,0,1,1,1,1"))
      (rule "concrete_and_3" (formula "21") (term "0,1,1,1,1"))
      (rule "simplifyUpdate2" (formula "21"))
      (rule "simplifyUpdate2" (formula "21") (term "1"))
      (rule "andLeft" (formula "21"))
      (rule "sequentialToParallel2" (formula "28"))
      (rule "simplifyUpdate2" (formula "28"))
      (rule "simplifyUpdate3" (formula "28") (term "1,0"))
      (rule "sequentialToParallel2" (formula "22"))
      (rule "simplifyUpdate2" (formula "22"))
      (rule "simplifyUpdate3" (formula "22") (term "0"))
      (rule "andLeft" (formula "22"))
      (rule "simplifyUpdate2" (formula "22"))
      (rule "andLeft" (formula "23"))
      (rule "simplifyUpdate2" (formula "24"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "simplifyUpdate2" (formula "23"))
      (rule "notLeft" (formula "23"))
      (rule "applyOnRigidFormula" (formula "21"))
      (rule "simplifyUpdate1" (formula "21") (term "1"))
      (rule "applyOnRigidFormula" (formula "24"))
      (rule "applyOnPV" (formula "24") (term "0"))
      (rule "simplifyUpdate1" (formula "24") (term "1"))
      (rule "applyOnRigidFormula" (formula "23"))
      (rule "applyOnRigidTerm" (formula "21") (term "0"))
      (rule "simplifyUpdate1" (formula "21") (term "1,0"))
      (rule "applyOnPV" (formula "21") (term "0,0"))
      (rule "simplifyUpdate1" (formula "21") (term "2,0"))
      (rule "applyOnRigidTerm" (formula "23") (term "0"))
      (rule "applyOnPV" (formula "23") (term "0,0"))
      (rule "simplifyUpdate1" (formula "23") (term "2,0"))
      (rule "applyOnRigidTerm" (formula "23") (term "1"))
      (rule "simplifyUpdate1" (formula "23") (term "2,1"))
      (rule "simplifyUpdate1" (formula "23") (term "1,1"))
      (rule "applyOnPV" (formula "23") (term "0,1"))
      (rule "applyOnRigidTerm" (formula "23") (term "1,0"))
      (rule "simplifyUpdate1" (formula "23") (term "2,1,0"))
      (rule "simplifyUpdate1" (formula "23") (term "1,1,0"))
      (rule "applyOnPV" (formula "23") (term "0,1,0"))
      (rule "assignment" (formula "31") (term "1"))
      (rule "sequentialToParallel2" (formula "31"))
      (rule "simplifyUpdate3" (formula "31") (term "1,0"))
      (rule "pullOutSelect" (formula "23") (term "1") (inst "selectSK=BinarySearch_query_1"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "21"))
      (rule "elementOfFreshLocs" (formula "24") (term "1,0,0"))
      (rule "elementOfEmpty" (formula "24") (term "0,0,0,0"))
      (rule "concrete_and_2" (formula "24") (term "0,0,0"))
      (rule "concrete_or_2" (formula "24") (term "0,0"))
      (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "21"))
      (rule "elementOfFreshLocs" (formula "23") (term "1,0,0"))
      (rule "elementOfEmpty" (formula "23") (term "0,0,0,0"))
      (rule "concrete_and_2" (formula "23") (term "0,0,0"))
      (rule "concrete_or_2" (formula "23") (term "0,0"))
      (rule "replace_known_right" (formula "23") (term "0,0,0,0") (ifseqformula "29"))
      (rule "concrete_not_2" (formula "23") (term "0,0,0"))
      (rule "concrete_and_1" (formula "23") (term "0,0"))
      (rule "ifthenelse_negated" (formula "23") (term "0"))
      (rule "pullOutSelect" (formula "24") (term "1,2,0") (inst "selectSK=BinarySearch_numbers_0"))
      (rule "applyEq" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "24"))
      (rule "applyEq" (formula "25") (term "0,0,0,0,0") (ifseqformula "24"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "21"))
      (rule "elementOfFreshLocs" (formula "24") (term "1,0,0"))
      (rule "elementOfEmpty" (formula "24") (term "0,0,0,0"))
      (rule "concrete_and_2" (formula "24") (term "0,0,0"))
      (rule "concrete_or_2" (formula "24") (term "0,0"))
      (rule "replace_known_right" (formula "24") (term "0,0,0,0") (ifseqformula "30"))
      (rule "concrete_not_2" (formula "24") (term "0,0,0"))
      (rule "concrete_and_1" (formula "24") (term "0,0"))
      (rule "ifthenelse_negated" (formula "24") (term "0"))
      (rule "pullOutSelect" (formula "23") (term "0,0,0") (inst "selectSK=java_lang_Object_created__1"))
      (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "23"))
      (rule "simplifySelectOfCreate" (formula "23"))
      (rule "eqClose" (formula "23") (term "1,0,0"))
      (rule "concrete_and_3" (formula "23") (term "0,0"))
      (rule "castDel" (formula "23") (term "1,0"))
      (rule "eqSymm" (formula "23") (term "0,0,0"))
      (rule "replace_known_right" (formula "23") (term "0,1,0,0") (ifseqformula "33"))
      (rule "concrete_not_2" (formula "23") (term "1,0,0"))
      (rule "concrete_and_3" (formula "23") (term "0,0"))
      (rule "sortsDisjointModuloNull" (formula "23") (term "0,0"))
      (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "31"))
      (rule "concrete_and_2" (formula "23") (term "0,0"))
      (rule "ifthenelse_false" (formula "23") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "16"))
      (rule "elementOfFreshLocs" (formula "23") (term "1,0,0"))
      (rule "eqClose" (formula "23") (term "0,1,0,0,0"))
      (rule "concrete_not_1" (formula "23") (term "1,0,0,0"))
      (rule "concrete_and_4" (formula "23") (term "0,0,0"))
      (rule "concrete_or_2" (formula "23") (term "0,0"))
      (rule "replace_known_right" (formula "23") (term "0,0,0,0") (ifseqformula "31"))
      (rule "concrete_not_2" (formula "23") (term "0,0,0"))
      (rule "concrete_and_1" (formula "23") (term "0,0"))
      (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "8"))
      (rule "concrete_not_1" (formula "23") (term "0,0"))
      (rule "ifthenelse_false" (formula "23") (term "0"))
      (rule "applyEqReverse" (formula "24") (term "0,0,0") (ifseqformula "23"))
      (rule "applyEqReverse" (formula "25") (term "0,0,0") (ifseqformula "23"))
      (rule "hideAuxiliaryEq" (formula "23"))
      (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "8"))
      (rule "ifthenelse_true" (formula "24") (term "0"))
      (rule "simplifySelectOfCreate" (formula "24"))
      (rule "equalUnique" (formula "24") (term "1,0,0"))
      (rule "concrete_and_4" (formula "24") (term "0,0"))
      (rule "ifthenelse_false" (formula "24") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "16"))
      (rule "elementOfFreshLocs" (formula "24") (term "1,0,0"))
      (rule "equalUnique" (formula "24") (term "0,1,0,0,0"))
      (rule "concrete_not_2" (formula "24") (term "1,0,0,0"))
      (rule "concrete_and_3" (formula "24") (term "0,0,0"))
      (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "8"))
      (rule "ifthenelse_true" (formula "23") (term "0"))
      (rule "simplifySelectOfCreate" (formula "23"))
      (rule "replaceKnownSelect_taclet0_1" (formula "23") (term "2,0"))
      (rule "equalUnique" (formula "23") (term "1,0,0"))
      (rule "concrete_and_4" (formula "23") (term "0,0"))
      (rule "ifthenelse_false" (formula "23") (term "0"))
      (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "23"))
      (rule "hideAuxiliaryEq" (formula "23"))
      (rule "replace_known_left" (formula "23") (term "0,1,1,0,0") (ifseqformula "8"))
      (rule "concrete_not_1" (formula "23") (term "1,1,0,0"))
      (rule "concrete_and_4" (formula "23") (term "1,0,0"))
      (rule "concrete_or_4" (formula "23") (term "0,0"))
      (rule "pullOutSelect" (formula "24") (term "2,0") (inst "selectSK=arr_0"))
      (rule "simplifySelectOfCreate" (formula "24"))
      (rule "equalUnique" (formula "24") (term "1,0,0"))
      (rule "concrete_and_4" (formula "24") (term "0,0"))
      (rule "ifthenelse_false" (formula "24") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "16"))
      (rule "elementOfFreshLocs" (formula "24") (term "1,0,0"))
      (rule "equalUnique" (formula "24") (term "0,1,0,0,0"))
      (rule "concrete_not_2" (formula "24") (term "1,0,0,0"))
      (rule "concrete_and_3" (formula "24") (term "0,0,0"))
      (rule "pullOutSelect" (formula "25") (term "0,0,1,0,0") (inst "selectSK=java_lang_Object_created__2"))
      (rule "simplifySelectOfCreate" (formula "25"))
      (rule "equalUnique" (formula "25") (term "1,0,0"))
      (rule "concrete_and_3" (formula "25") (term "0,0"))
      (rule "castDel" (formula "25") (term "1,0"))
      (rule "replace_known_right" (formula "25") (term "0,1,0,0") (ifseqformula "33"))
      (rule "concrete_not_2" (formula "25") (term "1,0,0"))
      (rule "concrete_and_3" (formula "25") (term "0,0"))
      (rule "sortsDisjointModuloNull" (formula "25") (term "0,0"))
      (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "33"))
      (rule "concrete_and_2" (formula "25") (term "0,0"))
      (rule "ifthenelse_false" (formula "25") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "16"))
      (rule "elementOfFreshLocs" (formula "25") (term "1,0,0"))
      (rule "eqClose" (formula "25") (term "0,1,0,0,0"))
      (rule "concrete_not_1" (formula "25") (term "1,0,0,0"))
      (rule "concrete_and_4" (formula "25") (term "0,0,0"))
      (rule "concrete_or_2" (formula "25") (term "0,0"))
      (rule "Class_invariant_axiom_for_BinarySearch" (formula "27") (ifseqformula "9"))
      (rule "true_left" (formula "27"))
      (rule "methodCallReturn" (formula "33") (term "1"))
      (rule "assignment" (formula "33") (term "1"))
      (rule "sequentialToParallel2" (formula "33"))
      (rule "simplifyUpdate2" (formula "33"))
      (rule "simplifyUpdate3" (formula "33") (term "1,0"))
      (rule "applyOnElementary" (formula "33") (term "1,0"))
      (rule "applyOnPV" (formula "33") (term "0,1,0"))
      (rule "commute_and" (formula "26") (term "0,0"))
      (rule "cnf_rightDist" (formula "24") (term "0,0"))
      (rule "commute_or" (formula "24") (term "0,0,0"))
      (rule "methodCallEmpty" (formula "33") (term "1"))
      (rule "tryEmpty" (formula "33") (term "1"))
      (rule "emptyModality" (formula "33") (term "1"))
      (rule "applyOnRigidFormula" (formula "33"))
      (rule "simplifyUpdate2" (formula "33") (term "1"))
      (rule "simplifyUpdate2" (formula "33") (term "0"))
      (rule "applyOnRigidFormula" (formula "33") (term "1"))
      (rule "simplifyUpdate1" (formula "33") (term "1,1"))
      (rule "applyOnPV" (formula "33") (term "0,1"))
      (rule "eqClose" (formula "33") (term "1"))
      (rule "concrete_and_3" (formula "33"))
      (rule "applyOnRigidFormula" (formula "33"))
      (rule "simplifyUpdate2" (formula "33") (term "1"))
      (rule "applyOnRigidFormula" (formula "33") (term "0"))
      (rule "simplifyUpdate2" (formula "33") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "33") (term "1"))
      (rule "simplifyUpdate1" (formula "33") (term "1,1"))
      (rule "applyOnPV" (formula "33") (term "0,1"))
      (rule "applyOnRigidFormula" (formula "33") (term "1,0"))
      (rule "simplifyUpdate1" (formula "33") (term "1,1,0"))
      (rule "applyOnRigidFormula" (formula "33") (term "0,0"))
      (rule "applyOnRigidTerm" (formula "33") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "33") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "33") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "33") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "33") (term "0,0,1,0"))
      (rule "applyOnRigidTerm" (formula "33") (term "1,1,0"))
      (rule "simplifyUpdate1" (formula "33") (term "1,1,1,0"))
      (rule "applyOnPV" (formula "33") (term "0,1,1,0"))
      (rule "simplifyUpdate1" (formula "33") (term "2,1,1,0"))
      (rule "replaceKnownSelect_taclet00_5" (formula "33") (term "1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_13" (formula "33") (term "1,1,0"))
      (rule "applyOnRigidFormula" (formula "33") (term "0,0,0"))
      (rule "simplifyUpdate1" (formula "33") (term "1,0,0,0"))
      (rule "applyOnPV" (formula "33") (term "0,0,0,0"))
      (rule "replace_known_right" (formula "33") (term "0,0,0") (ifseqformula "27"))
      (rule "concrete_not_2" (formula "33") (term "0,0"))
      (rule "concrete_and_1" (formula "33") (term "0"))
      (rule "applyOnRigidTerm" (formula "33") (term "1,0,0"))
      (rule "simplifyUpdate1" (formula "33") (term "2,1,0,0"))
      (rule "simplifyUpdate1" (formula "33") (term "1,1,0,0"))
      (rule "applyOnPV" (formula "33") (term "0,1,0,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "33") (term "1,0,0"))
      (rule "applyOnRigidTerm" (formula "33") (term "2,0,0"))
      (rule "applyOnPV" (formula "33") (term "0,2,0,0"))
      (rule "pullOutSelect" (formula "33") (term "0,0") (inst "selectSK=arr_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
      (rule "replaceKnownSelect_taclet00_14" (formula "1") (term "2,0"))
      (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
      (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
      (rule "concrete_and_2" (formula "1") (term "0,0,0"))
      (rule "concrete_or_2" (formula "1") (term "0,0"))
      (rule "replaceKnownSelect_taclet00_16" (formula "1") (term "0,0,1,0,0"))
      (rule "Class_invariant_axiom_for_BinarySearch" (formula "34") (term "1") (ifseqformula "10"))
      (rule "concrete_and_3" (formula "34"))
      (rule "impLeft" (formula "20"))
      (branch "Case 1"
         (rule "allRight" (formula "27") (inst "sk=j_0"))
         (rule "allRight" (formula "27") (inst "sk=i_0"))
         (rule "orRight" (formula "27"))
         (rule "orRight" (formula "27"))
         (rule "orRight" (formula "27"))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_leqRight" (formula "30"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_leqRight" (formula "29"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "30"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "mul_literals" (formula "4") (term "0,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "commute_and" (formula "5") (term "0,0"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "30"))
         (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "5"))
         (rule "eqClose" (formula "37"))
         (rule "closeTrue" (formula "37"))
      )
      (branch "Case 2"
         (rule "andLeft" (formula "20"))
         (rule "commute_and" (formula "1") (term "0,0"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "28"))
         (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
         (rule "eqClose" (formula "35"))
         (rule "closeTrue" (formula "35"))
      )
   )
   (branch "Exceptional Post (search)"
      (rule "simplifyUpdate2" (formula "21"))
      (rule "simplifyUpdate2" (formula "21") (term "1"))
      (rule "andLeft" (formula "21"))
      (rule "sequentialToParallel2" (formula "28"))
      (rule "simplifyUpdate2" (formula "28"))
      (rule "simplifyUpdate3" (formula "28") (term "1,0"))
      (rule "sequentialToParallel2" (formula "22"))
      (rule "simplifyUpdate2" (formula "22"))
      (rule "simplifyUpdate3" (formula "22") (term "0"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "simplifyUpdate2" (formula "22"))
      (rule "andLeft" (formula "24"))
      (rule "simplifyUpdate2" (formula "25"))
      (rule "notLeft" (formula "22"))
      (rule "close" (formula "25") (ifseqformula "24"))
   )
   (branch "Pre (search)"
      (rule "expandInInt" (formula "25") (term "1,0,0,0,1,1,0,1,1"))
      (rule "concrete_and_3" (formula "25") (term "0,0,0,1,1,0,1,1"))
      (rule "expandInInt" (formula "25") (term "1,0,0,0,0,1,0,1,1"))
      (rule "concrete_and_3" (formula "25") (term "0,0,0,0,1,0,1,1"))
      (rule "expandInInt" (formula "25") (term "1,0,0,0,0,1,0,1,1"))
      (rule "concrete_and_3" (formula "25") (term "0,0,0,0,1,0,1,1"))
      (rule "simplifyUpdate2" (formula "25"))
      (rule "simplifyUpdate2" (formula "25") (term "1"))
      (rule "applyOnRigidFormula" (formula "25"))
      (rule "applyOnRigidFormula" (formula "25") (term "1"))
      (rule "applyOnPV" (formula "25") (term "0,1"))
      (rule "wellFormedCreate" (formula "25") (term "1"))
      (rule "wellFormedAnonEQ" (formula "25") (term "1") (ifseqformula "16"))
      (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "15"))
      (rule "concrete_and_3" (formula "25") (term "1"))
      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "7"))
      (rule "concrete_and_3" (formula "25"))
      (rule "applyOnRigidFormula" (formula "25"))
      (rule "applyOnRigidFormula" (formula "25") (term "0"))
      (rule "applyOnRigidFormula" (formula "25") (term "1"))
      (rule "applyOnRigidFormula" (formula "25") (term "0,0"))
      (rule "simplifyUpdate1" (formula "25") (term "1,0,0"))
      (rule "applyOnRigidFormula" (formula "25") (term "0,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "1,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "0,0,0"))
      (rule "simplifyUpdate1" (formula "25") (term "1,0,0,0"))
      (rule "applyOnPV" (formula "25") (term "0,0,0,0"))
      (rule "simplifyUpdate1" (formula "25") (term "2,0,0,0"))
      (rule "applyOnRigidFormula" (formula "25") (term "0,0,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "1,1,1"))
      (rule "simplifyUpdate1" (formula "25") (term "1,1,1,1"))
      (rule "applyOnPV" (formula "25") (term "0,1,1,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "0,1,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,1"))
      (rule "simplifyUpdate2" (formula "25") (term "0,0,0,0,0,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,1,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,1,1"))
      (rule "simplifyUpdate2" (formula "25") (term "0,0,0,0,1,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "25") (term "0,1,0,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,1"))
      (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "0,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0,0,0,1"))
      (rule "applyOnPV" (formula "25") (term "0,0,1,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "0,1,0,0,1,1"))
      (rule "applyOnPV" (formula "25") (term "0,0,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0,0,1,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,1,1"))
      (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,1,1"))
      (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "25") (term "0,1,0,0,0,1,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,0,1"))
      (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "1,1,1,0,0,0,1"))
      (rule "applyOnPV" (formula "25") (term "0,1,1,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "25") (term "2,1,1,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "25") (term "1,1,1,1,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,0,0,0,1"))
      (rule "applyOnPV" (formula "25") (term "0,1,0,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,0,0,0,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,0,0,1,1"))
      (rule "applyOnPV" (formula "25") (term "0,1,0,1,0,0,1,1"))
      (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,0,1,1"))
      (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,0,1,1"))
      (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,1"))
      (rule "pullOutSelect" (formula "25") (term "0,0,0") (inst "selectSK=BinarySearch_numbers_0"))
      (rule "applyEq" (formula "26") (term "1,0,1,0,0,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "1,0,1,0,0,1,1") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "1,1,1,1,0,0,0,1") (ifseqformula "1"))
      (rule "simplifySelectOfCreate" (formula "1"))
      (rule "equalUnique" (formula "1") (term "1,0,0"))
      (rule "concrete_and_4" (formula "1") (term "0,0"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
      (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0,0"))
      (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "9"))
      (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
      (rule "concrete_and_4" (formula "1") (term "1,0,0"))
      (rule "concrete_or_4" (formula "1") (term "0,0"))
      (rule "pullOutSelect" (formula "26") (term "1,1,0,0,1,1") (inst "selectSK=BinarySearch_query_1"))
      (rule "simplifySelectOfCreate" (formula "1"))
      (rule "replaceKnownSelect_taclet0_1" (formula "1") (term "2,0"))
      (rule "equalUnique" (formula "1") (term "1,0,0"))
      (rule "concrete_and_4" (formula "1") (term "0,0"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "27") (term "1,1,0,0,1,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "26") (term "1,1,0,0,0,0,1") (inst "selectSK=BinarySearch_size_1"))
      (rule "applyEq" (formula "27") (term "1,1,0,0,0,1,1") (ifseqformula "1"))
      (rule "simplifySelectOfCreate" (formula "1"))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
      (rule "equalUnique" (formula "1") (term "1,0,0"))
      (rule "concrete_and_4" (formula "1") (term "0,0"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "27") (term "1,1,0,0,0,1,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "27") (term "1,1,0,0,0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "nnf_imp2or" (formula "26") (term "0,0,0,1"))
      (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,0,1"))
      (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,0,1"))
      (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,1"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0,1"))
      (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,1"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,1"))
      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,1"))
      (rule "impLeft" (formula "20"))
      (branch
         (rule "allRight" (formula "20") (inst "sk=j_0"))
         (rule "allRight" (formula "20") (inst "sk=i_0"))
         (rule "orRight" (formula "20"))
         (rule "orRight" (formula "20"))
         (rule "orRight" (formula "20"))
         (rule "inEqSimp_geqRight" (formula "23"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_leqRight" (formula "23"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_leqRight" (formula "22"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "23"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "mul_literals" (formula "4") (term "0,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "29") (term "1,1,1") (ifseqformula "14"))
         (rule "concrete_and_3" (formula "29") (term "1,1"))
         (rule "ifthenelse_split" (formula "21") (term "1,0"))
         (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) TRUE"
            (rule "replace_known_left" (formula "8") (term "0,2,0,0") (ifseqformula "21"))
            (rule "ifthenelse_true" (formula "8") (term "2,0,0"))
            (rule "replace_known_left" (formula "5") (term "0,2,0,0") (ifseqformula "21"))
            (rule "ifthenelse_true" (formula "5") (term "2,0,0"))
            (rule "replace_known_left" (formula "24") (term "0,2,0,0") (ifseqformula "21"))
            (rule "ifthenelse_true" (formula "24") (term "2,0,0"))
            (rule "elementOfUnion" (formula "8") (term "0,0"))
            (rule "elementOfAllFields" (formula "8") (term "0,0,0"))
            (rule "eqSymm" (formula "8") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "8") (term "1,0,0"))
            (rule "equalUnique" (formula "8") (term "1,1,0,0"))
            (rule "concrete_and_4" (formula "8") (term "1,0,0"))
            (rule "concrete_or_4" (formula "8") (term "0,0"))
            (rule "sortsDisjointModuloNull" (formula "8") (term "0,0"))
            (rule "replace_known_right" (formula "8") (term "1,0,0") (ifseqformula "27"))
            (rule "concrete_and_4" (formula "8") (term "0,0"))
            (rule "ifthenelse_false" (formula "8") (term "0"))
            (rule "applyEqReverse" (formula "30") (term "1,1,0,1,1") (ifseqformula "8"))
            (rule "applyEqReverse" (formula "7") (term "0,1,1") (ifseqformula "8"))
            (rule "hideAuxiliaryEq" (formula "8"))
            (rule "elementOfUnion" (formula "5") (term "0,0"))
            (rule "elementOfAllFields" (formula "5") (term "0,0,0"))
            (rule "eqSymm" (formula "5") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "5") (term "1,0,0"))
            (rule "equalUnique" (formula "5") (term "1,1,0,0"))
            (rule "concrete_and_4" (formula "5") (term "1,0,0"))
            (rule "concrete_or_4" (formula "5") (term "0,0"))
            (rule "sortsDisjointModuloNull" (formula "5") (term "0,0"))
            (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "27"))
            (rule "concrete_and_2" (formula "5") (term "0,0"))
            (rule "ifthenelse_false" (formula "5") (term "0"))
            (rule "applyEqReverse" (formula "29") (term "1,0,1,0,1,1") (ifseqformula "5"))
            (rule "applyEqReverse" (formula "29") (term "0,0,0") (ifseqformula "5"))
            (rule "applyEqReverse" (formula "29") (term "1,0,1,0,0,0,1") (ifseqformula "5"))
            (rule "applyEqReverse" (formula "29") (term "1,1,1,1,0,0,0,1") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "26"))
            (rule "concrete_not_2" (formula "28") (term "0"))
            (rule "concrete_and_1" (formula "28"))
            (rule "elementOfUnion" (formula "22") (term "0,0"))
            (rule "elementOfAllFields" (formula "22") (term "0,0,0"))
            (rule "eqSymm" (formula "22") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "22") (term "1,0,0"))
            (rule "eqClose" (formula "22") (term "0,1,0,0"))
            (rule "concrete_and_1" (formula "22") (term "1,0,0"))
            (rule "equalUnique" (formula "22") (term "1,0,0"))
            (rule "concrete_or_3" (formula "22") (term "0,0"))
            (rule "ifthenelse_true" (formula "22") (term "0"))
            (rule "applyEqReverse" (formula "28") (term "1,1,0,0,1") (ifseqformula "22"))
            (rule "applyEqReverse" (formula "28") (term "1,1,1,0,0,0,0") (ifseqformula "22"))
            (rule "hideAuxiliaryEq" (formula "22"))
            (rule "allLeft" (formula "14") (inst "t=j_0"))
            (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "14") (term "1,1,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
            (rule "leq_literals" (formula "14") (term "0,0,0,0,0"))
            (rule "concrete_and_2" (formula "14") (term "0,0,0,0"))
            (rule "concrete_or_2" (formula "14") (term "0,0,0"))
            (rule "andRight" (formula "28"))
            (branch
               (rule "allRight" (formula "28") (inst "sk=j_1"))
               (rule "allRight" (formula "28") (inst "sk=m_0"))
               (rule "orRight" (formula "28"))
               (rule "orRight" (formula "28"))
               (rule "orRight" (formula "28"))
               (rule "inEqSimp_leqRight" (formula "31"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "31"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "31"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "31"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1"))
               (rule "polySimp_elimOne" (formula "4") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfCreate" (formula "4"))
               (rule "equalUnique" (formula "4") (term "1,0,0"))
               (rule "concrete_and_4" (formula "4") (term "0,0"))
               (rule "ifthenelse_false" (formula "4") (term "0"))
               (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "26"))
               (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
               (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
               (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "4") (term "0,0,0"))
               (rule "replace_known_right" (formula "4") (term "0,0,1,0,0") (ifseqformula "31"))
               (rule "concrete_not_2" (formula "4") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "4") (term "1,0,0"))
               (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "13"))
               (rule "concrete_not_1" (formula "4") (term "1,0,0"))
               (rule "concrete_or_4" (formula "4") (term "0,0"))
               (rule "inEqSimp_commuteGeq" (formula "5"))
               (rule "elementOfUnion" (formula "4") (term "0,0"))
               (rule "elementOfAllFields" (formula "4") (term "0,0,0"))
               (rule "eqClose" (formula "4") (term "0,0,0"))
               (rule "concrete_or_1" (formula "4") (term "0,0"))
               (rule "ifthenelse_true" (formula "4") (term "0"))
               (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
               (rule "mul_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfCreate" (formula "5"))
               (rule "equalUnique" (formula "5") (term "1,0,0"))
               (rule "concrete_and_4" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "27"))
               (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
               (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
               (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0,0"))
               (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "32"))
               (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "5") (term "1,0,0"))
               (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "14"))
               (rule "concrete_not_1" (formula "5") (term "1,0,0"))
               (rule "concrete_or_4" (formula "5") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "elementOfUnion" (formula "5") (term "0,0"))
               (rule "elementOfAllFields" (formula "5") (term "0,0,0"))
               (rule "eqClose" (formula "5") (term "0,0,0"))
               (rule "concrete_or_1" (formula "5") (term "0,0"))
               (rule "ifthenelse_true" (formula "5") (term "0"))
               (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "cut_direct" (formula "12") (term "0"))
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "allLeft" (formula "25") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0,0,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "25") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "25") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "25") (term "0,0,0"))
                  (rule "allLeft" (formula "19") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "19") (term "1") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,1"))
                  (rule "leq_literals" (formula "19") (term "0,1"))
                  (rule "concrete_and_2" (formula "19") (term "1"))
                  (rule "concrete_or_4" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,1"))
                  (rule "leq_literals" (formula "19") (term "0,1"))
                  (rule "concrete_and_2" (formula "19") (term "1"))
                  (rule "concrete_or_4" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "19") (term "0"))
                  (rule "concrete_and_2" (formula "19"))
                  (rule "closeFalse" (formula "19"))
               )
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "12"))
                  (rule "allLeft" (formula "25") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0,0,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "25") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "25") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "25") (term "0,0,0"))
                  (rule "allLeft" (formula "19") (inst "t=i_0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                  (rule "inEqSimp_contradInEq0" (formula "19") (term "1") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,1"))
                  (rule "leq_literals" (formula "19") (term "0,1"))
                  (rule "concrete_and_2" (formula "19") (term "1"))
                  (rule "concrete_or_4" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "19") (term "0,0"))
                  (rule "concrete_and_2" (formula "19") (term "0"))
                  (rule "concrete_or_2" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "8"))
                  (rule "andLeft" (formula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "19"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "1,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0"))
                  (rule "add_zero_right" (formula "19") (term "0"))
                  (rule "leq_literals" (formula "19"))
                  (rule "closeFalse" (formula "19"))
               )
            )
            (branch
               (rule "nnf_ex2all" (formula "28"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "cut_direct" (formula "8") (term "0"))
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "allLeft" (formula "21") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "21") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "21") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "21") (term "0,0,0"))
                  (rule "allLeft" (formula "15") (inst "t=i_0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "1"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "15") (term "0,1,0"))
                  (rule "concrete_and_2" (formula "15") (term "1,0"))
                  (rule "concrete_or_4" (formula "15") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1"))
                  (rule "leq_literals" (formula "15") (term "0,1"))
                  (rule "concrete_and_2" (formula "15") (term "1"))
                  (rule "concrete_or_4" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                  (rule "concrete_and_2" (formula "15"))
                  (rule "closeFalse" (formula "15"))
               )
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "8"))
                  (rule "allLeft" (formula "21") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "21") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "21") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "21") (term "0,0,0"))
                  (rule "allLeft" (formula "15") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "15") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "15") (term "0,0"))
                  (rule "concrete_or_2" (formula "15") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1"))
                  (rule "leq_literals" (formula "15") (term "0,1"))
                  (rule "concrete_and_2" (formula "15") (term "1"))
                  (rule "concrete_or_4" (formula "15"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "15"))
                  (rule "andLeft" (formula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_literals" (formula "4") (term "0"))
                  (rule "leq_literals" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
         )
         (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) FALSE"
            (rule "allRight" (formula "24") (inst "sk=j_1"))
            (rule "allRight" (formula "24") (inst "sk=i_1"))
            (rule "orRight" (formula "24"))
            (rule "orRight" (formula "24"))
            (rule "orRight" (formula "24"))
            (rule "inEqSimp_geqRight" (formula "27"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_leqRight" (formula "27"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_geqRight" (formula "27"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "27"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "mul_literals" (formula "4") (term "0,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "ifthenelse_split" (formula "12") (term "2,0,0"))
            (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) TRUE"
               (rule "replace_known_left" (formula "9") (term "0,2,0,0") (ifseqformula "12"))
               (rule "ifthenelse_true" (formula "9") (term "2,0,0"))
               (rule "replace_known_left" (formula "28") (term "0,2,0,0") (ifseqformula "12"))
               (rule "ifthenelse_true" (formula "28") (term "2,0,0"))
               (rule "elementOfUnion" (formula "13") (term "0,0"))
               (rule "elementOfAllFields" (formula "13") (term "0,0,0"))
               (rule "eqSymm" (formula "13") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "13") (term "1,0,0"))
               (rule "equalUnique" (formula "13") (term "1,1,0,0"))
               (rule "concrete_and_4" (formula "13") (term "1,0,0"))
               (rule "concrete_or_4" (formula "13") (term "0,0"))
               (rule "sortsDisjointModuloNull" (formula "13") (term "0,0"))
               (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "32"))
               (rule "concrete_and_2" (formula "13") (term "0,0"))
               (rule "ifthenelse_false" (formula "13") (term "0"))
               (rule "applyEqReverse" (formula "34") (term "1,1,0,1,1") (ifseqformula "13"))
               (rule "applyEqReverse" (formula "11") (term "0,1,1") (ifseqformula "13"))
               (rule "hideAuxiliaryEq" (formula "13"))
               (rule "elementOfUnion" (formula "9") (term "0,0"))
               (rule "elementOfAllFields" (formula "9") (term "0,0,0"))
               (rule "eqSymm" (formula "9") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "9") (term "1,0,0"))
               (rule "eqClose" (formula "9") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "9") (term "1,0,0"))
               (rule "equalUnique" (formula "9") (term "1,0,0"))
               (rule "concrete_or_4" (formula "9") (term "0,0"))
               (rule "sortsDisjointModuloNull" (formula "9") (term "0,0"))
               (rule "replace_known_right" (formula "9") (term "1,0,0") (ifseqformula "30"))
               (rule "concrete_and_4" (formula "9") (term "0,0"))
               (rule "ifthenelse_false" (formula "9") (term "0"))
               (rule "applyEqReverse" (formula "33") (term "1,1,1,1,0,0,0,1") (ifseqformula "9"))
               (rule "applyEqReverse" (formula "33") (term "0,0,0") (ifseqformula "9"))
               (rule "applyEqReverse" (formula "33") (term "1,0,1,0,0,0,1") (ifseqformula "9"))
               (rule "applyEqReverse" (formula "33") (term "1,0,1,0,1,1") (ifseqformula "9"))
               (rule "hideAuxiliaryEq" (formula "9"))
               (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "30"))
               (rule "concrete_not_2" (formula "32") (term "0"))
               (rule "concrete_and_1" (formula "32"))
               (rule "elementOfUnion" (formula "26") (term "0,0"))
               (rule "elementOfAllFields" (formula "26") (term "0,0,0"))
               (rule "eqSymm" (formula "26") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "26") (term "1,0,0"))
               (rule "eqClose" (formula "26") (term "1,1,0,0"))
               (rule "concrete_and_3" (formula "26") (term "1,0,0"))
               (rule "eqClose" (formula "26") (term "1,0,0"))
               (rule "concrete_or_3" (formula "26") (term "0,0"))
               (rule "ifthenelse_true" (formula "26") (term "0"))
               (rule "applyEqReverse" (formula "32") (term "1,1,1,0,0,0,0") (ifseqformula "26"))
               (rule "applyEqReverse" (formula "32") (term "1,1,0,0,1") (ifseqformula "26"))
               (rule "hideAuxiliaryEq" (formula "26"))
               (rule "allLeft" (formula "19") (inst "t=j_1"))
               (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0,0"))
               (rule "allLeft" (formula "20") (inst "t=j_0"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "20") (term "0,0,0,0,0"))
               (rule "concrete_and_2" (formula "20") (term "0,0,0,0"))
               (rule "concrete_or_2" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "19") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "19") (term "0,0,0,0,0"))
               (rule "concrete_and_2" (formula "19") (term "0,0,0,0"))
               (rule "concrete_or_2" (formula "19") (term "0,0,0"))
               (rule "cut_direct" (formula "12") (term "0"))
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "andRight" (formula "33"))
                  (branch
                     (rule "allRight" (formula "33") (inst "sk=j_2"))
                     (rule "allRight" (formula "33") (inst "sk=m_0"))
                     (rule "orRight" (formula "33"))
                     (rule "orRight" (formula "33"))
                     (rule "orRight" (formula "33"))
                     (rule "inEqSimp_leqRight" (formula "36"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "36"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "36"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_leqRight" (formula "36"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfCreate" (formula "4"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "31"))
                     (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                     (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                     (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                     (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                     (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "4") (term "0,0"))
                     (rule "ifthenelse_true" (formula "4") (term "0"))
                     (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "inEqSimp_commuteGeq" (formula "4"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfCreate" (formula "5"))
                     (rule "equalUnique" (formula "5") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "5") (term "0,0"))
                     (rule "ifthenelse_false" (formula "5") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "32"))
                     (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                     (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                     (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                     (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                     (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "5") (term "0,0"))
                     (rule "ifthenelse_true" (formula "5") (term "0"))
                     (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "allLeft" (formula "16") (inst "t=j_0"))
                     (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,0"))
                     (rule "allLeft" (formula "17") (inst "t=j_1"))
                     (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "17") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "17") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "17") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0") (ifseqformula "10"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "16") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "16") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "16") (term "0,0,0"))
                     (rule "allLeft" (formula "25") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "25") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0") (ifseqformula "11"))
                     (rule "qeq_literals" (formula "25") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "25") (term "0,0"))
                     (rule "concrete_or_2" (formula "25") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "25") (term "1") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                     (rule "add_literals" (formula "25") (term "0,0,1"))
                     (rule "leq_literals" (formula "25") (term "0,1"))
                     (rule "concrete_and_2" (formula "25") (term "1"))
                     (rule "concrete_or_4" (formula "25"))
                     (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "25"))
                     (rule "andLeft" (formula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "12"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "1,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0"))
                     (rule "add_zero_right" (formula "12") (term "0"))
                     (rule "leq_literals" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
                  (branch
                     (rule "nnf_ex2all" (formula "33"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "allLeft" (formula "12") (inst "t=j_0"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0"))
                     (rule "allLeft" (formula "13") (inst "t=j_1"))
                     (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "12") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "12") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "12") (term "0,0,0"))
                     (rule "allLeft" (formula "21") (inst "t=i_0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                     (rule "inEqSimp_contradInEq0" (formula "21") (term "1") (ifseqformula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "21") (term "0,0,1"))
                     (rule "leq_literals" (formula "21") (term "0,1"))
                     (rule "concrete_and_2" (formula "21") (term "1"))
                     (rule "concrete_or_4" (formula "21"))
                     (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "21") (term "0,0"))
                     (rule "concrete_and_2" (formula "21") (term "0"))
                     (rule "concrete_or_2" (formula "21"))
                     (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "8"))
                     (rule "andLeft" (formula "21"))
                     (rule "inEqSimp_homoInEq1" (formula "21"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
                     (rule "add_literals" (formula "21") (term "1,1,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0"))
                     (rule "add_literals" (formula "21") (term "0"))
                     (rule "leq_literals" (formula "21"))
                     (rule "closeFalse" (formula "21"))
                  )
               )
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "12"))
                  (rule "andRight" (formula "34"))
                  (branch
                     (rule "allRight" (formula "34") (inst "sk=j_2"))
                     (rule "allRight" (formula "34") (inst "sk=m_0"))
                     (rule "orRight" (formula "34"))
                     (rule "orRight" (formula "34"))
                     (rule "orRight" (formula "34"))
                     (rule "inEqSimp_leqRight" (formula "37"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "37"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "37"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_leqRight" (formula "37"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfCreate" (formula "4"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "31"))
                     (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                     (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                     (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                     (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                     (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "4") (term "0,0"))
                     (rule "ifthenelse_true" (formula "4") (term "0"))
                     (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "inEqSimp_commuteGeq" (formula "4"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfCreate" (formula "5"))
                     (rule "equalUnique" (formula "5") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "5") (term "0,0"))
                     (rule "ifthenelse_false" (formula "5") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "32"))
                     (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                     (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                     (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                     (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                     (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "5") (term "0,0"))
                     (rule "ifthenelse_true" (formula "5") (term "0"))
                     (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "allLeft" (formula "25") (inst "t=i_0"))
                     (rule "inEqSimp_commuteLeq" (formula "25") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                     (rule "inEqSimp_contradInEq0" (formula "25") (term "1") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                     (rule "add_literals" (formula "25") (term "0,0,1"))
                     (rule "leq_literals" (formula "25") (term "0,1"))
                     (rule "concrete_and_2" (formula "25") (term "1"))
                     (rule "concrete_or_4" (formula "25"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                     (rule "add_literals" (formula "25") (term "0,0,1"))
                     (rule "leq_literals" (formula "25") (term "0,1"))
                     (rule "concrete_and_2" (formula "25") (term "1"))
                     (rule "concrete_or_4" (formula "25"))
                     (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "25"))
                     (rule "qeq_literals" (formula "11") (term "0"))
                     (rule "concrete_and_2" (formula "11"))
                     (rule "closeFalse" (formula "11"))
                  )
                  (branch
                     (rule "nnf_ex2all" (formula "34"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "allLeft" (formula "12") (inst "t=j_0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0"))
                     (rule "allLeft" (formula "13") (inst "t=j_1"))
                     (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "12") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "12") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "12") (term "0,0,0"))
                     (rule "allLeft" (formula "21") (inst "t=i_0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "21") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "21") (term "0,0"))
                     (rule "concrete_or_2" (formula "21") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "21") (term "1") (ifseqformula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "21") (term "0,0,1"))
                     (rule "leq_literals" (formula "21") (term "0,1"))
                     (rule "concrete_and_2" (formula "21") (term "1"))
                     (rule "concrete_or_4" (formula "21"))
                     (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "8"))
                     (rule "andLeft" (formula "21"))
                     (rule "inEqSimp_homoInEq1" (formula "21"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
                     (rule "add_literals" (formula "21") (term "1,1,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0"))
                     (rule "add_literals" (formula "21") (term "0"))
                     (rule "leq_literals" (formula "21"))
                     (rule "closeFalse" (formula "21"))
                  )
               )
            )
            (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) FALSE"
               (rule "elementOfAllLocs" (formula "12") (term "0,0"))
               (rule "ifthenelse_true" (formula "12") (term "0"))
               (rule "allRight" (formula "28") (inst "sk=j_2"))
               (rule "allRight" (formula "28") (inst "sk=i_2"))
               (rule "orRight" (formula "28"))
               (rule "orRight" (formula "28"))
               (rule "orRight" (formula "28"))
               (rule "applyEqReverse" (formula "37") (term "1,1,0,1,1") (ifseqformula "12"))
               (rule "applyEqReverse" (formula "11") (term "0,1,1") (ifseqformula "12"))
               (rule "hideAuxiliaryEq" (formula "12"))
               (rule "inEqSimp_geqRight" (formula "30"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "30"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "29"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "30"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "ifthenelse_split" (formula "30") (term "2,0,0"))
               (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) TRUE"
                  (rule "replace_known_left" (formula "13") (term "0,2,0,0") (ifseqformula "30"))
                  (rule "ifthenelse_true" (formula "13") (term "2,0,0"))
                  (rule "elementOfUnion" (formula "31") (term "0,0"))
                  (rule "elementOfAllFields" (formula "31") (term "0,0,0"))
                  (rule "eqSymm" (formula "31") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "31") (term "1,0,0"))
                  (rule "eqClose" (formula "31") (term "0,1,0,0"))
                  (rule "concrete_and_1" (formula "31") (term "1,0,0"))
                  (rule "eqClose" (formula "31") (term "1,0,0"))
                  (rule "concrete_or_3" (formula "31") (term "0,0"))
                  (rule "ifthenelse_true" (formula "31") (term "0"))
                  (rule "applyEqReverse" (formula "37") (term "1,1,0,0,1,1") (ifseqformula "31"))
                  (rule "applyEqReverse" (formula "37") (term "1,1,1,0,0,0,0,1") (ifseqformula "31"))
                  (rule "hideAuxiliaryEq" (formula "31"))
                  (rule "elementOfUnion" (formula "13") (term "0,0"))
                  (rule "elementOfAllFields" (formula "13") (term "0,0,0"))
                  (rule "eqSymm" (formula "13") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "13") (term "1,0,0"))
                  (rule "equalUnique" (formula "13") (term "1,1,0,0"))
                  (rule "concrete_and_4" (formula "13") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "13") (term "0,0"))
                  (rule "sortsDisjointModuloNull" (formula "13") (term "0,0"))
                  (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "34"))
                  (rule "concrete_and_2" (formula "13") (term "0,0"))
                  (rule "ifthenelse_false" (formula "13") (term "0"))
                  (rule "applyEqReverse" (formula "36") (term "1,1,1,1,0,0,0,1") (ifseqformula "13"))
                  (rule "applyEqReverse" (formula "36") (term "1,0,1,0,1,1") (ifseqformula "13"))
                  (rule "applyEqReverse" (formula "36") (term "1,0,1,0,0,0,1") (ifseqformula "13"))
                  (rule "applyEqReverse" (formula "36") (term "0,0,0") (ifseqformula "13"))
                  (rule "hideAuxiliaryEq" (formula "13"))
                  (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "33"))
                  (rule "concrete_not_2" (formula "35") (term "0"))
                  (rule "concrete_and_1" (formula "35"))
                  (rule "allLeft" (formula "22") (inst "t=j_2"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "22") (term "0,0,0,0,0"))
                  (rule "allLeft" (formula "23") (inst "t=j_0"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,0"))
                  (rule "allLeft" (formula "24") (inst "t=j_1"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "22") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "22") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "22") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "22") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0,0,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "24") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "24") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "24") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0,0,0") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "23") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "23") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "23") (term "0,0,0"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "andRight" (formula "38"))
                     (branch
                        (rule "allRight" (formula "38") (inst "sk=j_3"))
                        (rule "allRight" (formula "38") (inst "sk=m_0"))
                        (rule "orRight" (formula "38"))
                        (rule "orRight" (formula "38"))
                        (rule "orRight" (formula "38"))
                        (rule "inEqSimp_leqRight" (formula "41"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "41"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "41"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "41"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "35"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "4") (term "0,0"))
                        (rule "ifthenelse_true" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfCreate" (formula "5"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "36"))
                        (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                        (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                        (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "5") (term "0,0"))
                        (rule "ifthenelse_true" (formula "5") (term "0"))
                        (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "allLeft" (formula "37") (inst "t=j_1"))
                        (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "37") (term "1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "38") (inst "t=j_0"))
                        (rule "inEqSimp_commuteGeq" (formula "38") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "39") (inst "t=j_2"))
                        (rule "inEqSimp_commuteLeq" (formula "39") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "39") (term "1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0,0,0") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "37") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "37") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "37") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "38") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "38") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "38") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "38") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "38") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "38") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0,0,0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "37") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "37") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "37") (term "0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "19") (inst "iv=iv"))
                        (rule "andLeft" (formula "19"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "1,1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "add_literals" (formula "19") (term "1,0,1"))
                        (rule "add_literals" (formula "19") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
                        (rule "eqClose" (formula "20") (term "1,0"))
                        (rule "concrete_impl_4" (formula "20") (term "0"))
                        (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "21"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0"))
                        (rule "polySimp_homoEq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "1,1,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0"))
                        (rule "add_zero_right" (formula "19") (term "0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "1,0,1,0"))
                        (rule "add_literals" (formula "19") (term "0,1,0"))
                        (rule "mul_literals" (formula "19") (term "1,0"))
                        (rule "add_literals" (formula "19") (term "0"))
                        (rule "eqClose" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "all_unused" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "allLeft" (formula "27") (inst "t=i_2"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0,0"))
                        (rule "concrete_or_2" (formula "27") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "27") (term "1") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                        (rule "add_literals" (formula "27") (term "0,0,1"))
                        (rule "leq_literals" (formula "27") (term "0,1"))
                        (rule "concrete_and_2" (formula "27") (term "1"))
                        (rule "concrete_or_4" (formula "27"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "8"))
                        (rule "andLeft" (formula "27"))
                        (rule "inEqSimp_homoInEq1" (formula "27"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                        (rule "add_literals" (formula "27") (term "1,1,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0"))
                        (rule "add_zero_right" (formula "27") (term "0"))
                        (rule "leq_literals" (formula "27"))
                        (rule "closeFalse" (formula "27"))
                     )
                     (branch
                        (rule "nnf_ex2all" (formula "38"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "allLeft" (formula "33") (inst "t=j_1"))
                        (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "34") (inst "t=j_0"))
                        (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "35") (inst "t=j_2"))
                        (rule "inEqSimp_commuteGeq" (formula "35") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "34") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "34") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "34") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "34") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                        (rule "andLeft" (formula "15"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "1,1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "add_literals" (formula "15") (term "1,0,1"))
                        (rule "add_literals" (formula "15") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "applyEq" (formula "16") (term "0,0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0"))
                        (rule "polySimp_homoEq" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0"))
                        (rule "add_zero_right" (formula "15") (term "0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "1,0,1,0"))
                        (rule "add_literals" (formula "15") (term "0,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,0"))
                        (rule "add_literals" (formula "15") (term "0"))
                        (rule "eqClose" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                        (rule "eqClose" (formula "15") (term "1,0"))
                        (rule "concrete_impl_4" (formula "15") (term "0"))
                        (rule "all_unused" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "allLeft" (formula "23") (inst "t=i_2"))
                        (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "23") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "23") (term "0,0"))
                        (rule "concrete_or_2" (formula "23") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "23") (term "1") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1"))
                        (rule "leq_literals" (formula "23") (term "0,1"))
                        (rule "concrete_and_2" (formula "23") (term "1"))
                        (rule "concrete_or_4" (formula "23"))
                        (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "23"))
                        (rule "andLeft" (formula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0"))
                        (rule "add_literals" (formula "4") (term "0"))
                        (rule "leq_literals" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                  )
                  (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "15"))
                     (rule "andRight" (formula "39"))
                     (branch
                        (rule "allRight" (formula "39") (inst "sk=j_3"))
                        (rule "allRight" (formula "39") (inst "sk=m_0"))
                        (rule "orRight" (formula "39"))
                        (rule "orRight" (formula "39"))
                        (rule "orRight" (formula "39"))
                        (rule "inEqSimp_leqRight" (formula "42"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "42"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "41"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "42"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "35"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "4") (term "0,0"))
                        (rule "ifthenelse_true" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfCreate" (formula "5"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "36"))
                        (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                        (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                        (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "5") (term "0,0"))
                        (rule "ifthenelse_true" (formula "5") (term "0"))
                        (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "allLeft" (formula "37") (inst "t=j_1"))
                        (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "37") (term "1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "38") (inst "t=j_0"))
                        (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "38") (term "1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "39") (inst "t=j_2"))
                        (rule "inEqSimp_commuteLeq" (formula "39") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "39") (term "1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0,0,0") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "37") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "37") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "37") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0,0,0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "37") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "37") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "37") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "37") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "37") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "37") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "37") (term "0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "19") (inst "iv=iv"))
                        (rule "andLeft" (formula "19"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "19") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "1,1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,1,0,1"))
                        (rule "add_literals" (formula "19") (term "1,0,1"))
                        (rule "add_literals" (formula "19") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "applyEq" (formula "20") (term "0,0,1,0,0,1,0,0") (ifseqformula "21"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
                        (rule "eqClose" (formula "20") (term "1,0"))
                        (rule "concrete_impl_4" (formula "20") (term "0"))
                        (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "21"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0"))
                        (rule "polySimp_homoEq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "1,1,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0"))
                        (rule "add_zero_right" (formula "19") (term "0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "1,0,1,0"))
                        (rule "add_literals" (formula "19") (term "0,1,0"))
                        (rule "mul_literals" (formula "19") (term "1,0"))
                        (rule "add_literals" (formula "19") (term "0"))
                        (rule "eqClose" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "all_unused" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "allLeft" (formula "27") (inst "t=i_2"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "27") (term "1") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                        (rule "add_literals" (formula "27") (term "0,0,1"))
                        (rule "leq_literals" (formula "27") (term "0,1"))
                        (rule "concrete_and_2" (formula "27") (term "1"))
                        (rule "concrete_or_4" (formula "27"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "27") (term "0,0"))
                        (rule "concrete_and_2" (formula "27") (term "0"))
                        (rule "concrete_or_2" (formula "27"))
                        (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "27"))
                        (rule "andLeft" (formula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "8"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "1,1,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0"))
                        (rule "add_zero_right" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch
                        (rule "nnf_ex2all" (formula "39"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "allLeft" (formula "33") (inst "t=j_1"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "34") (inst "t=j_0"))
                        (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "35") (inst "t=j_2"))
                        (rule "inEqSimp_commuteGeq" (formula "35") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "34") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "34") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "34") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "34") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                        (rule "andLeft" (formula "15"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "1,1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "add_literals" (formula "15") (term "1,0,1"))
                        (rule "add_literals" (formula "15") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "applyEq" (formula "16") (term "0,0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0"))
                        (rule "polySimp_homoEq" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0"))
                        (rule "add_zero_right" (formula "15") (term "0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "1,0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "add_literals" (formula "15") (term "0,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,0"))
                        (rule "add_literals" (formula "15") (term "0"))
                        (rule "eqClose" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                        (rule "eqClose" (formula "15") (term "1,0"))
                        (rule "concrete_impl_4" (formula "15") (term "0"))
                        (rule "all_unused" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "allLeft" (formula "23") (inst "t=i_2"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "23") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "23") (term "0,0"))
                        (rule "concrete_or_2" (formula "23") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "23") (term "1") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1"))
                        (rule "leq_literals" (formula "23") (term "0,1"))
                        (rule "concrete_and_2" (formula "23") (term "1"))
                        (rule "concrete_or_4" (formula "23"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "4"))
                        (rule "andLeft" (formula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "23"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "1,1,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0"))
                        (rule "add_literals" (formula "23") (term "0"))
                        (rule "leq_literals" (formula "23"))
                        (rule "closeFalse" (formula "23"))
                     )
                  )
               )
               (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) FALSE"
                  (rule "elementOfAllLocs" (formula "30") (term "0,0"))
                  (rule "ifthenelse_true" (formula "30") (term "0"))
                  (rule "allRight" (formula "31") (inst "sk=j_3"))
                  (rule "allRight" (formula "31") (inst "sk=i_3"))
                  (rule "orRight" (formula "31"))
                  (rule "orRight" (formula "31"))
                  (rule "orRight" (formula "31"))
                  (rule "applyEqReverse" (formula "40") (term "1,1,0,0,1,1") (ifseqformula "30"))
                  (rule "applyEqReverse" (formula "40") (term "1,1,1,0,0,0,0,1") (ifseqformula "30"))
                  (rule "hideAuxiliaryEq" (formula "30"))
                  (rule "inEqSimp_geqRight" (formula "33"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "33"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_geqRight" (formula "33"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "33"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "allLeft" (formula "27") (inst "t=j_3"))
                  (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "27") (term "0,0,0,0,0"))
                  (rule "allLeft" (formula "28") (inst "t=j_0"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,0,0,0,0"))
                  (rule "allLeft" (formula "29") (inst "t=j_1"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,0,0,0,0"))
                  (rule "allLeft" (formula "30") (inst "t=j_2"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "27") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "27") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "27") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "27") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "27") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0,0,0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "28") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "28") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "28") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0,0,0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "30") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "30") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "30") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "30") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0,0,0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "29") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "29") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "29") (term "0,0,0"))
                  (rule "ifthenelse_split" (formula "17") (term "2,0,0"))
                  (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) TRUE"
                     (rule "elementOfUnion" (formula "18") (term "0,0"))
                     (rule "elementOfAllFields" (formula "18") (term "0,0,0"))
                     (rule "eqSymm" (formula "18") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "18") (term "1,0,0"))
                     (rule "equalUnique" (formula "18") (term "1,1,0,0"))
                     (rule "concrete_and_4" (formula "18") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "18") (term "0,0"))
                     (rule "sortsDisjointModuloNull" (formula "18") (term "0,0"))
                     (rule "replace_known_right" (formula "18") (term "1,0,0") (ifseqformula "41"))
                     (rule "concrete_and_4" (formula "18") (term "0,0"))
                     (rule "ifthenelse_false" (formula "18") (term "0"))
                     (rule "applyEqReverse" (formula "44") (term "0,0,0") (ifseqformula "18"))
                     (rule "applyEqReverse" (formula "44") (term "1,1,1,1,0,0,0,1") (ifseqformula "18"))
                     (rule "applyEqReverse" (formula "44") (term "1,0,1,0,0,0,1") (ifseqformula "18"))
                     (rule "applyEqReverse" (formula "44") (term "1,0,1,0,1,1") (ifseqformula "18"))
                     (rule "hideAuxiliaryEq" (formula "18"))
                     (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "41"))
                     (rule "concrete_not_2" (formula "43") (term "0"))
                     (rule "concrete_and_1" (formula "43"))
                     (rule "cut_direct" (formula "20") (term "0"))
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "andRight" (formula "43"))
                        (branch
                           (rule "allRight" (formula "43") (inst "sk=j_4"))
                           (rule "allRight" (formula "43") (inst "sk=m_0"))
                           (rule "orRight" (formula "43"))
                           (rule "orRight" (formula "43"))
                           (rule "orRight" (formula "43"))
                           (rule "inEqSimp_leqRight" (formula "46"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "46"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "45"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "46"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfCreate" (formula "4"))
                           (rule "equalUnique" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "41"))
                           (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                           (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                           (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                           (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "4") (term "0,0"))
                           (rule "ifthenelse_true" (formula "4") (term "0"))
                           (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                           (rule "mul_literals" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                           (rule "simplifySelectOfCreate" (formula "5"))
                           (rule "equalUnique" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "5") (term "0,0"))
                           (rule "ifthenelse_false" (formula "5") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "42"))
                           (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                           (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                           (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                           (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "5") (term "0,0"))
                           (rule "ifthenelse_true" (formula "5") (term "0"))
                           (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "24") (inst "iv=iv"))
                           (rule "andLeft" (formula "24"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "1,1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "add_literals" (formula "24") (term "1,0,1"))
                           (rule "add_literals" (formula "24") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "applyEq" (formula "25") (term "0,0,1,0,0,1,0,0") (ifseqformula "26"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "1,0,1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "26"))
                           (rule "eqClose" (formula "25") (term "1,0"))
                           (rule "concrete_impl_4" (formula "25") (term "0"))
                           (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "26"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0"))
                           (rule "polySimp_homoEq" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "1,1,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0"))
                           (rule "add_zero_right" (formula "24") (term "0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "1,0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "add_literals" (formula "24") (term "0,1,0"))
                           (rule "mul_literals" (formula "24") (term "1,0"))
                           (rule "add_literals" (formula "24") (term "0"))
                           (rule "eqClose" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "all_unused" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "allLeft" (formula "32") (inst "t=i_3"))
                           (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,1,0"))
                           (rule "add_literals" (formula "32") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "32") (term "0,1,0"))
                           (rule "concrete_and_2" (formula "32") (term "1,0"))
                           (rule "concrete_or_4" (formula "32") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "32") (term "1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                           (rule "add_literals" (formula "32") (term "0,0,1"))
                           (rule "leq_literals" (formula "32") (term "0,1"))
                           (rule "concrete_and_2" (formula "32") (term "1"))
                           (rule "concrete_or_4" (formula "32"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "32"))
                           (rule "qeq_literals" (formula "6") (term "0"))
                           (rule "concrete_and_2" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                        (branch
                           (rule "nnf_ex2all" (formula "43"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
                           (rule "andLeft" (formula "20"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "1,1,0,1"))
                           (rule "add_literals" (formula "20") (term "1,0,1"))
                           (rule "add_literals" (formula "20") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,0,0") (ifseqformula "22"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "1,0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                           (rule "eqClose" (formula "21") (term "1,0"))
                           (rule "concrete_impl_4" (formula "21") (term "0"))
                           (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0"))
                           (rule "polySimp_homoEq" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "1,0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "add_literals" (formula "20") (term "0,1,0"))
                           (rule "mul_literals" (formula "20") (term "1,0"))
                           (rule "add_literals" (formula "20") (term "0"))
                           (rule "eqClose" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "all_unused" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "28") (inst "t=i_3"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "28") (term "0,0"))
                           (rule "concrete_or_2" (formula "28") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "1") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1"))
                           (rule "leq_literals" (formula "28") (term "0,1"))
                           (rule "concrete_and_2" (formula "28") (term "1"))
                           (rule "concrete_or_4" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "4"))
                           (rule "andLeft" (formula "28"))
                           (rule "inEqSimp_homoInEq1" (formula "28"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_literals" (formula "28") (term "0"))
                           (rule "leq_literals" (formula "28"))
                           (rule "closeFalse" (formula "28"))
                        )
                     )
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "20"))
                        (rule "andRight" (formula "44"))
                        (branch
                           (rule "allRight" (formula "44") (inst "sk=j_4"))
                           (rule "allRight" (formula "44") (inst "sk=m_0"))
                           (rule "orRight" (formula "44"))
                           (rule "orRight" (formula "44"))
                           (rule "orRight" (formula "44"))
                           (rule "inEqSimp_leqRight" (formula "47"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "47"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "46"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "47"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfCreate" (formula "4"))
                           (rule "equalUnique" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "41"))
                           (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                           (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                           (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                           (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "4") (term "0,0"))
                           (rule "ifthenelse_true" (formula "4") (term "0"))
                           (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                           (rule "mul_literals" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                           (rule "simplifySelectOfCreate" (formula "5"))
                           (rule "equalUnique" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "5") (term "0,0"))
                           (rule "ifthenelse_false" (formula "5") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "42"))
                           (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                           (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                           (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                           (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "5") (term "0,0"))
                           (rule "ifthenelse_true" (formula "5") (term "0"))
                           (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "24") (inst "iv=iv"))
                           (rule "andLeft" (formula "24"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "24") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "1,1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,1,0,1"))
                           (rule "add_literals" (formula "24") (term "1,0,1"))
                           (rule "add_literals" (formula "24") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "applyEq" (formula "25") (term "0,0,1,0,0,1,0,0") (ifseqformula "26"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "25") (term "1,0,1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "26"))
                           (rule "eqClose" (formula "25") (term "1,0"))
                           (rule "concrete_impl_4" (formula "25") (term "0"))
                           (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "26"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0"))
                           (rule "polySimp_homoEq" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "1,1,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0"))
                           (rule "add_zero_right" (formula "24") (term "0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "1,0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "24") (term "0,0,1,0"))
                           (rule "add_literals" (formula "24") (term "0,1,0"))
                           (rule "mul_literals" (formula "24") (term "1,0"))
                           (rule "add_literals" (formula "24") (term "0"))
                           (rule "eqClose" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "all_unused" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "allLeft" (formula "32") (inst "t=i_3"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "1"))
                           (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "32") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "32") (term "0,0"))
                           (rule "concrete_or_2" (formula "32") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "32") (term "1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                           (rule "add_literals" (formula "32") (term "0,0,1"))
                           (rule "leq_literals" (formula "32") (term "0,1"))
                           (rule "concrete_and_2" (formula "32") (term "1"))
                           (rule "concrete_or_4" (formula "32"))
                           (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "32"))
                           (rule "andLeft" (formula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "8"))
                           (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                           (rule "add_literals" (formula "8") (term "1,1,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0"))
                           (rule "add_zero_right" (formula "8") (term "0"))
                           (rule "leq_literals" (formula "8"))
                           (rule "closeFalse" (formula "8"))
                        )
                        (branch
                           (rule "nnf_ex2all" (formula "44"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
                           (rule "andLeft" (formula "20"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "1,1,0,1"))
                           (rule "add_literals" (formula "20") (term "1,0,1"))
                           (rule "add_literals" (formula "20") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,0,0") (ifseqformula "22"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "21") (term "1,0,1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                           (rule "eqClose" (formula "21") (term "1,0"))
                           (rule "concrete_impl_4" (formula "21") (term "0"))
                           (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0"))
                           (rule "polySimp_homoEq" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "1,0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "add_literals" (formula "20") (term "0,1,0"))
                           (rule "mul_literals" (formula "20") (term "1,0"))
                           (rule "add_literals" (formula "20") (term "0"))
                           (rule "eqClose" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "all_unused" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "28") (inst "t=i_3"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "1"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "28") (term "0,1,0"))
                           (rule "concrete_and_2" (formula "28") (term "1,0"))
                           (rule "concrete_or_4" (formula "28") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "1") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1"))
                           (rule "leq_literals" (formula "28") (term "0,1"))
                           (rule "concrete_and_2" (formula "28") (term "1"))
                           (rule "concrete_or_4" (formula "28"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (rule "concrete_and_2" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                  )
                  (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) FALSE"
                     (rule "elementOfAllLocs" (formula "17") (term "0,0"))
                     (rule "ifthenelse_true" (formula "17") (term "0"))
                     (rule "allRight" (formula "38") (inst "sk=j_4"))
                     (rule "allRight" (formula "38") (inst "sk=i_4"))
                     (rule "orRight" (formula "38"))
                     (rule "orRight" (formula "38"))
                     (rule "orRight" (formula "38"))
                     (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,0,0,1") (ifseqformula "17"))
                     (rule "applyEqReverse" (formula "47") (term "1,0,1,0,0,0,1") (ifseqformula "17"))
                     (rule "applyEqReverse" (formula "47") (term "0,0,0") (ifseqformula "17"))
                     (rule "applyEqReverse" (formula "47") (term "1,0,1,0,1,1") (ifseqformula "17"))
                     (rule "hideAuxiliaryEq" (formula "17"))
                     (rule "inEqSimp_geqRight" (formula "40"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_leqRight" (formula "40"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_leqRight" (formula "39"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "40"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "cut_direct" (formula "23") (term "0"))
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "allLeft" (formula "34") (inst "t=j_4"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "34") (term "0,0,0,0,0"))
                        (rule "concrete_and_2" (formula "34") (term "0,0,0,0"))
                        (rule "concrete_or_2" (formula "34") (term "0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
                        (rule "andLeft" (formula "22"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "1,1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "add_literals" (formula "22") (term "1,0,1"))
                        (rule "add_literals" (formula "22") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                        (rule "applyEq" (formula "23") (term "0,0,1,0,0,1,0,0") (ifseqformula "24"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "23") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "24"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0"))
                        (rule "polySimp_homoEq" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "1,1,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0"))
                        (rule "add_zero_right" (formula "22") (term "0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "1,0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "add_literals" (formula "22") (term "0,1,0"))
                        (rule "mul_literals" (formula "22") (term "1,0"))
                        (rule "add_literals" (formula "22") (term "0"))
                        (rule "eqClose" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "23"))
                        (rule "eqClose" (formula "22") (term "1,0"))
                        (rule "concrete_impl_4" (formula "22") (term "0"))
                        (rule "all_unused" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "allLeft" (formula "30") (inst "t=i_3"))
                        (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "30") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "30") (term "0,0"))
                        (rule "concrete_or_2" (formula "30") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "30") (term "1") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "30") (term "0,0,1"))
                        (rule "leq_literals" (formula "30") (term "0,1"))
                        (rule "concrete_and_2" (formula "30") (term "1"))
                        (rule "concrete_or_4" (formula "30"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "7"))
                        (rule "andLeft" (formula "30"))
                        (rule "inEqSimp_homoInEq1" (formula "30"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                        (rule "add_literals" (formula "30") (term "1,1,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0"))
                        (rule "add_zero_right" (formula "30") (term "0"))
                        (rule "leq_literals" (formula "30"))
                        (rule "closeFalse" (formula "30"))
                     )
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "23"))
                        (rule "allLeft" (formula "34") (inst "t=j_4"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "34") (term "0,0,0,0,0"))
                        (rule "concrete_and_2" (formula "34") (term "0,0,0,0"))
                        (rule "concrete_or_2" (formula "34") (term "0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
                        (rule "andLeft" (formula "22"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "22") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "1,1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,1,0,1"))
                        (rule "add_literals" (formula "22") (term "1,0,1"))
                        (rule "add_literals" (formula "22") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                        (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "24"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0"))
                        (rule "polySimp_homoEq" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "1,1,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0"))
                        (rule "add_zero_right" (formula "22") (term "0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "22") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "0,0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "22") (term "1,0,1,0"))
                        (rule "add_literals" (formula "22") (term "0,1,0"))
                        (rule "mul_literals" (formula "22") (term "1,0"))
                        (rule "add_literals" (formula "22") (term "0"))
                        (rule "eqClose" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "23"))
                        (rule "eqClose" (formula "22") (term "1,0"))
                        (rule "concrete_impl_4" (formula "22") (term "0"))
                        (rule "all_unused" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "allLeft" (formula "30") (inst "t=i_3"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                        (rule "inEqSimp_contradInEq0" (formula "30") (term "1") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "30") (term "0,0,1"))
                        (rule "leq_literals" (formula "30") (term "0,1"))
                        (rule "concrete_and_2" (formula "30") (term "1"))
                        (rule "concrete_or_4" (formula "30"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "30") (term "0,0,1"))
                        (rule "leq_literals" (formula "30") (term "0,1"))
                        (rule "concrete_and_2" (formula "30") (term "1"))
                        (rule "concrete_or_4" (formula "30"))
                        (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "30"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                        (rule "concrete_and_2" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                  )
               )
            )
         )
      )
      (branch
         (rule "andLeft" (formula "20"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "27") (term "1,1,1") (ifseqformula "10"))
         (rule "concrete_and_3" (formula "27") (term "1,1"))
         (rule "ifthenelse_split" (formula "17") (term "1,0"))
         (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) TRUE"
            (rule "replace_known_left" (formula "20") (term "0,2,0,0") (ifseqformula "17"))
            (rule "ifthenelse_true" (formula "20") (term "2,0,0"))
            (rule "replace_known_left" (formula "4") (term "0,2,0,0") (ifseqformula "17"))
            (rule "ifthenelse_true" (formula "4") (term "2,0,0"))
            (rule "replace_known_left" (formula "1") (term "0,2,0,0") (ifseqformula "17"))
            (rule "ifthenelse_true" (formula "1") (term "2,0,0"))
            (rule "elementOfUnion" (formula "20") (term "0,0"))
            (rule "elementOfAllFields" (formula "20") (term "0,0,0"))
            (rule "eqSymm" (formula "20") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "20") (term "1,0,0"))
            (rule "eqClose" (formula "20") (term "1,1,0,0"))
            (rule "concrete_and_3" (formula "20") (term "1,0,0"))
            (rule "eqClose" (formula "20") (term "1,0,0"))
            (rule "concrete_or_3" (formula "20") (term "0,0"))
            (rule "ifthenelse_true" (formula "20") (term "0"))
            (rule "applyEqReverse" (formula "28") (term "1,1,1,0,0,0,0,1") (ifseqformula "20"))
            (rule "applyEqReverse" (formula "22") (term "1,1,1,0,0,0,0") (ifseqformula "20"))
            (rule "applyEqReverse" (formula "21") (term "1,1,0,0,0,0") (ifseqformula "20"))
            (rule "applyEqReverse" (formula "28") (term "1,1,0,0,1,1") (ifseqformula "20"))
            (rule "hideAuxiliaryEq" (formula "20"))
            (rule "elementOfUnion" (formula "4") (term "0,0"))
            (rule "elementOfAllFields" (formula "4") (term "0,0,0"))
            (rule "eqSymm" (formula "4") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "4") (term "1,0,0"))
            (rule "equalUnique" (formula "4") (term "1,1,0,0"))
            (rule "concrete_and_4" (formula "4") (term "1,0,0"))
            (rule "concrete_or_4" (formula "4") (term "0,0"))
            (rule "sortsDisjointModuloNull" (formula "4") (term "0,0"))
            (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "24"))
            (rule "concrete_and_4" (formula "4") (term "0,0"))
            (rule "ifthenelse_false" (formula "4") (term "0"))
            (rule "applyEqReverse" (formula "27") (term "1,1,0,1,1") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "3") (term "0,1,1") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfAllFields" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
            (rule "equalUnique" (formula "1") (term "1,1,0,0"))
            (rule "concrete_and_4" (formula "1") (term "1,0,0"))
            (rule "concrete_or_4" (formula "1") (term "0,0"))
            (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "24"))
            (rule "concrete_and_2" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "26") (term "1,0,1,0,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "26") (term "1,1,1,1,0,0,0,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0,0,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "26") (term "0,0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "23"))
            (rule "concrete_not_2" (formula "25") (term "0"))
            (rule "concrete_and_1" (formula "25"))
            (rule "andRight" (formula "25"))
            (branch
               (rule "allRight" (formula "25") (inst "sk=j_0"))
               (rule "allRight" (formula "25") (inst "sk=m_0"))
               (rule "orRight" (formula "25"))
               (rule "orRight" (formula "25"))
               (rule "orRight" (formula "25"))
               (rule "inEqSimp_leqRight" (formula "28"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "28"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "27"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "28"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1"))
               (rule "polySimp_elimOne" (formula "4") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfCreate" (formula "4"))
               (rule "equalUnique" (formula "4") (term "1,0,0"))
               (rule "concrete_and_4" (formula "4") (term "0,0"))
               (rule "ifthenelse_false" (formula "4") (term "0"))
               (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "21"))
               (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
               (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
               (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "4") (term "0,0,0"))
               (rule "replace_known_right" (formula "4") (term "0,0,1,0,0") (ifseqformula "28"))
               (rule "concrete_not_2" (formula "4") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "4") (term "1,0,0"))
               (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "9"))
               (rule "concrete_not_1" (formula "4") (term "1,0,0"))
               (rule "concrete_or_4" (formula "4") (term "0,0"))
               (rule "inEqSimp_commuteGeq" (formula "5"))
               (rule "elementOfUnion" (formula "4") (term "0,0"))
               (rule "elementOfAllFields" (formula "4") (term "0,0,0"))
               (rule "eqClose" (formula "4") (term "0,0,0"))
               (rule "concrete_or_1" (formula "4") (term "0,0"))
               (rule "ifthenelse_true" (formula "4") (term "0"))
               (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
               (rule "mul_literals" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfCreate" (formula "5"))
               (rule "equalUnique" (formula "5") (term "1,0,0"))
               (rule "concrete_and_4" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "22"))
               (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
               (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
               (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0,0"))
               (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "29"))
               (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "5") (term "1,0,0"))
               (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "10"))
               (rule "concrete_not_1" (formula "5") (term "1,0,0"))
               (rule "concrete_or_4" (formula "5") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "elementOfUnion" (formula "5") (term "0,0"))
               (rule "elementOfAllFields" (formula "5") (term "0,0,0"))
               (rule "eqClose" (formula "5") (term "0,0,0"))
               (rule "concrete_or_1" (formula "5") (term "0,0"))
               (rule "ifthenelse_true" (formula "5") (term "0"))
               (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "cnf_eqv" (formula "23") (term "0"))
               (rule "nnf_notEx" (formula "23") (term "1,0,0"))
               (rule "nnf_notEx" (formula "23") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,1,0,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,1,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,1,0,0"))
               (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,1,0"))
               (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1,0"))
               (rule "distr_forallAnd" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "cut_direct" (formula "8") (term "0"))
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "7") (inst "iv=iv"))
                  (rule "andLeft" (formula "7"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "1,1,0,1"))
                  (rule "add_literals" (formula "7") (term "1,0,1"))
                  (rule "add_literals" (formula "7") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                  (rule "applyEq" (formula "8") (term "0,0,1,0,0,1,0,0") (ifseqformula "9"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "1,0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "8") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
                  (rule "eqClose" (formula "8") (term "1,0"))
                  (rule "concrete_impl_4" (formula "8") (term "0"))
                  (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "9"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0"))
                  (rule "polySimp_homoEq" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "1,1,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0"))
                  (rule "add_zero_right" (formula "7") (term "0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "1,0,1,0"))
                  (rule "add_literals" (formula "7") (term "0,1,0"))
                  (rule "mul_literals" (formula "7") (term "1,0"))
                  (rule "add_literals" (formula "7") (term "0"))
                  (rule "eqClose" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "all_unused" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "ex_pull_out3" (formula "24") (term "0"))
                  (rule "ex_pull_out2" (formula "23") (term "0"))
                  (rule "allLeft" (formula "25") (inst "t=j_0"))
                  (rule "replaceKnownSelect_taclet00120_17" (formula "25") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00120_18" (formula "25") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0,0,0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "25") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "25") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "25") (term "0,0,0"))
                  (rule "allLeft" (formula "15") (inst "t=j_0"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0"))
                  (rule "commute_or" (formula "15") (term "0,0,0"))
                  (rule "commute_or_2" (formula "15") (term "0,0"))
                  (rule "commute_or_2" (formula "15") (term "0"))
                  (rule "allLeft" (formula "21") (inst "t=q_0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,0"))
                  (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "19"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0,0,0") (ifseqformula "18"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "21") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "21") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "21") (term "0,0,0"))
                  (rule "allLeft" (formula "22") (inst "t=j_0"))
                  (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "0,0"))
                  (rule "commute_or_2" (formula "22") (term "0"))
                  (rule "allLeft" (formula "16") (inst "t=q_0"))
                  (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0,0"))
                  (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "20"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0,0,0") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "16") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "16") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "16") (term "0,0,0"))
                  (rule "allLeft" (formula "16") (inst "t=m_0"))
                  (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0"))
                  (rule "commute_or" (formula "16") (term "0,0,0"))
                  (rule "commute_or_2" (formula "16") (term "0,0"))
                  (rule "commute_or_2" (formula "16") (term "0"))
                  (rule "allLeft" (formula "29") (inst "t=q_0"))
                  (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                  (rule "pullOutSelect" (formula "29") (term "1,1,1,0") (inst "selectSK=arr_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "24"))
                  (rule "elementOfFreshLocs" (formula "29") (term "1,0,0"))
                  (rule "equalUnique" (formula "29") (term "0,1,0,0,0"))
                  (rule "concrete_not_2" (formula "29") (term "1,0,0,0"))
                  (rule "concrete_and_3" (formula "29") (term "0,0,0"))
                  (rule "replace_known_left" (formula "29") (term "0,1,1,0,0") (ifseqformula "9"))
                  (rule "concrete_not_1" (formula "29") (term "1,1,0,0"))
                  (rule "concrete_and_4" (formula "29") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "29") (term "0,0"))
                  (rule "applyEq" (formula "29") (term "2,0") (ifseqformula "20"))
                  (rule "elementOfUnion" (formula "29") (term "0,0"))
                  (rule "elementOfAllFields" (formula "29") (term "0,0,0"))
                  (rule "eqClose" (formula "29") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "29") (term "0,0"))
                  (rule "ifthenelse_true" (formula "29") (term "0"))
                  (rule "applyEqReverse" (formula "30") (term "1,1,1,0") (ifseqformula "29"))
                  (rule "hideAuxiliaryEq" (formula "29"))
                  (rule "commute_or_2" (formula "29") (term "0,0"))
                  (rule "commute_or_2" (formula "29") (term "0"))
                  (rule "allLeft" (formula "23") (inst "t=m_0"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
                  (rule "allLeft" (formula "31") (inst "t=m_0"))
                  (rule "replaceKnownSelect_taclet00120_14" (formula "31") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00120_15" (formula "31") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0"))
                  (rule "commute_or_2" (formula "23") (term "0,0"))
                  (rule "commute_or_2" (formula "23") (term "0"))
                  (rule "commute_or_2" (formula "30") (term "0,0"))
                  (rule "commute_or_2" (formula "30") (term "0"))
                  (rule "all_pull_out2" (formula "27") (term "0,0"))
                  (rule "all_pull_out3" (formula "26") (term "0,0"))
                  (rule "commute_or" (formula "26") (term "0,0,0"))
                  (rule "cut_direct" (formula "15") (term "1,0"))
                  (branch "CUT: self.size <= -1 + j_0 TRUE"
                     (rule "concrete_or_3" (formula "16") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "15"))
                     (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                     (rule "polySimp_elimOne" (formula "20") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "20"))
                     (rule "mul_literals" (formula "19") (term "0,0"))
                     (rule "add_zero_left" (formula "19") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                     (rule "mul_literals" (formula "19") (term "1"))
                     (rule "all_unused" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "27") (term "0,0,0"))
                     (rule "commute_or" (formula "27") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "28") (term "1,0,0,0"))
                     (rule "commute_or" (formula "28") (term "0,1,0,0,0"))
                     (rule "cnf_rightDist" (formula "28") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "28") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "28") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "27") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "27") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "27") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0"))
                     (rule "commute_or" (formula "27") (term "0,1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "28") (term "0,1,0,0,0,0"))
                     (rule "commute_or" (formula "28") (term "0,0,1,0,0,0,0"))
                     (rule "cut_direct" (formula "16") (term "1,0"))
                     (branch "CUT: self.size <= -1 + m_0 TRUE"
                        (rule "concrete_or_3" (formula "17") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "16"))
                        (rule "polySimp_mulComm0" (formula "21") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                        (rule "polySimp_elimOne" (formula "21") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "21"))
                        (rule "mul_literals" (formula "19") (term "0,0"))
                        (rule "add_zero_left" (formula "19") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                        (rule "mul_literals" (formula "19") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "19"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "1"))
                        (rule "mul_literals" (formula "18") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                        (rule "mul_literals" (formula "18") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "18"))
                        (rule "leq_literals" (formula "2") (term "0"))
                        (rule "concrete_or_1" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "all_unused" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "cut_direct" (formula "31") (term "1,0"))
                        (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 TRUE"
                           (rule "concrete_or_3" (formula "32") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "31"))
                           (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "2"))
                           (rule "andLeft" (formula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_literals" (formula "20") (term "0"))
                           (rule "leq_literals" (formula "20"))
                           (rule "closeFalse" (formula "20"))
                        )
                        (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 FALSE"
                           (rule "concrete_or_4" (formula "31") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "34"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "cut_direct" (formula "33") (term "1,0"))
                           (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + m_0 TRUE"
                              (rule "concrete_or_3" (formula "34") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "33"))
                              (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "3"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + m_0 FALSE"
                              (rule "concrete_or_4" (formula "33") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "35"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "allLeft" (formula "32") (inst "t=m_0"))
                              (rule "replaceKnownSelect_taclet00120_14" (formula "32") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00120_15" (formula "32") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "19"))
                              (rule "qeq_literals" (formula "32") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "32") (term "0,0"))
                              (rule "concrete_or_2" (formula "32") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "32") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                              (rule "add_literals" (formula "32") (term "0,0,1"))
                              (rule "leq_literals" (formula "32") (term "0,1"))
                              (rule "concrete_and_2" (formula "32") (term "1"))
                              (rule "concrete_or_4" (formula "32"))
                              (rule "inEqSimp_contradInEq0" (formula "32") (ifseqformula "3"))
                              (rule "andLeft" (formula "32"))
                              (rule "inEqSimp_homoInEq1" (formula "32"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                              (rule "mul_literals" (formula "32") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                              (rule "add_literals" (formula "32") (term "1,1,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0"))
                              (rule "add_zero_right" (formula "32") (term "0"))
                              (rule "leq_literals" (formula "32"))
                              (rule "closeFalse" (formula "32"))
                           )
                        )
                     )
                     (branch "CUT: self.size <= -1 + m_0 FALSE"
                        (rule "concrete_or_4" (formula "16") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "33"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "cut_direct" (formula "31") (term "1,0"))
                        (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 TRUE"
                           (rule "concrete_or_3" (formula "32") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "31"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "21"))
                           (rule "andLeft" (formula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "1,1,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0"))
                           (rule "add_literals" (formula "5") (term "0"))
                           (rule "leq_literals" (formula "5"))
                           (rule "closeFalse" (formula "5"))
                        )
                        (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 FALSE"
                           (rule "concrete_or_4" (formula "31") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "34"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "cut_direct" (formula "33") (term "1,0"))
                           (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + m_0 TRUE"
                              (rule "concrete_or_3" (formula "34") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "33"))
                              (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1"))
                              (rule "polySimp_rightDist" (formula "6") (term "1"))
                              (rule "mul_literals" (formula "6") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "6"))
                              (rule "andLeft" (formula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "1,1,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0"))
                              (rule "add_zero_right" (formula "3") (term "0"))
                              (rule "leq_literals" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                           (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + m_0 FALSE"
                              (rule "concrete_or_4" (formula "33") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "35"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "allLeft" (formula "32") (inst "t=m_0"))
                              (rule "replaceKnownSelect_taclet00120_14" (formula "32") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00120_15" (formula "32") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "8"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "32") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                              (rule "add_literals" (formula "32") (term "0,0,1"))
                              (rule "leq_literals" (formula "32") (term "0,1"))
                              (rule "concrete_and_2" (formula "32") (term "1"))
                              (rule "concrete_or_4" (formula "32"))
                              (rule "inEqSimp_contradInEq0" (formula "32") (term "1") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "32") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                              (rule "add_literals" (formula "32") (term "0,0,1"))
                              (rule "leq_literals" (formula "32") (term "0,1"))
                              (rule "concrete_and_2" (formula "32") (term "1"))
                              (rule "concrete_or_4" (formula "32"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "6"))
                              (rule "qeq_literals" (formula "32") (term "0"))
                              (rule "concrete_and_2" (formula "32"))
                              (rule "closeFalse" (formula "32"))
                           )
                        )
                     )
                  )
                  (branch "CUT: self.size <= -1 + j_0 FALSE"
                     (rule "concrete_or_4" (formula "15") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "32"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "27") (term "0,0,0"))
                     (rule "commute_or" (formula "27") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "28") (term "1,0,0,0"))
                     (rule "commute_or" (formula "28") (term "0,1,0,0,0"))
                     (rule "cnf_rightDist" (formula "28") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "28") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "28") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "27") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "27") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "27") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0"))
                     (rule "commute_or" (formula "27") (term "0,1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "28") (term "0,1,0,0,0,0"))
                     (rule "commute_or" (formula "28") (term "0,0,1,0,0,0,0"))
                     (rule "cut_direct" (formula "17") (term "1,0"))
                     (branch "CUT: self.size <= -1 + m_0 TRUE"
                        (rule "concrete_or_3" (formula "18") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "17"))
                        (rule "polySimp_mulComm0" (formula "21") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                        (rule "polySimp_elimOne" (formula "21") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "17"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "CUT: self.size <= -1 + m_0 FALSE"
                        (rule "concrete_or_4" (formula "17") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "33"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "cut_direct" (formula "31") (term "1,0"))
                        (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 TRUE"
                           (rule "concrete_or_3" (formula "32") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "31"))
                           (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0"))
                           (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                           (rule "all_unused" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "cut_direct" (formula "33") (term "1,0"))
                           (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + m_0 TRUE"
                              (rule "concrete_or_3" (formula "34") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "33"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1"))
                              (rule "polySimp_rightDist" (formula "7") (term "1"))
                              (rule "mul_literals" (formula "7") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "3"))
                              (rule "andLeft" (formula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                              (rule "add_literals" (formula "7") (term "1,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "leq_literals" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                           (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + m_0 FALSE"
                              (rule "concrete_or_4" (formula "33") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "35"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "33"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "allLeft" (formula "33") (inst "t=m_0"))
                              (rule "replaceKnownSelect_taclet00120_14" (formula "33") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00120_15" (formula "33") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "33") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "33") (term "0,0"))
                              (rule "concrete_or_2" (formula "33") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                              (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                              (rule "add_literals" (formula "33") (term "0,0,1"))
                              (rule "leq_literals" (formula "33") (term "0,1"))
                              (rule "concrete_and_2" (formula "33") (term "1"))
                              (rule "concrete_or_4" (formula "33"))
                              (rule "inEqSimp_contradInEq0" (formula "33") (ifseqformula "5"))
                              (rule "andLeft" (formula "33"))
                              (rule "inEqSimp_homoInEq1" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0"))
                              (rule "polySimp_addComm0" (formula "33") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                              (rule "add_literals" (formula "33") (term "1,1,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0"))
                              (rule "add_zero_right" (formula "33") (term "0"))
                              (rule "leq_literals" (formula "33"))
                              (rule "closeFalse" (formula "33"))
                           )
                        )
                        (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 FALSE"
                           (rule "concrete_or_4" (formula "31") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "34"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "cut_direct" (formula "33") (term "1,0"))
                           (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + m_0 TRUE"
                              (rule "concrete_or_3" (formula "34") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "33"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1"))
                              (rule "polySimp_rightDist" (formula "7") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                              (rule "mul_literals" (formula "7") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "4"))
                              (rule "andLeft" (formula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                              (rule "add_literals" (formula "7") (term "1,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "leq_literals" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                           (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + m_0 FALSE"
                              (rule "concrete_or_4" (formula "33") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "35"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "allLeft" (formula "32") (inst "t=m_0"))
                              (rule "replaceKnownSelect_taclet00120_14" (formula "32") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00120_15" (formula "32") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "32") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "32") (term "0,0"))
                              (rule "concrete_or_2" (formula "32") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "9"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "32") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                              (rule "add_literals" (formula "32") (term "0,0,1"))
                              (rule "leq_literals" (formula "32") (term "0,1"))
                              (rule "concrete_and_2" (formula "32") (term "1"))
                              (rule "concrete_or_4" (formula "32"))
                              (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "32"))
                              (rule "andLeft" (formula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0"))
                              (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                              (rule "add_literals" (formula "5") (term "1,1,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0"))
                              (rule "add_zero_right" (formula "5") (term "0"))
                              (rule "leq_literals" (formula "5"))
                              (rule "closeFalse" (formula "5"))
                           )
                        )
                     )
                  )
               )
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "8"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "7") (inst "iv=iv"))
                  (rule "andLeft" (formula "7"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "1,1,0,1"))
                  (rule "add_literals" (formula "7") (term "1,0,1"))
                  (rule "add_literals" (formula "7") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                  (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
                  (rule "eqClose" (formula "8") (term "1,0"))
                  (rule "concrete_impl_4" (formula "8") (term "0"))
                  (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "9"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0"))
                  (rule "polySimp_homoEq" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "1,1,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0"))
                  (rule "add_zero_right" (formula "7") (term "0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "0,0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "7") (term "1,0,1,0"))
                  (rule "add_literals" (formula "7") (term "0,1,0"))
                  (rule "mul_literals" (formula "7") (term "1,0"))
                  (rule "add_literals" (formula "7") (term "0"))
                  (rule "eqClose" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "all_unused" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "ex_pull_out3" (formula "24") (term "0"))
                  (rule "ex_pull_out2" (formula "23") (term "0"))
                  (rule "allLeft" (formula "25") (inst "t=j_0"))
                  (rule "replaceKnownSelect_taclet00120_17" (formula "25") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00120_18" (formula "25") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0,0,0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "25") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "25") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "25") (term "0,0,0"))
                  (rule "all_pull_out2" (formula "24") (term "0,0"))
                  (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "24") (term "1,0,0,0"))
                  (rule "commute_or" (formula "24") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "24") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "24") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "24") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "24") (term "0,1,0,0,0,0"))
                  (rule "commute_or" (formula "24") (term "0,0,1,0,0,0,0"))
                  (rule "all_pull_out3" (formula "23") (term "0,0"))
                  (rule "commute_or" (formula "23") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                  (rule "commute_or" (formula "23") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "23") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "23") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "23") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "commute_or" (formula "23") (term "0,1,0,0,0,0"))
                  (rule "allLeft" (formula "20") (inst "t=q_0"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,0"))
                  (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "18"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0,0,0") (ifseqformula "17"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,1,0,0,0"))
                  (rule "leq_literals" (formula "20") (term "0,1,0,0,0"))
                  (rule "concrete_and_2" (formula "20") (term "1,0,0,0"))
                  (rule "concrete_or_4" (formula "20") (term "0,0,0"))
                  (rule "allLeft" (formula "15") (inst "t=q_0"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0"))
                  (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "19"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0,0") (ifseqformula "18"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "15") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "15") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "15") (term "0,0,0"))
                  (rule "allLeft" (formula "21") (inst "t=j_0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "0,0"))
                  (rule "commute_or_2" (formula "21") (term "0"))
                  (rule "allLeft" (formula "15") (inst "t=j_0"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0"))
                  (rule "commute_or" (formula "15") (term "0,0,0"))
                  (rule "commute_or_2" (formula "15") (term "0,0"))
                  (rule "commute_or_2" (formula "15") (term "0"))
                  (rule "allLeft" (formula "28") (inst "t=q_0"))
                  (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                  (rule "pullOutSelect" (formula "28") (term "1,1,1,0") (inst "selectSK=arr_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "23"))
                  (rule "elementOfFreshLocs" (formula "28") (term "1,0,0"))
                  (rule "equalUnique" (formula "28") (term "0,1,0,0,0"))
                  (rule "concrete_not_2" (formula "28") (term "1,0,0,0"))
                  (rule "concrete_and_3" (formula "28") (term "0,0,0"))
                  (rule "replace_known_left" (formula "28") (term "0,1,1,0,0") (ifseqformula "9"))
                  (rule "concrete_not_1" (formula "28") (term "1,1,0,0"))
                  (rule "concrete_and_4" (formula "28") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "28") (term "0,0"))
                  (rule "applyEq" (formula "28") (term "2,0") (ifseqformula "18"))
                  (rule "elementOfUnion" (formula "28") (term "0,0"))
                  (rule "elementOfAllFields" (formula "28") (term "0,0,0"))
                  (rule "eqClose" (formula "28") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "28") (term "0,0"))
                  (rule "ifthenelse_true" (formula "28") (term "0"))
                  (rule "applyEqReverse" (formula "29") (term "1,1,1,0") (ifseqformula "28"))
                  (rule "hideAuxiliaryEq" (formula "28"))
                  (rule "commute_or_2" (formula "28") (term "0,0"))
                  (rule "commute_or_2" (formula "28") (term "0"))
                  (rule "allLeft" (formula "15") (inst "t=m_0"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0"))
                  (rule "commute_or" (formula "15") (term "0,0,0"))
                  (rule "commute_or_2" (formula "15") (term "0,0"))
                  (rule "commute_or_2" (formula "15") (term "0"))
                  (rule "allLeft" (formula "30") (inst "t=m_0"))
                  (rule "replaceKnownSelect_taclet00120_14" (formula "30") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00120_15" (formula "30") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0"))
                  (rule "commute_or_2" (formula "30") (term "0,0"))
                  (rule "commute_or_2" (formula "30") (term "0"))
                  (rule "allLeft" (formula "23") (inst "t=m_0"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
                  (rule "commute_or_2" (formula "23") (term "0,0"))
                  (rule "commute_or_2" (formula "23") (term "0"))
                  (rule "commute_and_2" (formula "27") (term "0,0,0"))
                  (rule "commute_and_2" (formula "26") (term "0,0,0"))
                  (rule "allLeft" (formula "28") (inst "t=m_0"))
                  (rule "replaceKnownSelect_taclet00120_14" (formula "28") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00120_15" (formula "28") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,1"))
                  (rule "leq_literals" (formula "28") (term "0,1"))
                  (rule "concrete_and_2" (formula "28") (term "1"))
                  (rule "concrete_or_4" (formula "28"))
                  (rule "inEqSimp_contradInEq0" (formula "28") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,1"))
                  (rule "leq_literals" (formula "28") (term "0,1"))
                  (rule "concrete_and_2" (formula "28") (term "1"))
                  (rule "concrete_or_4" (formula "28"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "28"))
                  (rule "qeq_literals" (formula "3") (term "0"))
                  (rule "concrete_and_2" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
            )
            (branch
               (rule "nnf_ex2all" (formula "25"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "cnf_eqv" (formula "19") (term "0"))
               (rule "nnf_notEx" (formula "19") (term "0,1,0"))
               (rule "nnf_notEx" (formula "19") (term "1,0,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,1,0,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,0"))
               (rule "distr_forallAnd" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "cut_direct" (formula "4") (term "0"))
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "ex_pull_out2" (formula "19") (term "0"))
                  (rule "ex_pull_out3" (formula "20") (term "0"))
                  (rule "all_pull_out3" (formula "19") (term "0,0"))
                  (rule "commute_or" (formula "19") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
                  (rule "commute_or" (formula "19") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "19") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "19") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "commute_or" (formula "19") (term "0,1,0,0,0,0"))
                  (rule "all_pull_out2" (formula "20") (term "0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "1,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,1,0,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,0,0,0,0"))
                  (rule "commute_and_2" (formula "19") (term "0,0,0"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "3") (inst "iv=iv"))
                  (rule "andLeft" (formula "3"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "1,1,0,1"))
                  (rule "add_literals" (formula "3") (term "1,0,1"))
                  (rule "add_literals" (formula "3") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                  (rule "applyEq" (formula "4") (term "0,0,1,0,0,1,0,0") (ifseqformula "5"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "1,0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "5"))
                  (rule "eqClose" (formula "4") (term "1,0"))
                  (rule "concrete_impl_4" (formula "4") (term "0"))
                  (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0"))
                  (rule "polySimp_homoEq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "1,0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "add_literals" (formula "3") (term "0,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,0"))
                  (rule "add_literals" (formula "3") (term "0"))
                  (rule "eqClose" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "all_unused" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "commute_and_2" (formula "20") (term "0,0,0"))
                  (rule "allLeft" (formula "1") (inst "t=q_0"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "concrete_or_2" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "1") (term "0,0,1") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "2") (term "0,1"))
                  (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "27"))
                  (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "7"))
                  (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "1") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "16"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfAllFields" (formula "1") (term "0,0,0"))
                  (rule "eqClose" (formula "1") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "1") (term "0,0"))
                  (rule "ifthenelse_true" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "2") (term "1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "0,1"))
                  (rule "cut_direct" (formula "1") (term "0"))
                  (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 TRUE"
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                      (opengoal " leq(int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                  self,                  BinarySearch::$size),      add(Z(neglit(1(#))), q_0))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,  (\\forall int n;     ((  (leq(n, Z(neglit(1(#))))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>       | geq(n,             add(Z(1(#)),                 int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                             self,                             BinarySearch::$size)))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>       | (!(  int::select(create(heapAfter_eliminateDuplicates,                                 sk_0),                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(n))            = int::select(heap,                          self,                          BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,  geq(length(int[]::select(heap,                           self,                           BinarySearch::$numbers)),      Z(1(#))),    strContent(sk_0)  = seqConcat(seqConcat(seqSingleton(C(3(8(#)))),                        seqConcat(seqSingleton(C(1(0(1(#))))),                                  seqConcat(seqSingleton(C(7(9(#)))),                                            seqConcat(seqSingleton(C(4(1(1(#))))),                                                      seqConcat(seqSingleton(C(9(9(#)))),                                                                seqConcat(seqSingleton(C(4(0(1(#))))),                                                                          seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                    seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                              seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                        seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                  seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                            seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                      seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                seqSingleton(C(2(3(#))))))))))))))))),              clTranslateInt(int::select(heap,                                         self,                                         BinarySearch::$query))),    boolean::select(heap,                    strPool(seqConcat(seqSingleton(C(3(8(#)))),                                      seqConcat(seqSingleton(C(1(0(1(#))))),                                                seqConcat(seqSingleton(C(7(9(#)))),                                                          seqConcat(seqSingleton(C(4(1(1(#))))),                                                                    seqConcat(seqSingleton(C(9(9(#)))),                                                                              seqConcat(seqSingleton(C(4(0(1(#))))),                                                                                        seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                  seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                            seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                      seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                                          seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                                    seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                              seqSingleton(C(2(3(#)))))))))))))))))),                    java.lang.Object::<created>)  = TRUE,    boolean::select(heap,                    int[]::select(heap,                                  self,                                  BinarySearch::$numbers),                    java.lang.Object::<created>)  = TRUE,  (  boolean::select(heap,                     strPool(seqConcat(seqSingleton(C(9(6(#)))),                                       seqConcat(seqSingleton(C(8(0(1(#))))),                                                 seqConcat(seqSingleton(C(5(0(1(#))))),                                                           seqConcat(seqSingleton(C(9(0(1(#))))),                                                                     seqConcat(seqSingleton(C(5(0(1(#))))),                                                                               seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                         seqConcat(seqSingleton(C(7(9(#)))),                                                                                                   seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                       seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                                                 seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                                           seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                                     seqConcat(seqSingleton(C(0(0(1(#))))),                                                                                                                                                               seqConcat(seqSingleton(C(7(1(1(#))))),                                                                                                                                                                         seqConcat(seqSingleton(C(2(1(1(#))))),                                                                                                                                                                                   seqConcat(seqSingleton(C(8(0(1(#))))),                                                                                                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                                                                                                       seqConcat(seqSingleton(C(9(9(#)))),                                                                                                                                                                                                                 seqConcat(seqSingleton(C(7(9(#)))),                                                                                                                                                                                                                           seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                                                                                                                                                     seqConcat(seqSingleton(C(1(0(1(#))))),                                                                                                                                                                                                                                               seqConcat(seqSingleton(C(5(1(1(#))))),                                                                                                                                                                                                                                                         seqSingleton(C(6(4(#))))))))))))))))))))))))))),                     java.lang.Object::<created>)   = TRUE)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  (  boolean::select(heap,                     self,                     java.lang.Object::<created>)   = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>,  (BinarySearch::exactInstance(self) = TRUE)<<origin(\"requires (implicit)\",\"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>>,  (\\forall int j;     \\forall int p;       (  geq(j,              add(Z(1(#)),                  int::select(heap,                              self,                              BinarySearch::$size)))        | leq(p, Z(neglit(1(#))))        | geq(p, j)        | leq(int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(p)),              int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)))))<<origin(\"requires @ file BinarySearch.java @ line 31\",\"[]\")>>,  geq(q_0, Z(0(#)))<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  geq(int::select(heap, self, BinarySearch::$size), q_0)<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  (  int::select(heap,                 int[]::select(heap,                               self,                               BinarySearch::$numbers),                 arr(q_0))   = int::select(heap, self, BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  wellFormed(anon_heap_eliminateDuplicates<<anonHeapFunction>>),  (\\forall int j;     \\forall int i;       (  leq(i, Z(neglit(1(#))))        | geq(j,              add(Z(1(#)),                  int::select(heap,                              self,                              BinarySearch::$size)))        | leq(j, i)        | geq(int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)),              int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(i)))))<<origin(\"requires @ file BinarySearch.java @ line 46\",\"[]\")>>,    anon(heap,         union(allFields(int[]::select(heap,                                       self,                                       BinarySearch::$numbers)),               singleton(self, BinarySearch::$size)),         anon_heap_eliminateDuplicates<<anonHeapFunction>>)  = heapAfter_eliminateDuplicates,  exc_0 = null,  (\\forall int e;     (\\exists int i;        (\\forall int i;           ((  (((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                  | geq(i, Z(0(#)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | geq(i,                        add(Z(1(#)),                            int::select(heap,                                        self,                                        BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | (!  int::select(heap,                                    int[]::select(heap,                                                  self,                                                  BinarySearch::$numbers),                                    arr(i))                      = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)             & ((  (leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(heap,                                       self,                                       BinarySearch::$size)))                 | !  int::select(heap,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | (  int::select(heapAfter_eliminateDuplicates,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>             & ((  ((leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(heap,                                       self,                                       BinarySearch::$size))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | leq(i,                       int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                   self,                                   BinarySearch::$size))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heap,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>,  (\\forall int e;     (\\exists int i;        (\\forall int i;           ((  (((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                  | geq(i, Z(0(#)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | geq(i,                        add(Z(1(#)),                            int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                        self,                                        BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | (!  int::select(heapAfter_eliminateDuplicates,                                    int[]::select(heap,                                                  self,                                                  BinarySearch::$numbers),                                    arr(i))                      = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)             & ((  ((leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                       self,                                       BinarySearch::$size))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | (  int::select(heap,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heapAfter_eliminateDuplicates,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>             & ((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | leq(i,                       int::select(heap,                                   self,                                   BinarySearch::$size))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | geq(i,                       add(Z(1(#)),                           int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                       self,                                       BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heapAfter_eliminateDuplicates,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>,  (\\forall int j;     \\forall int i;       (  leq(i, Z(neglit(1(#))))        | geq(j,              add(Z(1(#)),                  int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                              self,                              BinarySearch::$size)))        | leq(j, i)        | geq(int::select(heapAfter_eliminateDuplicates,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)),              add(Z(1(#)),                  int::select(heapAfter_eliminateDuplicates,                              int[]::select(heap,                                            self,                                            BinarySearch::$numbers),                              arr(i))))))<<origin(\"ensures @ file BinarySearch.java @ line 50\",\"[ensures @ file BinarySearch.java @ line 50]\")>> ==>  (  strPool(seqConcat(seqSingleton(C(3(8(#)))),                       seqConcat(seqSingleton(C(1(0(1(#))))),                                 seqConcat(seqSingleton(C(7(9(#)))),                                           seqConcat(seqSingleton(C(4(1(1(#))))),                                                     seqConcat(seqSingleton(C(9(9(#)))),                                                               seqConcat(seqSingleton(C(4(0(1(#))))),                                                                         seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                   seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                             seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                       seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                 seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                           seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                     seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                               seqSingleton(C(2(3(#))))))))))))))))))   = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  (  strPool(seqConcat(seqSingleton(C(9(6(#)))),                       seqConcat(seqSingleton(C(8(0(1(#))))),                                 seqConcat(seqSingleton(C(5(0(1(#))))),                                           seqConcat(seqSingleton(C(9(0(1(#))))),                                                     seqConcat(seqSingleton(C(5(0(1(#))))),                                                               seqConcat(seqSingleton(C(0(1(1(#))))),                                                                         seqConcat(seqSingleton(C(7(9(#)))),                                                                                   seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                       seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                                 seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                           seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                     seqConcat(seqSingleton(C(0(0(1(#))))),                                                                                                                                               seqConcat(seqSingleton(C(7(1(1(#))))),                                                                                                                                                         seqConcat(seqSingleton(C(2(1(1(#))))),                                                                                                                                                                   seqConcat(seqSingleton(C(8(0(1(#))))),                                                                                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                                                                                       seqConcat(seqSingleton(C(9(9(#)))),                                                                                                                                                                                                 seqConcat(seqSingleton(C(7(9(#)))),                                                                                                                                                                                                           seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                                                                                                                                     seqConcat(seqSingleton(C(1(0(1(#))))),                                                                                                                                                                                                                               seqConcat(seqSingleton(C(5(1(1(#))))),                                                                                                                                                                                                                                         seqSingleton(C(6(4(#)))))))))))))))))))))))))))   = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  (self<<origin(\"requires (implicit)\", \"[]\")>> = null)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>,  (  int[]::select(heap, self, BinarySearch::$numbers)   = null)<<origin(\"requires @ file BinarySearch.java @ line 30\",\"[]\")>>,  (sk_0 = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>")
                  )
                  (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 FALSE"
                     (rule "concrete_or_2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_leqRight" (formula "23"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                      (opengoal " geq(int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                  self,                  BinarySearch::$size),      q_0)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,  (\\forall int n;     ((  (leq(n, Z(neglit(1(#))))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>       | geq(n,             add(Z(1(#)),                 int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                             self,                             BinarySearch::$size)))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>       | (!(  int::select(create(heapAfter_eliminateDuplicates,                                 sk_0),                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(n))            = int::select(heap,                          self,                          BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,  geq(length(int[]::select(heap,                           self,                           BinarySearch::$numbers)),      Z(1(#))),    strContent(sk_0)  = seqConcat(seqConcat(seqSingleton(C(3(8(#)))),                        seqConcat(seqSingleton(C(1(0(1(#))))),                                  seqConcat(seqSingleton(C(7(9(#)))),                                            seqConcat(seqSingleton(C(4(1(1(#))))),                                                      seqConcat(seqSingleton(C(9(9(#)))),                                                                seqConcat(seqSingleton(C(4(0(1(#))))),                                                                          seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                    seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                              seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                        seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                  seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                            seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                      seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                seqSingleton(C(2(3(#))))))))))))))))),              clTranslateInt(int::select(heap,                                         self,                                         BinarySearch::$query))),    boolean::select(heap,                    strPool(seqConcat(seqSingleton(C(3(8(#)))),                                      seqConcat(seqSingleton(C(1(0(1(#))))),                                                seqConcat(seqSingleton(C(7(9(#)))),                                                          seqConcat(seqSingleton(C(4(1(1(#))))),                                                                    seqConcat(seqSingleton(C(9(9(#)))),                                                                              seqConcat(seqSingleton(C(4(0(1(#))))),                                                                                        seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                  seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                            seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                      seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                                          seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                                    seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                              seqSingleton(C(2(3(#)))))))))))))))))),                    java.lang.Object::<created>)  = TRUE,    boolean::select(heap,                    int[]::select(heap,                                  self,                                  BinarySearch::$numbers),                    java.lang.Object::<created>)  = TRUE,  (  boolean::select(heap,                     strPool(seqConcat(seqSingleton(C(9(6(#)))),                                       seqConcat(seqSingleton(C(8(0(1(#))))),                                                 seqConcat(seqSingleton(C(5(0(1(#))))),                                                           seqConcat(seqSingleton(C(9(0(1(#))))),                                                                     seqConcat(seqSingleton(C(5(0(1(#))))),                                                                               seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                         seqConcat(seqSingleton(C(7(9(#)))),                                                                                                   seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                       seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                                                 seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                                           seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                                     seqConcat(seqSingleton(C(0(0(1(#))))),                                                                                                                                                               seqConcat(seqSingleton(C(7(1(1(#))))),                                                                                                                                                                         seqConcat(seqSingleton(C(2(1(1(#))))),                                                                                                                                                                                   seqConcat(seqSingleton(C(8(0(1(#))))),                                                                                                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                                                                                                       seqConcat(seqSingleton(C(9(9(#)))),                                                                                                                                                                                                                 seqConcat(seqSingleton(C(7(9(#)))),                                                                                                                                                                                                                           seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                                                                                                                                                     seqConcat(seqSingleton(C(1(0(1(#))))),                                                                                                                                                                                                                                               seqConcat(seqSingleton(C(5(1(1(#))))),                                                                                                                                                                                                                                                         seqSingleton(C(6(4(#))))))))))))))))))))))))))),                     java.lang.Object::<created>)   = TRUE)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  (  boolean::select(heap,                     self,                     java.lang.Object::<created>)   = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>,  (BinarySearch::exactInstance(self) = TRUE)<<origin(\"requires (implicit)\",\"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>>,  (\\forall int j;     \\forall int p;       (  geq(j,              add(Z(1(#)),                  int::select(heap,                              self,                              BinarySearch::$size)))        | leq(p, Z(neglit(1(#))))        | geq(p, j)        | leq(int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(p)),              int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)))))<<origin(\"requires @ file BinarySearch.java @ line 31\",\"[]\")>>,  geq(q_0, Z(0(#)))<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  geq(int::select(heap, self, BinarySearch::$size), q_0)<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  (  int::select(heap,                 int[]::select(heap,                               self,                               BinarySearch::$numbers),                 arr(q_0))   = int::select(heap, self, BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  wellFormed(anon_heap_eliminateDuplicates<<anonHeapFunction>>),  (\\forall int j;     \\forall int i;       (  leq(i, Z(neglit(1(#))))        | geq(j,              add(Z(1(#)),                  int::select(heap,                              self,                              BinarySearch::$size)))        | leq(j, i)        | geq(int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)),              int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(i)))))<<origin(\"requires @ file BinarySearch.java @ line 46\",\"[]\")>>,    anon(heap,         union(allFields(int[]::select(heap,                                       self,                                       BinarySearch::$numbers)),               singleton(self, BinarySearch::$size)),         anon_heap_eliminateDuplicates<<anonHeapFunction>>)  = heapAfter_eliminateDuplicates,  exc_0 = null,  (\\forall int e;     (\\exists int i;        (\\forall int i;           ((  (((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                  | geq(i, Z(0(#)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | geq(i,                        add(Z(1(#)),                            int::select(heap,                                        self,                                        BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | (!  int::select(heap,                                    int[]::select(heap,                                                  self,                                                  BinarySearch::$numbers),                                    arr(i))                      = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)             & ((  (leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(heap,                                       self,                                       BinarySearch::$size)))                 | !  int::select(heap,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | (  int::select(heapAfter_eliminateDuplicates,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>             & ((  ((leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(heap,                                       self,                                       BinarySearch::$size))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | leq(i,                       int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                   self,                                   BinarySearch::$size))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heap,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>,  (\\forall int e;     (\\exists int i;        (\\forall int i;           ((  (((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                  | geq(i, Z(0(#)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | geq(i,                        add(Z(1(#)),                            int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                        self,                                        BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | (!  int::select(heapAfter_eliminateDuplicates,                                    int[]::select(heap,                                                  self,                                                  BinarySearch::$numbers),                                    arr(i))                      = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)             & ((  ((leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                       self,                                       BinarySearch::$size))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | (  int::select(heap,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heapAfter_eliminateDuplicates,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>             & ((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | leq(i,                       int::select(heap,                                   self,                                   BinarySearch::$size))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | geq(i,                       add(Z(1(#)),                           int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                       self,                                       BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heapAfter_eliminateDuplicates,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>,  (\\forall int j;     \\forall int i;       (  leq(i, Z(neglit(1(#))))        | geq(j,              add(Z(1(#)),                  int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                              self,                              BinarySearch::$size)))        | leq(j, i)        | geq(int::select(heapAfter_eliminateDuplicates,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)),              add(Z(1(#)),                  int::select(heapAfter_eliminateDuplicates,                              int[]::select(heap,                                            self,                                            BinarySearch::$numbers),                              arr(i))))))<<origin(\"ensures @ file BinarySearch.java @ line 50\",\"[ensures @ file BinarySearch.java @ line 50]\")>> ==>  (  int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                 int[]::select(heap,                               self,                               BinarySearch::$numbers),                 arr(q_0))   = int::select(heap, self, BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,  (  strPool(seqConcat(seqSingleton(C(3(8(#)))),                       seqConcat(seqSingleton(C(1(0(1(#))))),                                 seqConcat(seqSingleton(C(7(9(#)))),                                           seqConcat(seqSingleton(C(4(1(1(#))))),                                                     seqConcat(seqSingleton(C(9(9(#)))),                                                               seqConcat(seqSingleton(C(4(0(1(#))))),                                                                         seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                   seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                             seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                       seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                 seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                           seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                     seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                               seqSingleton(C(2(3(#))))))))))))))))))   = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  (  strPool(seqConcat(seqSingleton(C(9(6(#)))),                       seqConcat(seqSingleton(C(8(0(1(#))))),                                 seqConcat(seqSingleton(C(5(0(1(#))))),                                           seqConcat(seqSingleton(C(9(0(1(#))))),                                                     seqConcat(seqSingleton(C(5(0(1(#))))),                                                               seqConcat(seqSingleton(C(0(1(1(#))))),                                                                         seqConcat(seqSingleton(C(7(9(#)))),                                                                                   seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                       seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                                 seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                           seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                     seqConcat(seqSingleton(C(0(0(1(#))))),                                                                                                                                               seqConcat(seqSingleton(C(7(1(1(#))))),                                                                                                                                                         seqConcat(seqSingleton(C(2(1(1(#))))),                                                                                                                                                                   seqConcat(seqSingleton(C(8(0(1(#))))),                                                                                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                                                                                       seqConcat(seqSingleton(C(9(9(#)))),                                                                                                                                                                                                 seqConcat(seqSingleton(C(7(9(#)))),                                                                                                                                                                                                           seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                                                                                                                                     seqConcat(seqSingleton(C(1(0(1(#))))),                                                                                                                                                                                                                               seqConcat(seqSingleton(C(5(1(1(#))))),                                                                                                                                                                                                                                         seqSingleton(C(6(4(#)))))))))))))))))))))))))))   = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  (self<<origin(\"requires (implicit)\", \"[]\")>> = null)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>,  (  int[]::select(heap, self, BinarySearch::$numbers)   = null)<<origin(\"requires @ file BinarySearch.java @ line 30\",\"[]\")>>,  (sk_0 = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>")
                  )
               )
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "4"))
                  (rule "ex_pull_out2" (formula "19") (term "0"))
                  (rule "ex_pull_out3" (formula "20") (term "0"))
                  (rule "all_pull_out3" (formula "19") (term "0,0"))
                  (rule "commute_or" (formula "19") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
                  (rule "commute_or" (formula "19") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "19") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "19") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "commute_or" (formula "19") (term "0,1,0,0,0,0"))
                  (rule "all_pull_out2" (formula "20") (term "0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "1,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,1,0,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,0,0,0,0"))
                  (rule "commute_and_2" (formula "19") (term "0,0,0"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "3") (inst "iv=iv"))
                  (rule "andLeft" (formula "3"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,1,0,1"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "1,1,0,1"))
                  (rule "add_literals" (formula "3") (term "1,0,1"))
                  (rule "add_literals" (formula "3") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                  (rule "applyEq" (formula "4") (term "0,0,1,0,0,1,0,0") (ifseqformula "5"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "1,0,1,0,0,0,1,0,0"))
                  (rule "lenOfSeqSingleton" (formula "4") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                  (rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "5"))
                  (rule "eqClose" (formula "4") (term "1,0"))
                  (rule "concrete_impl_4" (formula "4") (term "0"))
                  (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0"))
                  (rule "polySimp_homoEq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "1,0,1,0"))
                  (rule "lenOfSeqSingleton" (formula "3") (term "0,0,1,0"))
                  (rule "add_literals" (formula "3") (term "0,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,0"))
                  (rule "add_literals" (formula "3") (term "0"))
                  (rule "eqClose" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "all_unused" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "commute_and_2" (formula "20") (term "0,0,0"))
                  (rule "allLeft" (formula "1") (inst "t=q_0"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "concrete_or_2" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "1") (term "0,0,1") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "2") (term "0,1"))
                  (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "28"))
                  (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "7"))
                  (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "1") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "16"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfAllFields" (formula "1") (term "0,0,0"))
                  (rule "eqClose" (formula "1") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "1") (term "0,0"))
                  (rule "ifthenelse_true" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "2") (term "1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "0,1"))
                  (rule "cut_direct" (formula "1") (term "0"))
                  (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 TRUE"
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                      (opengoal " leq(int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                  self,                  BinarySearch::$size),      add(Z(neglit(1(#))), q_0))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,  (\\forall int n;     ((  (leq(n, Z(neglit(1(#))))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>       | geq(n,             add(Z(1(#)),                 int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                             self,                             BinarySearch::$size)))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>       | (!(  int::select(create(heapAfter_eliminateDuplicates,                                 sk_0),                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(n))            = int::select(heap,                          self,                          BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,  geq(length(int[]::select(heap,                           self,                           BinarySearch::$numbers)),      Z(1(#))),    strContent(sk_0)  = seqConcat(seqConcat(seqSingleton(C(3(8(#)))),                        seqConcat(seqSingleton(C(1(0(1(#))))),                                  seqConcat(seqSingleton(C(7(9(#)))),                                            seqConcat(seqSingleton(C(4(1(1(#))))),                                                      seqConcat(seqSingleton(C(9(9(#)))),                                                                seqConcat(seqSingleton(C(4(0(1(#))))),                                                                          seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                    seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                              seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                        seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                  seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                            seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                      seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                seqSingleton(C(2(3(#))))))))))))))))),              clTranslateInt(int::select(heap,                                         self,                                         BinarySearch::$query))),    boolean::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                    strPool(seqConcat(seqSingleton(C(3(8(#)))),                                      seqConcat(seqSingleton(C(1(0(1(#))))),                                                seqConcat(seqSingleton(C(7(9(#)))),                                                          seqConcat(seqSingleton(C(4(1(1(#))))),                                                                    seqConcat(seqSingleton(C(9(9(#)))),                                                                              seqConcat(seqSingleton(C(4(0(1(#))))),                                                                                        seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                  seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                            seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                      seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                                          seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                                    seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                              seqSingleton(C(2(3(#)))))))))))))))))),                    java.lang.Object::<created>)  = TRUE,    boolean::select(heap,                    int[]::select(heap,                                  self,                                  BinarySearch::$numbers),                    java.lang.Object::<created>)  = TRUE,  (  boolean::select(heap,                     strPool(seqConcat(seqSingleton(C(9(6(#)))),                                       seqConcat(seqSingleton(C(8(0(1(#))))),                                                 seqConcat(seqSingleton(C(5(0(1(#))))),                                                           seqConcat(seqSingleton(C(9(0(1(#))))),                                                                     seqConcat(seqSingleton(C(5(0(1(#))))),                                                                               seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                         seqConcat(seqSingleton(C(7(9(#)))),                                                                                                   seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                       seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                                                 seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                                           seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                                     seqConcat(seqSingleton(C(0(0(1(#))))),                                                                                                                                                               seqConcat(seqSingleton(C(7(1(1(#))))),                                                                                                                                                                         seqConcat(seqSingleton(C(2(1(1(#))))),                                                                                                                                                                                   seqConcat(seqSingleton(C(8(0(1(#))))),                                                                                                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                                                                                                       seqConcat(seqSingleton(C(9(9(#)))),                                                                                                                                                                                                                 seqConcat(seqSingleton(C(7(9(#)))),                                                                                                                                                                                                                           seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                                                                                                                                                     seqConcat(seqSingleton(C(1(0(1(#))))),                                                                                                                                                                                                                                               seqConcat(seqSingleton(C(5(1(1(#))))),                                                                                                                                                                                                                                                         seqSingleton(C(6(4(#))))))))))))))))))))))))))),                     java.lang.Object::<created>)   = TRUE)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  (  boolean::select(heap,                     self,                     java.lang.Object::<created>)   = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>,  (BinarySearch::exactInstance(self) = TRUE)<<origin(\"requires (implicit)\",\"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>>,  (\\forall int j;     \\forall int p;       (  geq(j,              add(Z(1(#)),                  int::select(heap,                              self,                              BinarySearch::$size)))        | leq(p, Z(neglit(1(#))))        | geq(p, j)        | leq(int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(p)),              int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)))))<<origin(\"requires @ file BinarySearch.java @ line 31\",\"[]\")>>,  geq(q_0, Z(0(#)))<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  geq(int::select(heap, self, BinarySearch::$size), q_0)<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  (  int::select(heap,                 int[]::select(heap,                               self,                               BinarySearch::$numbers),                 arr(q_0))   = int::select(heap, self, BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  wellFormed(anon_heap_eliminateDuplicates<<anonHeapFunction>>),  (\\forall int j;     \\forall int i;       (  leq(i, Z(neglit(1(#))))        | geq(j,              add(Z(1(#)),                  int::select(heap,                              self,                              BinarySearch::$size)))        | leq(j, i)        | geq(int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)),              int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(i)))))<<origin(\"requires @ file BinarySearch.java @ line 46\",\"[]\")>>,    anon(heap,         union(allFields(int[]::select(heap,                                       self,                                       BinarySearch::$numbers)),               singleton(self, BinarySearch::$size)),         anon_heap_eliminateDuplicates<<anonHeapFunction>>)  = heapAfter_eliminateDuplicates,  exc_0 = null,  (\\forall int e;     (\\exists int i;        (\\forall int i;           ((  (((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                  | geq(i, Z(0(#)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | geq(i,                        add(Z(1(#)),                            int::select(heap,                                        self,                                        BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | (!  int::select(heap,                                    int[]::select(heap,                                                  self,                                                  BinarySearch::$numbers),                                    arr(i))                      = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)             & ((  (leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(heap,                                       self,                                       BinarySearch::$size)))                 | !  int::select(heap,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | (  int::select(heapAfter_eliminateDuplicates,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>             & ((  ((leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(heap,                                       self,                                       BinarySearch::$size))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | leq(i,                       int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                   self,                                   BinarySearch::$size))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heap,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>,  (\\forall int e;     (\\exists int i;        (\\forall int i;           ((  (((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                  | geq(i, Z(0(#)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | geq(i,                        add(Z(1(#)),                            int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                        self,                                        BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | (!  int::select(heapAfter_eliminateDuplicates,                                    int[]::select(heap,                                                  self,                                                  BinarySearch::$numbers),                                    arr(i))                      = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)             & ((  ((leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                       self,                                       BinarySearch::$size))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | (  int::select(heap,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heapAfter_eliminateDuplicates,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>             & ((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | leq(i,                       int::select(heap,                                   self,                                   BinarySearch::$size))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | geq(i,                       add(Z(1(#)),                           int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                       self,                                       BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heapAfter_eliminateDuplicates,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>,  (\\forall int j;     \\forall int i;       (  leq(i, Z(neglit(1(#))))        | geq(j,              add(Z(1(#)),                  int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                              self,                              BinarySearch::$size)))        | leq(j, i)        | geq(int::select(heapAfter_eliminateDuplicates,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)),              add(Z(1(#)),                  int::select(heapAfter_eliminateDuplicates,                              int[]::select(heap,                                            self,                                            BinarySearch::$numbers),                              arr(i))))))<<origin(\"ensures @ file BinarySearch.java @ line 50\",\"[ensures @ file BinarySearch.java @ line 50]\")>> ==>    boolean::select(heap,                    strPool(seqConcat(seqSingleton(C(3(8(#)))),                                      seqConcat(seqSingleton(C(1(0(1(#))))),                                                seqConcat(seqSingleton(C(7(9(#)))),                                                          seqConcat(seqSingleton(C(4(1(1(#))))),                                                                    seqConcat(seqSingleton(C(9(9(#)))),                                                                              seqConcat(seqSingleton(C(4(0(1(#))))),                                                                                        seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                  seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                            seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                      seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                                          seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                                    seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                              seqSingleton(C(2(3(#)))))))))))))))))),                    java.lang.Object::<created>)  = TRUE,  (  strPool(seqConcat(seqSingleton(C(3(8(#)))),                       seqConcat(seqSingleton(C(1(0(1(#))))),                                 seqConcat(seqSingleton(C(7(9(#)))),                                           seqConcat(seqSingleton(C(4(1(1(#))))),                                                     seqConcat(seqSingleton(C(9(9(#)))),                                                               seqConcat(seqSingleton(C(4(0(1(#))))),                                                                         seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                   seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                             seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                       seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                 seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                           seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                     seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                               seqSingleton(C(2(3(#))))))))))))))))))   = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  (  strPool(seqConcat(seqSingleton(C(9(6(#)))),                       seqConcat(seqSingleton(C(8(0(1(#))))),                                 seqConcat(seqSingleton(C(5(0(1(#))))),                                           seqConcat(seqSingleton(C(9(0(1(#))))),                                                     seqConcat(seqSingleton(C(5(0(1(#))))),                                                               seqConcat(seqSingleton(C(0(1(1(#))))),                                                                         seqConcat(seqSingleton(C(7(9(#)))),                                                                                   seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                       seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                                 seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                           seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                     seqConcat(seqSingleton(C(0(0(1(#))))),                                                                                                                                               seqConcat(seqSingleton(C(7(1(1(#))))),                                                                                                                                                         seqConcat(seqSingleton(C(2(1(1(#))))),                                                                                                                                                                   seqConcat(seqSingleton(C(8(0(1(#))))),                                                                                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                                                                                       seqConcat(seqSingleton(C(9(9(#)))),                                                                                                                                                                                                 seqConcat(seqSingleton(C(7(9(#)))),                                                                                                                                                                                                           seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                                                                                                                                     seqConcat(seqSingleton(C(1(0(1(#))))),                                                                                                                                                                                                                               seqConcat(seqSingleton(C(5(1(1(#))))),                                                                                                                                                                                                                                         seqSingleton(C(6(4(#)))))))))))))))))))))))))))   = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  (self<<origin(\"requires (implicit)\", \"[]\")>> = null)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>,  (  int[]::select(heap, self, BinarySearch::$numbers)   = null)<<origin(\"requires @ file BinarySearch.java @ line 30\",\"[]\")>>,  (sk_0 = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>")
                  )
                  (branch "CUT: self.size@anon_heap_eliminateDuplicates<<anonHeapFunction>> <= -1 + q_0 FALSE"
                     (rule "concrete_or_2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_leqRight" (formula "23"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                      (opengoal " geq(int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                  self,                  BinarySearch::$size),      q_0)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,  (\\forall int n;     ((  (leq(n, Z(neglit(1(#))))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>       | geq(n,             add(Z(1(#)),                 int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                             self,                             BinarySearch::$size)))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>       | (!(  int::select(create(heapAfter_eliminateDuplicates,                                 sk_0),                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(n))            = int::select(heap,                          self,                          BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[requires @ file BinarySearch.java @ line 83]\")>>)<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,  geq(length(int[]::select(heap,                           self,                           BinarySearch::$numbers)),      Z(1(#))),    strContent(sk_0)  = seqConcat(seqConcat(seqSingleton(C(3(8(#)))),                        seqConcat(seqSingleton(C(1(0(1(#))))),                                  seqConcat(seqSingleton(C(7(9(#)))),                                            seqConcat(seqSingleton(C(4(1(1(#))))),                                                      seqConcat(seqSingleton(C(9(9(#)))),                                                                seqConcat(seqSingleton(C(4(0(1(#))))),                                                                          seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                    seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                              seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                        seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                  seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                            seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                      seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                seqSingleton(C(2(3(#))))))))))))))))),              clTranslateInt(int::select(heap,                                         self,                                         BinarySearch::$query))),    boolean::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                    strPool(seqConcat(seqSingleton(C(3(8(#)))),                                      seqConcat(seqSingleton(C(1(0(1(#))))),                                                seqConcat(seqSingleton(C(7(9(#)))),                                                          seqConcat(seqSingleton(C(4(1(1(#))))),                                                                    seqConcat(seqSingleton(C(9(9(#)))),                                                                              seqConcat(seqSingleton(C(4(0(1(#))))),                                                                                        seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                  seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                            seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                      seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                                          seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                                    seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                              seqSingleton(C(2(3(#)))))))))))))))))),                    java.lang.Object::<created>)  = TRUE,    boolean::select(heap,                    int[]::select(heap,                                  self,                                  BinarySearch::$numbers),                    java.lang.Object::<created>)  = TRUE,  (  boolean::select(heap,                     strPool(seqConcat(seqSingleton(C(9(6(#)))),                                       seqConcat(seqSingleton(C(8(0(1(#))))),                                                 seqConcat(seqSingleton(C(5(0(1(#))))),                                                           seqConcat(seqSingleton(C(9(0(1(#))))),                                                                     seqConcat(seqSingleton(C(5(0(1(#))))),                                                                               seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                         seqConcat(seqSingleton(C(7(9(#)))),                                                                                                   seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                       seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                                                 seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                                           seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                                     seqConcat(seqSingleton(C(0(0(1(#))))),                                                                                                                                                               seqConcat(seqSingleton(C(7(1(1(#))))),                                                                                                                                                                         seqConcat(seqSingleton(C(2(1(1(#))))),                                                                                                                                                                                   seqConcat(seqSingleton(C(8(0(1(#))))),                                                                                                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                                                                                                       seqConcat(seqSingleton(C(9(9(#)))),                                                                                                                                                                                                                 seqConcat(seqSingleton(C(7(9(#)))),                                                                                                                                                                                                                           seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                                                                                                                                                     seqConcat(seqSingleton(C(1(0(1(#))))),                                                                                                                                                                                                                                               seqConcat(seqSingleton(C(5(1(1(#))))),                                                                                                                                                                                                                                                         seqSingleton(C(6(4(#))))))))))))))))))))))))))),                     java.lang.Object::<created>)   = TRUE)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  (  boolean::select(heap,                     self,                     java.lang.Object::<created>)   = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>,  (BinarySearch::exactInstance(self) = TRUE)<<origin(\"requires (implicit)\",\"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>>,  (\\forall int j;     \\forall int p;       (  geq(j,              add(Z(1(#)),                  int::select(heap,                              self,                              BinarySearch::$size)))        | leq(p, Z(neglit(1(#))))        | geq(p, j)        | leq(int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(p)),              int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)))))<<origin(\"requires @ file BinarySearch.java @ line 31\",\"[]\")>>,  geq(q_0, Z(0(#)))<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  geq(int::select(heap, self, BinarySearch::$size), q_0)<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  (  int::select(heap,                 int[]::select(heap,                               self,                               BinarySearch::$numbers),                 arr(q_0))   = int::select(heap, self, BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 32\",\"[]\")>>,  wellFormed(anon_heap_eliminateDuplicates<<anonHeapFunction>>),  (\\forall int j;     \\forall int i;       (  leq(i, Z(neglit(1(#))))        | geq(j,              add(Z(1(#)),                  int::select(heap,                              self,                              BinarySearch::$size)))        | leq(j, i)        | geq(int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)),              int::select(heap,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(i)))))<<origin(\"requires @ file BinarySearch.java @ line 46\",\"[]\")>>,    anon(heap,         union(allFields(int[]::select(heap,                                       self,                                       BinarySearch::$numbers)),               singleton(self, BinarySearch::$size)),         anon_heap_eliminateDuplicates<<anonHeapFunction>>)  = heapAfter_eliminateDuplicates,  exc_0 = null,  (\\forall int e;     (\\exists int i;        (\\forall int i;           ((  (((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                  | geq(i, Z(0(#)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | geq(i,                        add(Z(1(#)),                            int::select(heap,                                        self,                                        BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | (!  int::select(heap,                                    int[]::select(heap,                                                  self,                                                  BinarySearch::$numbers),                                    arr(i))                      = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)             & ((  (leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(heap,                                       self,                                       BinarySearch::$size)))                 | !  int::select(heap,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | (  int::select(heapAfter_eliminateDuplicates,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>             & ((  ((leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(heap,                                       self,                                       BinarySearch::$size))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | leq(i,                       int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                   self,                                   BinarySearch::$size))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heap,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>,  (\\forall int e;     (\\exists int i;        (\\forall int i;           ((  (((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                  | geq(i, Z(0(#)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | geq(i,                        add(Z(1(#)),                            int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                        self,                                        BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                  | (!  int::select(heapAfter_eliminateDuplicates,                                    int[]::select(heap,                                                  self,                                                  BinarySearch::$numbers),                                    arr(i))                      = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)             & ((  ((leq(i, Z(neglit(1(#))))                 | geq(i,                       add(Z(1(#)),                           int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                       self,                                       BinarySearch::$size))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | (  int::select(heap,                                  int[]::select(heap,                                                self,                                                BinarySearch::$numbers),                                  arr(i))                    = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heapAfter_eliminateDuplicates,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>             & ((  ((leq(i, Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>                 | leq(i,                       int::select(heap,                                   self,                                   BinarySearch::$size))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | geq(i,                       add(Z(1(#)),                           int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                                       self,                                       BinarySearch::$size)))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>                 | (!  int::select(heapAfter_eliminateDuplicates,                                   int[]::select(heap,                                                 self,                                                 BinarySearch::$numbers),                                   arr(i))                     = e)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>))<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[]\")>>)<<origin(\"ensures @ file BinarySearch.java @ line 47\",\"[ensures @ file BinarySearch.java @ line 47]\")>>,  (\\forall int j;     \\forall int i;       (  leq(i, Z(neglit(1(#))))        | geq(j,              add(Z(1(#)),                  int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                              self,                              BinarySearch::$size)))        | leq(j, i)        | geq(int::select(heapAfter_eliminateDuplicates,                          int[]::select(heap,                                        self,                                        BinarySearch::$numbers),                          arr(j)),              add(Z(1(#)),                  int::select(heapAfter_eliminateDuplicates,                              int[]::select(heap,                                            self,                                            BinarySearch::$numbers),                              arr(i))))))<<origin(\"ensures @ file BinarySearch.java @ line 50\",\"[ensures @ file BinarySearch.java @ line 50]\")>> ==>  (  int::select(anon_heap_eliminateDuplicates<<anonHeapFunction>>,                 int[]::select(heap,                               self,                               BinarySearch::$numbers),                 arr(q_0))   = int::select(heap, self, BinarySearch::$query))<<origin(\"requires @ file BinarySearch.java @ line 83\",\"[]\")>>,    boolean::select(heap,                    strPool(seqConcat(seqSingleton(C(3(8(#)))),                                      seqConcat(seqSingleton(C(1(0(1(#))))),                                                seqConcat(seqSingleton(C(7(9(#)))),                                                          seqConcat(seqSingleton(C(4(1(1(#))))),                                                                    seqConcat(seqSingleton(C(9(9(#)))),                                                                              seqConcat(seqSingleton(C(4(0(1(#))))),                                                                                        seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                  seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                            seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                      seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                                          seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                                    seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                                              seqSingleton(C(2(3(#)))))))))))))))))),                    java.lang.Object::<created>)  = TRUE,  (  strPool(seqConcat(seqSingleton(C(3(8(#)))),                       seqConcat(seqSingleton(C(1(0(1(#))))),                                 seqConcat(seqSingleton(C(7(9(#)))),                                           seqConcat(seqSingleton(C(4(1(1(#))))),                                                     seqConcat(seqSingleton(C(9(9(#)))),                                                               seqConcat(seqSingleton(C(4(0(1(#))))),                                                                         seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                   seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                             seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                       seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                 seqConcat(seqSingleton(C(2(0(1(#))))),                                                                                                                           seqConcat(seqSingleton(C(1(1(1(#))))),                                                                                                                                     seqConcat(seqSingleton(C(4(1(1(#))))),                                                                                                                                               seqSingleton(C(2(3(#))))))))))))))))))   = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  (  strPool(seqConcat(seqSingleton(C(9(6(#)))),                       seqConcat(seqSingleton(C(8(0(1(#))))),                                 seqConcat(seqSingleton(C(5(0(1(#))))),                                           seqConcat(seqSingleton(C(9(0(1(#))))),                                                     seqConcat(seqSingleton(C(5(0(1(#))))),                                                               seqConcat(seqSingleton(C(0(1(1(#))))),                                                                         seqConcat(seqSingleton(C(7(9(#)))),                                                                                   seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                       seqConcat(seqSingleton(C(0(1(1(#))))),                                                                                                                 seqConcat(seqSingleton(C(3(0(1(#))))),                                                                                                                           seqConcat(seqSingleton(C(2(3(#)))),                                                                                                                                     seqConcat(seqSingleton(C(0(0(1(#))))),                                                                                                                                               seqConcat(seqSingleton(C(7(1(1(#))))),                                                                                                                                                         seqConcat(seqSingleton(C(2(1(1(#))))),                                                                                                                                                                   seqConcat(seqSingleton(C(8(0(1(#))))),                                                                                                                                                                             seqConcat(seqSingleton(C(5(0(1(#))))),                                                                                                                                                                                       seqConcat(seqSingleton(C(9(9(#)))),                                                                                                                                                                                                 seqConcat(seqSingleton(C(7(9(#)))),                                                                                                                                                                                                           seqConcat(seqSingleton(C(6(1(1(#))))),                                                                                                                                                                                                                     seqConcat(seqSingleton(C(1(0(1(#))))),                                                                                                                                                                                                                               seqConcat(seqSingleton(C(5(1(1(#))))),                                                                                                                                                                                                                                         seqSingleton(C(6(4(#)))))))))))))))))))))))))))   = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>,  (self<<origin(\"requires (implicit)\", \"[]\")>> = null)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>,  (  int[]::select(heap, self, BinarySearch::$numbers)   = null)<<origin(\"requires @ file BinarySearch.java @ line 30\",\"[]\")>>,  (sk_0 = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 33, ensures (implicit)]\")>>")
                  )
               )
            )
         )
         (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) FALSE"
            (rule "allRight" (formula "22") (inst "sk=j_0"))
            (rule "allRight" (formula "22") (inst "sk=i_0"))
            (rule "orRight" (formula "22"))
            (rule "orRight" (formula "22"))
            (rule "orRight" (formula "22"))
            (rule "inEqSimp_geqRight" (formula "25"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_leqRight" (formula "25"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_geqRight" (formula "25"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "25"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "mul_literals" (formula "4") (term "0,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "ifthenelse_split" (formula "8") (term "2,0,0"))
            (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) TRUE"
               (rule "replace_known_left" (formula "5") (term "0,2,0,0") (ifseqformula "8"))
               (rule "ifthenelse_true" (formula "5") (term "2,0,0"))
               (rule "replace_known_left" (formula "24") (term "0,2,0,0") (ifseqformula "8"))
               (rule "ifthenelse_true" (formula "24") (term "2,0,0"))
               (rule "elementOfUnion" (formula "9") (term "0,0"))
               (rule "elementOfAllFields" (formula "9") (term "0,0,0"))
               (rule "eqSymm" (formula "9") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "9") (term "1,0,0"))
               (rule "equalUnique" (formula "9") (term "1,1,0,0"))
               (rule "concrete_and_4" (formula "9") (term "1,0,0"))
               (rule "concrete_or_4" (formula "9") (term "0,0"))
               (rule "sortsDisjointModuloNull" (formula "9") (term "0,0"))
               (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "30"))
               (rule "concrete_and_2" (formula "9") (term "0,0"))
               (rule "ifthenelse_false" (formula "9") (term "0"))
               (rule "applyEqReverse" (formula "7") (term "0,1,1") (ifseqformula "9"))
               (rule "applyEqReverse" (formula "32") (term "1,1,0,1,1") (ifseqformula "9"))
               (rule "hideAuxiliaryEq" (formula "9"))
               (rule "elementOfUnion" (formula "5") (term "0,0"))
               (rule "elementOfAllFields" (formula "5") (term "0,0,0"))
               (rule "eqSymm" (formula "5") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "5") (term "1,0,0"))
               (rule "eqClose" (formula "5") (term "0,1,0,0"))
               (rule "concrete_and_1" (formula "5") (term "1,0,0"))
               (rule "equalUnique" (formula "5") (term "1,0,0"))
               (rule "concrete_or_4" (formula "5") (term "0,0"))
               (rule "sortsDisjointModuloNull" (formula "5") (term "0,0"))
               (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "28"))
               (rule "concrete_and_4" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "applyEqReverse" (formula "31") (term "1,0,1,0,1,1") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "31") (term "1,1,1,1,0,0,0,1") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "31") (term "0,0,0") (ifseqformula "5"))
               (rule "applyEqReverse" (formula "31") (term "1,0,1,0,0,0,1") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "replace_known_right" (formula "30") (term "0,0") (ifseqformula "28"))
               (rule "concrete_not_2" (formula "30") (term "0"))
               (rule "concrete_and_1" (formula "30"))
               (rule "elementOfUnion" (formula "22") (term "0,0"))
               (rule "elementOfAllFields" (formula "22") (term "0,0,0"))
               (rule "eqSymm" (formula "22") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "22") (term "1,0,0"))
               (rule "eqClose" (formula "22") (term "1,1,0,0"))
               (rule "concrete_and_3" (formula "22") (term "1,0,0"))
               (rule "eqClose" (formula "22") (term "1,0,0"))
               (rule "concrete_or_3" (formula "22") (term "0,0"))
               (rule "ifthenelse_true" (formula "22") (term "0"))
               (rule "applyEqReverse" (formula "30") (term "1,1,1,0,0,0,0") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "30") (term "1,1,0,0,1") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "24") (term "1,1,1,0,0,0,0") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "23") (term "1,1,0,0,0,0") (ifseqformula "22"))
               (rule "hideAuxiliaryEq" (formula "22"))
               (rule "allLeft" (formula "15") (inst "t=j_0"))
               (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "15") (term "0,0,0,0,0"))
               (rule "concrete_and_2" (formula "15") (term "0,0,0,0"))
               (rule "concrete_or_2" (formula "15") (term "0,0,0"))
               (rule "andRight" (formula "30"))
               (branch
                  (rule "allRight" (formula "30") (inst "sk=j_1"))
                  (rule "allRight" (formula "30") (inst "sk=m_0"))
                  (rule "orRight" (formula "30"))
                  (rule "orRight" (formula "30"))
                  (rule "orRight" (formula "30"))
                  (rule "inEqSimp_leqRight" (formula "33"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_geqRight" (formula "33"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "32"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "33"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfCreate" (formula "4"))
                  (rule "equalUnique" (formula "4") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "4") (term "0,0"))
                  (rule "ifthenelse_false" (formula "4") (term "0"))
                  (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "26"))
                  (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                  (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                  (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                  (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                  (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "4") (term "0,0"))
                  (rule "ifthenelse_true" (formula "4") (term "0"))
                  (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "inEqSimp_commuteGeq" (formula "4"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                  (rule "mul_literals" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                  (rule "simplifySelectOfCreate" (formula "5"))
                  (rule "equalUnique" (formula "5") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "5") (term "0,0"))
                  (rule "ifthenelse_false" (formula "5") (term "0"))
                  (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "27"))
                  (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                  (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                  (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                  (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                  (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                  (rule "concrete_or_1" (formula "5") (term "0,0"))
                  (rule "ifthenelse_true" (formula "5") (term "0"))
                  (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                  (rule "hideAuxiliaryEq" (formula "5"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "cut_direct" (formula "13") (term "0"))
                  (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "cnf_eqv" (formula "28") (term "0"))
                     (rule "nnf_notEx" (formula "28") (term "0,1,0"))
                     (rule "nnf_notEx" (formula "28") (term "1,0,0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,0,1,0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,1,0,0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0,1,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0,1,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0,1,0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0,0"))
                     (rule "distr_forallAnd" (formula "28"))
                     (rule "andLeft" (formula "28"))
                     (rule "allLeft" (formula "12") (inst "t=j_0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "12") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "12") (term "0,0,0"))
                     (rule "allLeft" (formula "20") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                     (rule "add_literals" (formula "20") (term "0,0,1"))
                     (rule "leq_literals" (formula "20") (term "0,1"))
                     (rule "concrete_and_2" (formula "20") (term "1"))
                     (rule "concrete_or_4" (formula "20"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "20") (term "0,0"))
                     (rule "concrete_and_2" (formula "20") (term "0"))
                     (rule "concrete_or_2" (formula "20"))
                     (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "20"))
                     (rule "andLeft" (formula "8"))
                     (rule "inEqSimp_homoInEq1" (formula "8"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "1,1,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0"))
                     (rule "add_zero_right" (formula "8") (term "0"))
                     (rule "leq_literals" (formula "8"))
                     (rule "closeFalse" (formula "8"))
                  )
                  (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "13"))
                     (rule "cnf_eqv" (formula "28") (term "0"))
                     (rule "nnf_notEx" (formula "28") (term "0,1,0"))
                     (rule "nnf_notEx" (formula "28") (term "1,0,0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,0,1,0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,1,0,0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0,1,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0,1,0"))
                     (rule "add_literals" (formula "28") (term "0,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0,1,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,0,0,1,0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "28") (term "0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0,0"))
                     (rule "distr_forallAnd" (formula "28"))
                     (rule "andLeft" (formula "28"))
                     (rule "allLeft" (formula "12") (inst "t=j_0"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "12") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "12") (term "0,0,0"))
                     (rule "allLeft" (formula "20") (inst "t=i_0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "20") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "20") (term "0,0"))
                     (rule "concrete_or_2" (formula "20") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                     (rule "add_literals" (formula "20") (term "0,0,1"))
                     (rule "leq_literals" (formula "20") (term "0,1"))
                     (rule "concrete_and_2" (formula "20") (term "1"))
                     (rule "concrete_or_4" (formula "20"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "8"))
                     (rule "andLeft" (formula "20"))
                     (rule "inEqSimp_homoInEq1" (formula "20"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "1,1,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0"))
                     (rule "add_zero_right" (formula "20") (term "0"))
                     (rule "leq_literals" (formula "20"))
                     (rule "closeFalse" (formula "20"))
                  )
               )
               (branch
                  (rule "nnf_ex2all" (formula "30"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                  (rule "cut_direct" (formula "9") (term "0"))
                  (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "cnf_eqv" (formula "24") (term "0"))
                     (rule "nnf_notEx" (formula "24") (term "1,0,0"))
                     (rule "nnf_notEx" (formula "24") (term "0,1,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,1,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,1,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0"))
                     (rule "distr_forallAnd" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "allLeft" (formula "8") (inst "t=j_0"))
                     (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "8") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "8") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "8") (term "0,0,0"))
                     (rule "allLeft" (formula "16") (inst "t=i_0"))
                     (rule "inEqSimp_commuteLeq" (formula "16") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "16") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "16") (term "0,0"))
                     (rule "concrete_or_2" (formula "16") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "leq_literals" (formula "16") (term "0,1"))
                     (rule "concrete_and_2" (formula "16") (term "1"))
                     (rule "concrete_or_4" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "4"))
                     (rule "andLeft" (formula "16"))
                     (rule "inEqSimp_homoInEq1" (formula "16"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "1,1,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0"))
                     (rule "add_literals" (formula "16") (term "0"))
                     (rule "leq_literals" (formula "16"))
                     (rule "closeFalse" (formula "16"))
                  )
                  (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "9"))
                     (rule "cnf_eqv" (formula "24") (term "0"))
                     (rule "nnf_notEx" (formula "24") (term "0,1,0"))
                     (rule "nnf_notEx" (formula "24") (term "1,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,1,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,0"))
                     (rule "distr_forallAnd" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "allLeft" (formula "8") (inst "t=j_0"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "8") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "8") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "8") (term "0,0,0"))
                     (rule "allLeft" (formula "16") (inst "t=i_0"))
                     (rule "inEqSimp_commuteLeq" (formula "16") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "16") (term "0,1,0"))
                     (rule "concrete_and_2" (formula "16") (term "1,0"))
                     (rule "concrete_or_4" (formula "16") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "leq_literals" (formula "16") (term "0,1"))
                     (rule "concrete_and_2" (formula "16") (term "1"))
                     (rule "concrete_or_4" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "16") (term "0"))
                     (rule "concrete_and_2" (formula "16"))
                     (rule "closeFalse" (formula "16"))
                  )
               )
            )
            (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) FALSE"
               (rule "elementOfAllLocs" (formula "8") (term "0,0"))
               (rule "ifthenelse_true" (formula "8") (term "0"))
               (rule "allRight" (formula "26") (inst "sk=j_1"))
               (rule "allRight" (formula "26") (inst "sk=i_1"))
               (rule "orRight" (formula "26"))
               (rule "orRight" (formula "26"))
               (rule "orRight" (formula "26"))
               (rule "applyEqReverse" (formula "35") (term "1,1,0,1,1") (ifseqformula "8"))
               (rule "applyEqReverse" (formula "7") (term "0,1,1") (ifseqformula "8"))
               (rule "hideAuxiliaryEq" (formula "8"))
               (rule "inEqSimp_geqRight" (formula "28"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "28"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "27"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "28"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "ifthenelse_split" (formula "26") (term "2,0,0"))
               (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) TRUE"
                  (rule "replace_known_left" (formula "9") (term "0,2,0,0") (ifseqformula "26"))
                  (rule "ifthenelse_true" (formula "9") (term "2,0,0"))
                  (rule "elementOfUnion" (formula "27") (term "0,0"))
                  (rule "elementOfAllFields" (formula "27") (term "0,0,0"))
                  (rule "eqSymm" (formula "27") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "27") (term "1,0,0"))
                  (rule "eqClose" (formula "27") (term "1,1,0,0"))
                  (rule "concrete_and_3" (formula "27") (term "1,0,0"))
                  (rule "eqClose" (formula "27") (term "1,0,0"))
                  (rule "concrete_or_3" (formula "27") (term "0,0"))
                  (rule "ifthenelse_true" (formula "27") (term "0"))
                  (rule "applyEqReverse" (formula "28") (term "1,1,0,0,0,0") (ifseqformula "27"))
                  (rule "applyEqReverse" (formula "35") (term "1,1,1,0,0,0,0,1") (ifseqformula "27"))
                  (rule "applyEqReverse" (formula "35") (term "1,1,0,0,1,1") (ifseqformula "27"))
                  (rule "applyEqReverse" (formula "29") (term "1,1,1,0,0,0,0") (ifseqformula "27"))
                  (rule "hideAuxiliaryEq" (formula "27"))
                  (rule "elementOfUnion" (formula "9") (term "0,0"))
                  (rule "elementOfAllFields" (formula "9") (term "0,0,0"))
                  (rule "eqSymm" (formula "9") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "9") (term "1,0,0"))
                  (rule "eqClose" (formula "9") (term "0,1,0,0"))
                  (rule "concrete_and_1" (formula "9") (term "1,0,0"))
                  (rule "equalUnique" (formula "9") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "9") (term "0,0"))
                  (rule "sortsDisjointModuloNull" (formula "9") (term "0,0"))
                  (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "32"))
                  (rule "concrete_and_2" (formula "9") (term "0,0"))
                  (rule "ifthenelse_false" (formula "9") (term "0"))
                  (rule "applyEqReverse" (formula "34") (term "1,1,1,1,0,0,0,1") (ifseqformula "9"))
                  (rule "applyEqReverse" (formula "34") (term "0,0,0") (ifseqformula "9"))
                  (rule "applyEqReverse" (formula "34") (term "1,0,1,0,1,1") (ifseqformula "9"))
                  (rule "applyEqReverse" (formula "34") (term "1,0,1,0,0,0,1") (ifseqformula "9"))
                  (rule "hideAuxiliaryEq" (formula "9"))
                  (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "31"))
                  (rule "concrete_not_2" (formula "33") (term "0"))
                  (rule "concrete_and_1" (formula "33"))
                  (rule "allLeft" (formula "18") (inst "t=j_1"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0,0,0,0,0"))
                  (rule "allLeft" (formula "19") (inst "t=j_0"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "19") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "19") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "19") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "18") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "18") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "18") (term "0,0,0"))
                  (rule "cut_direct" (formula "11") (term "0"))
                  (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "andRight" (formula "35"))
                     (branch
                        (rule "allRight" (formula "35") (inst "sk=j_2"))
                        (rule "allRight" (formula "35") (inst "sk=m_0"))
                        (rule "orRight" (formula "35"))
                        (rule "orRight" (formula "35"))
                        (rule "orRight" (formula "35"))
                        (rule "inEqSimp_leqRight" (formula "38"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "38"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "37"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "38"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "30"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "4") (term "0,0"))
                        (rule "ifthenelse_true" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfCreate" (formula "5"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "31"))
                        (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                        (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                        (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "5") (term "0,0"))
                        (rule "ifthenelse_true" (formula "5") (term "0"))
                        (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "cnf_eqv" (formula "33") (term "0"))
                        (rule "nnf_notEx" (formula "33") (term "0,1,0"))
                        (rule "nnf_notEx" (formula "33") (term "1,0,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,1,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,1,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,1,0,0"))
                        (rule "distr_forallAnd" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "allLeft" (formula "32") (inst "t=j_0"))
                        (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "33") (inst "t=j_1"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                        (rule "andLeft" (formula "15"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "15") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "1,1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,1,0,1"))
                        (rule "add_literals" (formula "15") (term "1,0,1"))
                        (rule "add_literals" (formula "15") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0"))
                        (rule "polySimp_homoEq" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0"))
                        (rule "add_zero_right" (formula "15") (term "0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "15") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "1,0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "15") (term "0,0,1,0"))
                        (rule "add_literals" (formula "15") (term "0,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,0"))
                        (rule "add_literals" (formula "15") (term "0"))
                        (rule "eqClose" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                        (rule "eqClose" (formula "15") (term "1,0"))
                        (rule "concrete_impl_4" (formula "15") (term "0"))
                        (rule "all_unused" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "allLeft" (formula "24") (inst "t=i_0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                        (rule "inEqSimp_contradInEq0" (formula "24") (term "1") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                        (rule "add_literals" (formula "24") (term "0,0,1"))
                        (rule "leq_literals" (formula "24") (term "0,1"))
                        (rule "concrete_and_2" (formula "24") (term "1"))
                        (rule "concrete_or_4" (formula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "24") (term "0,0"))
                        (rule "concrete_and_2" (formula "24") (term "0"))
                        (rule "concrete_or_2" (formula "24"))
                        (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "24"))
                        (rule "andLeft" (formula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "12"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                        (rule "add_literals" (formula "12") (term "1,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0"))
                        (rule "add_zero_right" (formula "12") (term "0"))
                        (rule "leq_literals" (formula "12"))
                        (rule "closeFalse" (formula "12"))
                     )
                     (branch
                        (rule "nnf_ex2all" (formula "35"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "cnf_eqv" (formula "29") (term "0"))
                        (rule "nnf_notEx" (formula "29") (term "0,1,0"))
                        (rule "nnf_notEx" (formula "29") (term "1,0,0"))
                        (rule "nnf_notAnd" (formula "29") (term "0,0,1,0"))
                        (rule "nnf_notAnd" (formula "29") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "29") (term "0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,1,0"))
                        (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0"))
                        (rule "nnf_notAnd" (formula "29") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "29") (term "0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,1,0,0"))
                        (rule "distr_forallAnd" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "allLeft" (formula "28") (inst "t=j_0"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "29") (inst "t=j_1"))
                        (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                        (rule "allLeft" (formula "20") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "20") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "20") (term "0,0"))
                        (rule "concrete_or_2" (formula "20") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "20") (term "0,0,1"))
                        (rule "leq_literals" (formula "20") (term "0,1"))
                        (rule "concrete_and_2" (formula "20") (term "1"))
                        (rule "concrete_or_4" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "20"))
                        (rule "andLeft" (formula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "8"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "1,1,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0"))
                        (rule "add_literals" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                  )
                  (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "11"))
                     (rule "andRight" (formula "36"))
                     (branch
                        (rule "allRight" (formula "36") (inst "sk=j_2"))
                        (rule "allRight" (formula "36") (inst "sk=m_0"))
                        (rule "orRight" (formula "36"))
                        (rule "orRight" (formula "36"))
                        (rule "orRight" (formula "36"))
                        (rule "inEqSimp_leqRight" (formula "39"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "39"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "38"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "39"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "30"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "4") (term "0,0"))
                        (rule "ifthenelse_true" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfCreate" (formula "5"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "31"))
                        (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                        (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                        (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "5") (term "0,0"))
                        (rule "ifthenelse_true" (formula "5") (term "0"))
                        (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "cnf_eqv" (formula "33") (term "0"))
                        (rule "nnf_notEx" (formula "33") (term "0,1,0"))
                        (rule "nnf_notEx" (formula "33") (term "1,0,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,1,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0,1,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0,0"))
                        (rule "distr_forallAnd" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "allLeft" (formula "32") (inst "t=j_0"))
                        (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "33") (inst "t=j_1"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                        (rule "allLeft" (formula "24") (inst "t=i_0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                        (rule "inEqSimp_contradInEq0" (formula "24") (term "1") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                        (rule "add_literals" (formula "24") (term "0,0,1"))
                        (rule "leq_literals" (formula "24") (term "0,1"))
                        (rule "concrete_and_2" (formula "24") (term "1"))
                        (rule "concrete_or_4" (formula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "24") (term "0,0"))
                        (rule "concrete_and_2" (formula "24") (term "0"))
                        (rule "concrete_or_2" (formula "24"))
                        (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "24"))
                        (rule "andLeft" (formula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "12"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                        (rule "add_literals" (formula "12") (term "1,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0"))
                        (rule "add_zero_right" (formula "12") (term "0"))
                        (rule "leq_literals" (formula "12"))
                        (rule "closeFalse" (formula "12"))
                     )
                     (branch
                        (rule "nnf_ex2all" (formula "36"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "cnf_eqv" (formula "29") (term "0"))
                        (rule "nnf_notEx" (formula "29") (term "1,0,0"))
                        (rule "nnf_notEx" (formula "29") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "29") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "29") (term "0,0,1,0"))
                        (rule "nnf_notAnd" (formula "29") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,1,0,0"))
                        (rule "nnf_notAnd" (formula "29") (term "0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0"))
                        (rule "distr_forallAnd" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "allLeft" (formula "28") (inst "t=j_0"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                        (rule "allLeft" (formula "29") (inst "t=j_1"))
                        (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                        (rule "allLeft" (formula "20") (inst "t=i_0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "20") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "20") (term "0,0"))
                        (rule "concrete_or_2" (formula "20") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "20") (term "0,0,1"))
                        (rule "leq_literals" (formula "20") (term "0,1"))
                        (rule "concrete_and_2" (formula "20") (term "1"))
                        (rule "concrete_or_4" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "20"))
                        (rule "andLeft" (formula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "8"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "1,1,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0"))
                        (rule "add_literals" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                  )
               )
               (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) FALSE"
                  (rule "elementOfAllLocs" (formula "26") (term "0,0"))
                  (rule "ifthenelse_true" (formula "26") (term "0"))
                  (rule "allRight" (formula "29") (inst "sk=j_2"))
                  (rule "allRight" (formula "29") (inst "sk=i_2"))
                  (rule "orRight" (formula "29"))
                  (rule "orRight" (formula "29"))
                  (rule "orRight" (formula "29"))
                  (rule "applyEqReverse" (formula "28") (term "1,1,1,0,0,0,0") (ifseqformula "26"))
                  (rule "applyEqReverse" (formula "38") (term "1,1,0,0,1,1") (ifseqformula "26"))
                  (rule "applyEqReverse" (formula "38") (term "1,1,1,0,0,0,0,1") (ifseqformula "26"))
                  (rule "applyEqReverse" (formula "27") (term "1,1,0,0,0,0") (ifseqformula "26"))
                  (rule "hideAuxiliaryEq" (formula "26"))
                  (rule "inEqSimp_geqRight" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_geqRight" (formula "31"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "31"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "allLeft" (formula "23") (inst "t=j_2"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,0"))
                  (rule "allLeft" (formula "24") (inst "t=j_0"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,0,0,0,0"))
                  (rule "allLeft" (formula "25") (inst "t=j_1"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "23") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "23") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "23") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0,0,0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "25") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "25") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "25") (term "0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0,0,0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "24") (term "0,0,0,0,0"))
                  (rule "concrete_and_2" (formula "24") (term "0,0,0,0"))
                  (rule "concrete_or_2" (formula "24") (term "0,0,0"))
                  (rule "ifthenelse_split" (formula "13") (term "2,0,0"))
                  (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) TRUE"
                     (rule "elementOfUnion" (formula "14") (term "0,0"))
                     (rule "elementOfAllFields" (formula "14") (term "0,0,0"))
                     (rule "eqSymm" (formula "14") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "14") (term "1,0,0"))
                     (rule "equalUnique" (formula "14") (term "1,1,0,0"))
                     (rule "concrete_and_4" (formula "14") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "14") (term "0,0"))
                     (rule "sortsDisjointModuloNull" (formula "14") (term "0,0"))
                     (rule "replace_known_right" (formula "14") (term "1,0,0") (ifseqformula "38"))
                     (rule "concrete_and_4" (formula "14") (term "0,0"))
                     (rule "ifthenelse_false" (formula "14") (term "0"))
                     (rule "applyEqReverse" (formula "41") (term "1,1,1,1,0,0,0,1") (ifseqformula "14"))
                     (rule "applyEqReverse" (formula "41") (term "1,0,1,0,0,0,1") (ifseqformula "14"))
                     (rule "applyEqReverse" (formula "41") (term "1,0,1,0,1,1") (ifseqformula "14"))
                     (rule "applyEqReverse" (formula "41") (term "0,0,0") (ifseqformula "14"))
                     (rule "hideAuxiliaryEq" (formula "14"))
                     (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "38"))
                     (rule "concrete_not_2" (formula "40") (term "0"))
                     (rule "concrete_and_1" (formula "40"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cnf_eqv" (formula "33") (term "0"))
                        (rule "nnf_notEx" (formula "33") (term "0,1,0"))
                        (rule "nnf_notEx" (formula "33") (term "1,0,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,1,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,1,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,1,0,0"))
                        (rule "distr_forallAnd" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "andRight" (formula "41"))
                        (branch
                           (rule "allRight" (formula "41") (inst "sk=j_3"))
                           (rule "allRight" (formula "41") (inst "sk=m_0"))
                           (rule "orRight" (formula "41"))
                           (rule "orRight" (formula "41"))
                           (rule "orRight" (formula "41"))
                           (rule "inEqSimp_leqRight" (formula "44"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "43"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfCreate" (formula "4"))
                           (rule "equalUnique" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "36"))
                           (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                           (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                           (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                           (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "4") (term "0,0"))
                           (rule "ifthenelse_true" (formula "4") (term "0"))
                           (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                           (rule "mul_literals" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                           (rule "simplifySelectOfCreate" (formula "5"))
                           (rule "equalUnique" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "5") (term "0,0"))
                           (rule "ifthenelse_false" (formula "5") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "37"))
                           (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                           (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                           (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                           (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "5") (term "0,0"))
                           (rule "ifthenelse_true" (formula "5") (term "0"))
                           (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
                           (rule "andLeft" (formula "20"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "1,1,0,1"))
                           (rule "add_literals" (formula "20") (term "1,0,1"))
                           (rule "add_literals" (formula "20") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                           (rule "eqClose" (formula "21") (term "1,0"))
                           (rule "concrete_impl_4" (formula "21") (term "0"))
                           (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0"))
                           (rule "polySimp_homoEq" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "1,0,1,0"))
                           (rule "add_literals" (formula "20") (term "0,1,0"))
                           (rule "mul_literals" (formula "20") (term "1,0"))
                           (rule "add_literals" (formula "20") (term "0"))
                           (rule "eqClose" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "all_unused" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "28") (inst "t=i_2"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1,0"))
                           (rule "add_literals" (formula "28") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "28") (term "0,1,0"))
                           (rule "concrete_and_2" (formula "28") (term "1,0"))
                           (rule "concrete_or_4" (formula "28") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                           (rule "add_literals" (formula "28") (term "0,0,1"))
                           (rule "leq_literals" (formula "28") (term "0,1"))
                           (rule "concrete_and_2" (formula "28") (term "1"))
                           (rule "concrete_or_4" (formula "28"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "6") (term "0"))
                           (rule "concrete_and_2" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                        (branch
                           (rule "nnf_ex2all" (formula "41"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
                           (rule "andLeft" (formula "16"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "1,1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "add_literals" (formula "16") (term "1,0,1"))
                           (rule "add_literals" (formula "16") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "applyEq" (formula "17") (term "0,0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "1,0,1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
                           (rule "eqClose" (formula "17") (term "1,0"))
                           (rule "concrete_impl_4" (formula "17") (term "0"))
                           (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0"))
                           (rule "polySimp_homoEq" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "1,1,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0"))
                           (rule "add_zero_right" (formula "16") (term "0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "1,0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "add_literals" (formula "16") (term "0,1,0"))
                           (rule "mul_literals" (formula "16") (term "1,0"))
                           (rule "add_literals" (formula "16") (term "0"))
                           (rule "eqClose" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "all_unused" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "allLeft" (formula "24") (inst "t=i_2"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "1"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                           (rule "inEqSimp_contradInEq0" (formula "24") (term "1") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "24") (term "0,0,1"))
                           (rule "leq_literals" (formula "24") (term "0,1"))
                           (rule "concrete_and_2" (formula "24") (term "1"))
                           (rule "concrete_or_4" (formula "24"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "24") (term "0,0"))
                           (rule "concrete_and_2" (formula "24") (term "0"))
                           (rule "concrete_or_2" (formula "24"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "4"))
                           (rule "andLeft" (formula "24"))
                           (rule "inEqSimp_homoInEq1" (formula "24"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "1,1,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0"))
                           (rule "add_literals" (formula "24") (term "0"))
                           (rule "leq_literals" (formula "24"))
                           (rule "closeFalse" (formula "24"))
                        )
                     )
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "16"))
                        (rule "cnf_eqv" (formula "33") (term "0"))
                        (rule "nnf_notEx" (formula "33") (term "1,0,0"))
                        (rule "nnf_notEx" (formula "33") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,1,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,1,0,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0,1,0"))
                        (rule "distr_forallAnd" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "andRight" (formula "42"))
                        (branch
                           (rule "allRight" (formula "42") (inst "sk=j_3"))
                           (rule "allRight" (formula "42") (inst "sk=m_0"))
                           (rule "orRight" (formula "42"))
                           (rule "orRight" (formula "42"))
                           (rule "orRight" (formula "42"))
                           (rule "inEqSimp_leqRight" (formula "45"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "45"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "45"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "45"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfCreate" (formula "4"))
                           (rule "equalUnique" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "36"))
                           (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                           (rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                           (rule "equalUnique" (formula "4") (term "0,0,0,0"))
                           (rule "concrete_not_2" (formula "4") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "4") (term "0,0"))
                           (rule "ifthenelse_true" (formula "4") (term "0"))
                           (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                           (rule "mul_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                           (rule "simplifySelectOfCreate" (formula "5"))
                           (rule "equalUnique" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "5") (term "0,0"))
                           (rule "ifthenelse_false" (formula "5") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "37"))
                           (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                           (rule "elementOfAllLocs" (formula "5") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                           (rule "equalUnique" (formula "5") (term "0,0,0,0"))
                           (rule "concrete_not_2" (formula "5") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "5") (term "0,0"))
                           (rule "ifthenelse_true" (formula "5") (term "0"))
                           (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
                           (rule "andLeft" (formula "20"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "20") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "1,1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,1,0,1"))
                           (rule "add_literals" (formula "20") (term "1,0,1"))
                           (rule "add_literals" (formula "20") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                           (rule "eqClose" (formula "21") (term "1,0"))
                           (rule "concrete_impl_4" (formula "21") (term "0"))
                           (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0"))
                           (rule "polySimp_homoEq" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "20") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "0,0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "20") (term "1,0,1,0"))
                           (rule "add_literals" (formula "20") (term "0,1,0"))
                           (rule "mul_literals" (formula "20") (term "1,0"))
                           (rule "add_literals" (formula "20") (term "0"))
                           (rule "eqClose" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "all_unused" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "28") (inst "t=i_2"))
                           (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "28") (term "0,0"))
                           (rule "concrete_or_2" (formula "28") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                           (rule "add_literals" (formula "28") (term "0,0,1"))
                           (rule "leq_literals" (formula "28") (term "0,1"))
                           (rule "concrete_and_2" (formula "28") (term "1"))
                           (rule "concrete_or_4" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "8"))
                           (rule "andLeft" (formula "28"))
                           (rule "inEqSimp_homoInEq1" (formula "28"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "leq_literals" (formula "28"))
                           (rule "closeFalse" (formula "28"))
                        )
                        (branch
                           (rule "nnf_ex2all" (formula "42"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
                           (rule "andLeft" (formula "16"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,1"))
                           (rule "lenOfSeqConcat" (formula "16") (term "1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "1,1,0,1"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,1,0,1"))
                           (rule "add_literals" (formula "16") (term "1,0,1"))
                           (rule "add_literals" (formula "16") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "applyEq" (formula "17") (term "0,0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                           (rule "lenOfSeqConcat" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                           (rule "lenOfSeqSingleton" (formula "17") (term "1,0,1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
                           (rule "eqClose" (formula "17") (term "1,0"))
                           (rule "concrete_impl_4" (formula "17") (term "0"))
                           (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0"))
                           (rule "polySimp_homoEq" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "1,1,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0"))
                           (rule "add_zero_right" (formula "16") (term "0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "lenOfSeqConcat" (formula "16") (term "0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "1,0,1,0"))
                           (rule "lenOfSeqSingleton" (formula "16") (term "0,0,1,0"))
                           (rule "add_literals" (formula "16") (term "0,1,0"))
                           (rule "mul_literals" (formula "16") (term "1,0"))
                           (rule "add_literals" (formula "16") (term "0"))
                           (rule "eqClose" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "all_unused" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "allLeft" (formula "24") (inst "t=i_2"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "24") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "24") (term "0,0"))
                           (rule "concrete_or_2" (formula "24") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "24") (term "1") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "24") (term "0,0,1"))
                           (rule "leq_literals" (formula "24") (term "0,1"))
                           (rule "concrete_and_2" (formula "24") (term "1"))
                           (rule "concrete_or_4" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "24"))
                           (rule "andLeft" (formula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_literals" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                     )
                  )
                  (branch "forall int j; forall int i; ( i <= -1 | j >= 1 + self.size | j <= i | self.numbers[j] >= self.numbers[i]) FALSE"
                     (rule "elementOfAllLocs" (formula "13") (term "0,0"))
                     (rule "ifthenelse_true" (formula "13") (term "0"))
                     (rule "allRight" (formula "35") (inst "sk=j_3"))
                     (rule "allRight" (formula "35") (inst "sk=i_3"))
                     (rule "orRight" (formula "35"))
                     (rule "orRight" (formula "35"))
                     (rule "orRight" (formula "35"))
                     (rule "applyEqReverse" (formula "44") (term "0,0,0") (ifseqformula "13"))
                     (rule "applyEqReverse" (formula "44") (term "1,1,1,1,0,0,0,1") (ifseqformula "13"))
                     (rule "applyEqReverse" (formula "44") (term "1,0,1,0,1,1") (ifseqformula "13"))
                     (rule "applyEqReverse" (formula "44") (term "1,0,1,0,0,0,1") (ifseqformula "13"))
                     (rule "hideAuxiliaryEq" (formula "13"))
                     (rule "inEqSimp_geqRight" (formula "37"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_leqRight" (formula "37"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_geqRight" (formula "37"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "37"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "cut_direct" (formula "19") (term "0"))
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "cnf_eqv" (formula "36") (term "0"))
                        (rule "nnf_notEx" (formula "36") (term "0,1,0"))
                        (rule "nnf_notEx" (formula "36") (term "1,0,0"))
                        (rule "nnf_notAnd" (formula "36") (term "0,0,1,0"))
                        (rule "nnf_notAnd" (formula "36") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "36") (term "0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,0,1,0"))
                        (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,1,0,0"))
                        (rule "distr_forallAnd" (formula "36"))
                        (rule "andLeft" (formula "36"))
                        (rule "allLeft" (formula "29") (inst "t=j_3"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "29") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0,0"))
                        (rule "concrete_or_2" (formula "29") (term "0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "18") (inst "iv=iv"))
                        (rule "andLeft" (formula "18"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "1,1,0,1"))
                        (rule "add_literals" (formula "18") (term "1,0,1"))
                        (rule "add_literals" (formula "18") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                        (rule "applyEq" (formula "19") (term "0,0,1,0,0,1,0,0") (ifseqformula "20"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "lenOfSeqSingleton" (formula "19") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "20"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0"))
                        (rule "polySimp_homoEq" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "1,1,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0"))
                        (rule "add_zero_right" (formula "18") (term "0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "1,0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "add_literals" (formula "18") (term "0,1,0"))
                        (rule "mul_literals" (formula "18") (term "1,0"))
                        (rule "add_literals" (formula "18") (term "0"))
                        (rule "eqClose" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
                        (rule "eqClose" (formula "18") (term "1,0"))
                        (rule "concrete_impl_4" (formula "18") (term "0"))
                        (rule "all_unused" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "allLeft" (formula "26") (inst "t=i_2"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "26") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "26") (term "0,0"))
                        (rule "concrete_or_2" (formula "26") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "26") (term "1") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "26") (term "0,0,1"))
                        (rule "leq_literals" (formula "26") (term "0,1"))
                        (rule "concrete_and_2" (formula "26") (term "1"))
                        (rule "concrete_or_4" (formula "26"))
                        (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "26"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "7"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                        (rule "add_literals" (formula "7") (term "1,1,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0"))
                        (rule "add_zero_right" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "19"))
                        (rule "cnf_eqv" (formula "36") (term "0"))
                        (rule "nnf_notEx" (formula "36") (term "1,0,0"))
                        (rule "nnf_notEx" (formula "36") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "36") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "36") (term "0,0,1,0"))
                        (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,1,0,0"))
                        (rule "nnf_notAnd" (formula "36") (term "0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,0,1,0"))
                        (rule "distr_forallAnd" (formula "36"))
                        (rule "andLeft" (formula "36"))
                        (rule "allLeft" (formula "29") (inst "t=j_3"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "29") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "29") (term "0,0,0,0,0"))
                        (rule "concrete_and_2" (formula "29") (term "0,0,0,0"))
                        (rule "concrete_or_2" (formula "29") (term "0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "18") (inst "iv=iv"))
                        (rule "andLeft" (formula "18"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1"))
                        (rule "lenOfSeqConcat" (formula "18") (term "1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,1,0,1"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "1,1,0,1"))
                        (rule "add_literals" (formula "18") (term "1,0,1"))
                        (rule "add_literals" (formula "18") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                        (rule "applyEq" (formula "19") (term "0,0,1,0") (ifseqformula "20"))
                        (rule "eqClose" (formula "19") (term "1,0"))
                        (rule "concrete_impl_4" (formula "19") (term "0"))
                        (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "20"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0"))
                        (rule "polySimp_homoEq" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "1,1,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0"))
                        (rule "add_zero_right" (formula "18") (term "0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "lenOfSeqConcat" (formula "18") (term "0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "1,0,1,0"))
                        (rule "lenOfSeqSingleton" (formula "18") (term "0,0,1,0"))
                        (rule "add_literals" (formula "18") (term "0,1,0"))
                        (rule "mul_literals" (formula "18") (term "1,0"))
                        (rule "add_literals" (formula "18") (term "0"))
                        (rule "eqClose" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "all_unused" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "allLeft" (formula "26") (inst "t=i_2"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "26") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "26") (term "0,0"))
                        (rule "concrete_or_2" (formula "26") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "26") (term "1") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "26") (term "0,0,1"))
                        (rule "leq_literals" (formula "26") (term "0,1"))
                        (rule "concrete_and_2" (formula "26") (term "1"))
                        (rule "concrete_or_4" (formula "26"))
                        (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "26"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "7"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                        (rule "add_literals" (formula "7") (term "1,1,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0"))
                        (rule "add_zero_right" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                  )
               )
            )
         )
      )
   )
)
(branch "Exceptional Post (eliminateDuplicates)"
   (rule "instanceof_static_type" (formula "12") (term "0,0,1,0,1,1,0,1,1,1,1,1"))
   (rule "boolean_equal" (formula "12") (term "0,1,0,1,1,0,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "12") (term "1,0,1,1,0,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "0,0,0,0,1,1,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "12") (term "0,0,0,1,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,0,0,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,0,0,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,0,0,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,0,0,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,0,0,1,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,1,0,0,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,0,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,1,0,0,0,1,1,1,1,1,1,1"))
   (rule "expandInInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "16"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "16"))
   (rule "simplifyUpdate3" (formula "16") (term "1,0"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "andLeft" (formula "12"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "andLeft" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "notLeft" (formula "13"))
   (rule "applyOnRigidFormula" (formula "12"))
   (rule "simplifyUpdate1" (formula "12") (term "1"))
   (rule "applyOnRigidFormula" (formula "14"))
   (rule "simplifyUpdate2" (formula "14") (term "0"))
   (rule "simplifyUpdate2" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "13"))
   (rule "simplifyUpdate1" (formula "13") (term "1"))
   (rule "applyOnRigidTerm" (formula "12") (term "0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1"))
   (rule "replace_known_right" (formula "14") (term "0,0,1") (ifseqformula "16"))
   (rule "concrete_not_2" (formula "14") (term "0,1"))
   (rule "concrete_and_1" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "1,1"))
   (rule "replace_known_right" (formula "15") (term "1,1") (ifseqformula "16"))
   (rule "concrete_and_4" (formula "15") (term "1"))
   (rule "concrete_impl_3" (formula "15"))
   (rule "notLeft" (formula "15"))
   (rule "applyOnRigidTerm" (formula "13") (term "0"))
   (rule "simplifyUpdate1" (formula "13") (term "2,0"))
   (rule "simplifyUpdate1" (formula "13") (term "1,0"))
   (rule "applyOnPV" (formula "13") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "0"))
   (rule "applyOnRigidTerm" (formula "12") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,1,1,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0"))
   (rule "applyOnRigidTerm" (formula "12") (term "1,1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,1,0"))
   (rule "replace_known_right" (formula "14") (term "0,1,1,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "14") (term "1,1,0"))
   (rule "concrete_and_3" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,0"))
   (rule "replace_known_right" (formula "14") (term "0,1,0,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "14") (term "1,0,0"))
   (rule "concrete_and_3" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
   (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
   (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
   (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "15") (term "0"))
   (rule "concrete_and_1" (formula "15"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,1,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,0,0,1,0"))
   (rule "simplifyUpdate2" (formula "12") (term "0,1,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1"))
   (rule "applyOnPV" (formula "15") (term "0,0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,1,0,1,1,0"))
   (rule "simplifyUpdate2" (formula "12") (term "0,1,1,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,1,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,1,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0,1,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "12") (term "0,0,1,1,0"))
   (rule "concrete_and_1" (formula "12") (term "0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,1,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
   (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
   (rule "replace_known_right" (formula "15") (term "0,1,1") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "15") (term "1,1"))
   (rule "concrete_and_3" (formula "15") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "15") (term "0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,1,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,1,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0,0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,1,0,0,0,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,1,0,0,0,1,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "12") (term "1,0,0,0,1,0"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,1,1,0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,1,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,1,0,0,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,1,1,0,0,1,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "12") (term "1,1,0,0,1,0"))
   (rule "concrete_and_3" (formula "12") (term "1,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,0"))
   (rule "simplifyUpdate2" (formula "15") (term "0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,1,1,0,1,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,1,1,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,1,0,1,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,1,1,0,1,1,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "12") (term "1,1,0,1,1,0"))
   (rule "concrete_and_3" (formula "12") (term "1,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,0,1,1,0"))
   (rule "simplifyUpdate2" (formula "12") (term "0,0,0,0,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,0,0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,0,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,1,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "2,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "1,1,1,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "0,1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "1,0,0,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "2,1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1,1,0,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,0,0,0,0,1,1,0"))
   (rule "applyOnPV" (formula "12") (term "1,0,1,0,0,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,0,1,0,0,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0,0,0,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "1,1,0,0,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,1,1,0,0,0,0,1,1,0"))
   (rule "applyOnPV" (formula "12") (term "1,1,1,0,0,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,1,1,0,0,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0,0,0,0,1,1,0"))
   (rule "replace_known_right" (formula "12") (term "0,1,1,0") (ifseqformula "15"))
   (rule "ifthenelse_false" (formula "12") (term "1,1,0"))
   (rule "intersectWithAllLocsRight" (formula "12") (term "1,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,0"))
   (rule "blockThrow" (formula "20") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,0,0,0"))
   (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "12"))
   (rule "elementOfFreshLocs" (formula "13") (term "1,0,0"))
   (rule "eqClose" (formula "13") (term "0,1,0,0,0"))
   (rule "concrete_not_1" (formula "13") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "13") (term "0,0,0"))
   (rule "concrete_or_2" (formula "13") (term "0,0"))
   (rule "replace_known_right" (formula "13") (term "0,0,0,0") (ifseqformula "17"))
   (rule "concrete_not_2" (formula "13") (term "0,0,0"))
   (rule "concrete_and_1" (formula "13") (term "0,0"))
   (rule "ifthenelse_negated" (formula "13") (term "0"))
   (rule "applyEqRigid" (formula "13") (term "1") (ifseqformula "14"))
   (rule "ifEqualsTRUE" (formula "13"))
   (rule "eq_and" (formula "13") (term "0"))
   (rule "pullOutSelect" (formula "15") (term "0,1,0,0,1") (inst "selectSK=BinarySearch_size_0"))
   (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "12"))
   (rule "elementOfFreshLocs" (formula "15") (term "1,0,0"))
   (rule "equalUnique" (formula "15") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "15") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "15") (term "0,0,0"))
   (rule "replace_known_left" (formula "15") (term "0,1,1,0,0") (ifseqformula "4"))
   (rule "concrete_not_1" (formula "15") (term "1,1,0,0"))
   (rule "concrete_and_4" (formula "15") (term "1,0,0"))
   (rule "concrete_or_4" (formula "15") (term "0,0"))
   (rule "hideAuxiliaryEqConcrete" (formula "14"))
   (rule "nnf_imp2or" (formula "16") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
   (rule "commute_and" (formula "15") (term "0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "15") (term "1,0,1") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "15") (term "0,1"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "16") (term "1") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "16"))
   (rule "allRight" (formula "16") (inst "sk=j_0"))
   (rule "allRight" (formula "16") (inst "sk=i_0"))
   (rule "orRight" (formula "16"))
   (rule "orRight" (formula "16"))
   (rule "orRight" (formula "16"))
   (rule "inEqSimp_geqRight" (formula "19"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_geqRight" (formula "19"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "18"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "19"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "18") (term "1,0,2,0,0") (ifseqformula "9"))
   (rule "concrete_and_3" (formula "18") (term "0,2,0,0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "16") (term "1,0,1,0") (ifseqformula "9"))
   (rule "concrete_and_3" (formula "16") (term "0,1,0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "19") (term "0,0") (ifseqformula "9"))
   (rule "concrete_and_1" (formula "19") (term "0"))
   (rule "cnf_rightDist" (formula "17"))
   (rule "neq_or" (formula "17") (term "0"))
   (rule "concrete_and_1" (formula "17"))
   (rule "allLeft" (formula "11") (inst "t=j_0"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0"))
   (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0"))
   (rule "leq_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "concrete_and_2" (formula "11") (term "0,0,0,0"))
   (rule "concrete_or_2" (formula "11") (term "0,0,0"))
   (rule "commute_or" (formula "18"))
   (rule "methodCallParamThrow" (formula "25") (term "1"))
   (rule "tryCatchThrow" (formula "25") (term "1"))
   (rule "ifElseUnfold" (formula "25") (term "1") (inst "#boolv=b"))
   (rule "variableDeclaration" (formula "25") (term "1") (newnames "b"))
   (rule "equality_comparison_simple" (formula "25") (term "1"))
   (rule "sequentialToParallel2" (formula "25"))
   (rule "simplifyUpdate3" (formula "25") (term "1,0"))
   (rule "replace_known_right" (formula "25") (term "0,0,1,0") (ifseqformula "21"))
   (rule "ifthenelse_false" (formula "25") (term "0,1,0"))
   (rule "allLeft" (formula "11") (inst "t=i_0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
   (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
   (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
   (rule "leq_literals" (formula "11") (term "0,1,0"))
   (rule "concrete_and_2" (formula "11") (term "1,0"))
   (rule "concrete_or_4" (formula "11") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "4"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
   (rule "add_literals" (formula "11") (term "0,0,1"))
   (rule "leq_literals" (formula "11") (term "0,1"))
   (rule "concrete_and_2" (formula "11") (term "1"))
   (rule "concrete_or_4" (formula "11"))
   (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "2"))
   (rule "qeq_literals" (formula "11") (term "0"))
   (rule "concrete_and_2" (formula "11"))
   (rule "closeFalse" (formula "11"))
)
(branch "Pre (eliminateDuplicates)"
   (rule "expandInInt" (formula "14") (term "1,0,0,0,0,1,1,0,1,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,0,0,1,1,0,1,1"))
   (rule "expandInInt" (formula "14") (term "1,0,0,0,0,1,1,0,1,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,0,0,1,1,0,1,1"))
   (rule "simplifyUpdate2" (formula "14"))
   (rule "simplifyUpdate2" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1"))
   (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "3"))
   (rule "concrete_and_1" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1"))
   (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "13"))
   (rule "concrete_or_2" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1"))
   (rule "applyOnPV" (formula "14") (term "1,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1"))
   (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "1"))
   (rule "concrete_and_3" (formula "14"))
   (rule "orRight" (formula "14"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
   (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,0"))
   (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "13"))
   (rule "concrete_not_2" (formula "15") (term "0"))
   (rule "concrete_and_1" (formula "15"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
   (rule "replace_known_right" (formula "14") (term "0,1,0") (ifseqformula "13"))
   (rule "concrete_not_2" (formula "14") (term "1,0"))
   (rule "concrete_and_3" (formula "14") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1"))
   (rule "replace_known_right" (formula "14") (term "0,1,1") (ifseqformula "13"))
   (rule "concrete_not_2" (formula "14") (term "1,1"))
   (rule "concrete_and_3" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
   (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
   (rule "replace_known_right" (formula "15") (term "0,1,1") (ifseqformula "13"))
   (rule "concrete_not_2" (formula "15") (term "1,1"))
   (rule "concrete_and_3" (formula "15") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "15") (term "0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "2,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "15") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
   (rule "commute_and" (formula "14"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "15") (term "1") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "15"))
   (rule "allRight" (formula "15") (inst "sk=j_0"))
   (rule "allRight" (formula "15") (inst "sk=i_0"))
   (rule "orRight" (formula "15"))
   (rule "orRight" (formula "15"))
   (rule "orRight" (formula "15"))
   (rule "inEqSimp_geqRight" (formula "18"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_geqRight" (formula "18"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "17"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "18"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "18") (term "0") (ifseqformula "9"))
   (rule "concrete_and_1" (formula "18"))
   (rule "allLeft" (formula "11") (inst "t=j_0"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0"))
   (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0"))
   (rule "leq_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "concrete_and_2" (formula "11") (term "0,0,0,0"))
   (rule "concrete_or_2" (formula "11") (term "0,0,0"))
   (rule "allLeft" (formula "11") (inst "t=i_0"))
   (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "11") (term "0,0,0"))
   (rule "concrete_and_2" (formula "11") (term "0,0"))
   (rule "concrete_or_2" (formula "11") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "4"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,1"))
   (rule "leq_literals" (formula "11") (term "0,1"))
   (rule "concrete_and_2" (formula "11") (term "1"))
   (rule "concrete_or_4" (formula "11"))
   (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "1"))
   (rule "andLeft" (formula "11"))
   (rule "inEqSimp_homoInEq1" (formula "11"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
   (rule "add_literals" (formula "11") (term "1,1,0"))
   (rule "times_zero_1" (formula "11") (term "1,0"))
   (rule "add_zero_right" (formula "11") (term "0"))
   (rule "leq_literals" (formula "11"))
   (rule "closeFalse" (formula "11"))
)
)
}
